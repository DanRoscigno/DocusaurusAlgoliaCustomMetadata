"use strict";(self.webpackChunkstarrocks=self.webpackChunkstarrocks||[]).push([[40779],{87885:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>o});var s=r(85893),n=r(11151);const i={displayed_sidebar:"documentation"},l="SHOW MATERIALIZED VIEW",d={id:"sql-reference/sql-statements/data-manipulation/SHOW_MATERIALIZED_VIEW",title:"SHOW MATERIALIZED VIEW",description:"Description",source:"@site/versioned_docs/version-2.5/sql-reference/sql-statements/data-manipulation/SHOW_MATERIALIZED_VIEW.md",sourceDirName:"sql-reference/sql-statements/data-manipulation",slug:"/sql-reference/sql-statements/data-manipulation/SHOW_MATERIALIZED_VIEW",permalink:"/doc/docs/2.5/sql-reference/sql-statements/data-manipulation/SHOW_MATERIALIZED_VIEW",draft:!1,unlisted:!1,editUrl:"https://github.com/StarRocks/starrocks/edit/main/docs/sql-reference/sql-statements/data-manipulation/SHOW_MATERIALIZED_VIEW.md",tags:[],version:"2.5",frontMatter:{displayed_sidebar:"documentation"},sidebar:"documentation",previous:{title:"DROP MATERIALIZED VIEW",permalink:"/doc/docs/2.5/sql-reference/sql-statements/data-definition/DROP_MATERIALIZED_VIEW"},next:{title:"Troubleshooting asynchronous materialized views",permalink:"/doc/docs/2.5/using_starrocks/troubleshooting_asynchronous_materialized_views"}},a={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Examples",id:"examples",level:2}];function c(e){const t=Object.assign({h1:"h1",h2:"h2",p:"p",pre:"pre",code:"code",table:"table",thead:"thead",tr:"tr",th:"th",strong:"strong",tbody:"tbody",td:"td"},(0,n.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"show-materialized-view",children:"SHOW MATERIALIZED VIEW"}),"\n",(0,s.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(t.p,{children:"Shows all or one specific asynchronous materialized view."}),"\n",(0,s.jsx)(t.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-SQL",children:'SHOW MATERIALIZED VIEW\n[FROM db_name]\n[\nWHERE\n[NAME { = "mv_name" | LIKE "mv_name_matcher"}\n]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Parameters in brackets [] is optional."}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"Parameter"})}),(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"Required"})}),(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"Description"})})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"db_name"}),(0,s.jsx)(t.td,{children:"no"}),(0,s.jsx)(t.td,{children:"The name of the database to which the materialized view resides. If this parameter is not specified, the current database is used by default."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"mv_name"}),(0,s.jsx)(t.td,{children:"no"}),(0,s.jsx)(t.td,{children:"The name of the materialized view to show."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"mv_name_matcher"}),(0,s.jsx)(t.td,{children:"no"}),(0,s.jsx)(t.td,{children:"The matcher used to filter materialized views."})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"Return"})}),(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"Description"})})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"id"}),(0,s.jsx)(t.td,{children:"The ID of the materialized view."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"database_name"}),(0,s.jsx)(t.td,{children:"The name of the database in which the materialized view resides."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"name"}),(0,s.jsx)(t.td,{children:"The name of the materialized view."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"refresh_type"}),(0,s.jsx)(t.td,{children:"The refresh type of the materialized view, including ROLLUP, MANUAL, ASYNC, and INCREMENTAL."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"is_active"}),(0,s.jsxs)(t.td,{children:["Whether the materialized view state is active. Valid Value: ",(0,s.jsx)(t.code,{children:"true"})," and ",(0,s.jsx)(t.code,{children:"false"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"partition_type"}),(0,s.jsx)(t.td,{children:"The partition type of the materialized view, including RANGE and UNPARTITIONED."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"task_id"}),(0,s.jsx)(t.td,{children:"ID of the materialized view refresh task."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"task_name"}),(0,s.jsx)(t.td,{children:"Name of the materialized view refresh task."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"last_refresh_start_time"}),(0,s.jsx)(t.td,{children:"The start time of the last refresh of the materialized view."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"last_refresh_finished_time"}),(0,s.jsx)(t.td,{children:"The end time of the last refresh of the materialized view."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"last_refresh_duration"}),(0,s.jsx)(t.td,{children:"The time taken by the last refresh. Unit: seconds."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"last_refresh_state"}),(0,s.jsx)(t.td,{children:"The status of the last refresh, including PENDING, RUNNING, FAILED, and SUCCESS."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"last_refresh_force_refresh"}),(0,s.jsx)(t.td,{children:"Whether the last refresh is a FORCE refresh."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"last_refresh_start_partition"}),(0,s.jsx)(t.td,{children:"The start partition of the last refresh in the materialized view."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"last_refresh_end_partition"}),(0,s.jsx)(t.td,{children:"The end partition of the last refresh in the materialized view."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"last_refresh_base_refresh_partitions"}),(0,s.jsx)(t.td,{children:"The base table partitions that were refreshed in the last refresh."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"last_refresh_mv_refresh_partitions"}),(0,s.jsx)(t.td,{children:"The materialized view partitions that were refreshed in the last refresh."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"last_refresh_error_code"}),(0,s.jsx)(t.td,{children:"The error code for the last failed refresh of the materialized view (if the materialized view state is not active)."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"last_refresh_error_message"}),(0,s.jsx)(t.td,{children:"The reason why the last refresh failed (if the materialized view state is not active)."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"rows"}),(0,s.jsx)(t.td,{children:"The number of data rows in the materialized view."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"text"}),(0,s.jsx)(t.td,{children:"The statement used to create the materialized view."})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(t.p,{children:"Example 1: Show a specific materialized view"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-Plain",children:'MySQL > SHOW MATERIALIZED VIEW WHERE NAME = "lo_mv1"\\G\n*************************** 1. row ***************************\n           id: 475899\n         name: lo_mv1\ndatabase_name: wlc_test\n         text: CREATE MATERIALIZED VIEW `lo_mv1`\nCOMMENT "MATERIALIZED_VIEW"\nDISTRIBUTED BY HASH(`lo_orderkey`) BUCKETS 10 \nREFRESH ASYNC\nPROPERTIES (\n"replication_num" = "3",\n"storage_medium" = "HDD"\n)\nAS SELECT `wlc_test`.`lineorder`.`lo_orderkey` AS `lo_orderkey`, `wlc_test`.`lineorder`.`lo_custkey` AS `lo_custkey`, sum(`wlc_test`.`lineorder`.`lo_quantity`) AS `total_quantity`, sum(`wlc_test`.`lineorder`.`lo_revenue`) AS `total_revenue`, count(`wlc_test`.`lineorder`.`lo_shipmode`) AS `shipmode_count` FROM `wlc_test`.`lineorder` GROUP BY `wlc_test`.`lineorder`.`lo_orderkey`, `wlc_test`.`lineorder`.`lo_custkey` ORDER BY `wlc_test`.`lineorder`.`lo_orderkey` ASC ;\n         rows: 0\n1 row in set (0.42 sec)\n'})}),"\n",(0,s.jsx)(t.p,{children:"Example 2: Show specific materialized views by matching the name"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-Plain",children:'MySQL > SHOW MATERIALIZED VIEW WHERE NAME LIKE "lo_mv%"\\G\n*************************** 1. row ***************************\n           id: 475985\n         name: lo_mv2\ndatabase_name: wlc_test\n         text: CREATE MATERIALIZED VIEW `lo_mv2`\nCOMMENT "MATERIALIZED_VIEW"\nPARTITION BY (`lo_orderdate`)\nDISTRIBUTED BY HASH(`lo_orderkey`) BUCKETS 10 \nREFRESH ASYNC START("2023-07-01 10:00:00") EVERY(INTERVAL 1 DAY)\nPROPERTIES (\n"replication_num" = "3",\n"storage_medium" = "HDD"\n)\nAS SELECT `wlc_test`.`lineorder`.`lo_orderkey` AS `lo_orderkey`, `wlc_test`.`lineorder`.`lo_orderdate` AS `lo_orderdate`, `wlc_test`.`lineorder`.`lo_custkey` AS `lo_custkey`, sum(`wlc_test`.`lineorder`.`lo_quantity`) AS `total_quantity`, sum(`wlc_test`.`lineorder`.`lo_revenue`) AS `total_revenue`, count(`wlc_test`.`lineorder`.`lo_shipmode`) AS `shipmode_count` FROM `wlc_test`.`lineorder` GROUP BY `wlc_test`.`lineorder`.`lo_orderkey`, `wlc_test`.`lineorder`.`lo_orderdate`, `wlc_test`.`lineorder`.`lo_custkey` ORDER BY `wlc_test`.`lineorder`.`lo_orderkey` ASC ;\n         rows: 0\n*************************** 2. row ***************************\n           id: 475899\n         name: lo_mv1\ndatabase_name: wlc_test\n         text: CREATE MATERIALIZED VIEW `lo_mv1`\nCOMMENT "MATERIALIZED_VIEW"\nDISTRIBUTED BY HASH(`lo_orderkey`) BUCKETS 10 \nREFRESH ASYNC\nPROPERTIES (\n"replication_num" = "3",\n"storage_medium" = "HDD"\n)\nAS SELECT `wlc_test`.`lineorder`.`lo_orderkey` AS `lo_orderkey`, `wlc_test`.`lineorder`.`lo_custkey` AS `lo_custkey`, sum(`wlc_test`.`lineorder`.`lo_quantity`) AS `total_quantity`, sum(`wlc_test`.`lineorder`.`lo_revenue`) AS `total_revenue`, count(`wlc_test`.`lineorder`.`lo_shipmode`) AS `shipmode_count` FROM `wlc_test`.`lineorder` GROUP BY `wlc_test`.`lineorder`.`lo_orderkey`, `wlc_test`.`lineorder`.`lo_custkey` ORDER BY `wlc_test`.`lineorder`.`lo_orderkey` ASC ;\n         rows: 0\n*************************** 3. row ***************************\n           id: 477338\n         name: lo_mv_sync_2\ndatabase_name: wlc_test\n         text: CREATE MATERIALIZED VIEW lo_mv_sync_2 REFRESH SYNC AS select lo_orderkey, lo_orderdate, lo_custkey, sum(lo_quantity) as total_quantity, sum(lo_revenue) as total_revenue, count(lo_shipmode) as shipmode_count from lineorder group by lo_orderkey, lo_orderdate, lo_custkey\n         rows: 0\n*************************** 4. row ***************************\n           id: 475992\n         name: lo_mv_sync_1\ndatabase_name: wlc_test\n         text: CREATE MATERIALIZED VIEW lo_mv_sync_1ASselect lo_orderkey, lo_orderdate, lo_custkey, sum(lo_quantity) as total_quantity, sum(lo_revenue) as total_revenue, count(lo_shipmode) as shipmode_countfrom lineorder group by lo_orderkey, lo_orderdate, lo_custkey\n         rows: 0\n4 rows in set (0.04 sec)\n'})})]})}const h=function(e={}){const{wrapper:t}=Object.assign({},(0,n.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(c,e)})):c(e)}},11151:(e,t,r)=>{r.d(t,{Zo:()=>d,ah:()=>i});var s=r(67294);const n=s.createContext({});function i(e){const t=s.useContext(n);return s.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const l={};function d({components:e,children:t,disableParentContext:r}){let d;return d=r?"function"==typeof e?e({}):e||l:i(e),s.createElement(n.Provider,{value:d},t)}}}]);