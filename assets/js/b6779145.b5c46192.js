"use strict";(self.webpackChunkstarrocks=self.webpackChunkstarrocks||[]).push([[46950],{85990:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var t=s(85893),r=s(11151);const i={displayed_sidebar:"English"},a="unnest",o={id:"sql-reference/sql-functions/array-functions/unnest",title:"unnest",description:"Description",source:"@site/versioned_docs/version-2.3/sql-reference/sql-functions/array-functions/unnest.md",sourceDirName:"sql-reference/sql-functions/array-functions",slug:"/sql-reference/sql-functions/array-functions/unnest",permalink:"/docs/2.3/sql-reference/sql-functions/array-functions/unnest",draft:!1,unlisted:!1,editUrl:"https://github.com/StarRocks/starrocks/edit/main/docs/sql-reference/sql-functions/array-functions/unnest.md",tags:[],version:"2.3",frontMatter:{displayed_sidebar:"English"},sidebar:"English",previous:{title:"reverse",permalink:"/docs/2.3/sql-reference/sql-functions/array-functions/reverse"},next:{title:"bitand",permalink:"/docs/2.3/sql-reference/sql-functions/bit-functions/bitand"}},l={},c=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return value",id:"return-value",level:2},{value:"Usage notes",id:"usage-notes",level:2},{value:"Examples",id:"examples",level:2}];function d(e){const n=Object.assign({h1:"h1",h2:"h2",p:"p",a:"a",pre:"pre",code:"code",ul:"ul",li:"li"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"unnest",children:"unnest"}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(n.p,{children:'UNNEST is a table function that takes an array and converts elements in that array into multiple rows of a table. The conversion is also known as "flattening".'}),"\n",(0,t.jsxs)(n.p,{children:["You can use Lateral join with UNNEST to implement common conversions, for example, from STRING, ARRAY, or BITMAP to multiple rows. For more information, see ",(0,t.jsx)(n.a,{href:"/docs/2.3/using_starrocks/Lateral_join",children:"Lateral join"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Haskell",children:"unnest(array)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"array"}),": the array you want to convert. It must be an array or an expression that can evaluate to an ARRAY data type."]}),"\n",(0,t.jsx)(n.h2,{id:"return-value",children:"Return value"}),"\n",(0,t.jsx)(n.p,{children:"Returns the multiple rows converted from the array. The type of return value depends on the types of elements in the array."}),"\n",(0,t.jsx)(n.h2,{id:"usage-notes",children:"Usage notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"UNNEST is a table function. It must be used with Lateral Join but the keyword Lateral Join does not need to be explicitly specified."}),"\n",(0,t.jsx)(n.li,{children:"If the array expression evaluates to NULL or it is empty, no rows will be returned."}),"\n",(0,t.jsx)(n.li,{children:"If an element in the array is NULL, NULL is returned for that element."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-SQL",children:'-- Create table student_score where scores is an ARRAY column.\nCREATE TABLE student_score\n(\n    `id` bigint(20) NULL COMMENT "",\n    `scores` ARRAY<int> NULL COMMENT ""\n)\nDUPLICATE KEY (id)\nDISTRIBUTED BY HASH(`id`) BUCKETS 1;\n-- Insert data into this table.\nINSERT INTO student_score VALUES\n(1, [80,85,87]),\n(2, [77, null, 89]),\n(3, null),\n(4, []),\n(5, [90,92]);\n-- Query data from this table.\nSELECT * FROM student_score ORDER BY id;\n+------+--------------+\n| id   | scores       |\n+------+--------------+\n|    1 | [80,85,87]   |\n|    2 | [77,null,89] |\n|    3 | NULL         |\n|    4 | []           |\n|    5 | [90,92]      |\n+------+--------------+\n-- Use UNNEST to flatten the scores column into multiple rows.\nSELECT id, scores, unnest FROM student_score, unnest(scores);\n+------+--------------+--------+\n| id   | scores       | unnest |\n+------+--------------+--------+\n|    1 | [80,85,87]   |     80 |\n|    1 | [80,85,87]   |     85 |\n|    1 | [80,85,87]   |     87 |\n|    2 | [77,null,89] |     77 |\n|    2 | [77,null,89] |   NULL |\n|    2 | [77,null,89] |     89 |\n|    5 | [90,92]      |     90 |\n|    5 | [90,92]      |     92 |\n+------+--------------+--------+\n'})}),"\n",(0,t.jsxs)(n.p,{children:["[80,85,87] corresponding to ",(0,t.jsx)(n.code,{children:"id = 1"})," is converted into three rows."]}),"\n",(0,t.jsxs)(n.p,{children:["[77,null,89] corresponding to ",(0,t.jsx)(n.code,{children:"id = 2"})," retains the null value."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"scores"})," corresponding to  ",(0,t.jsx)(n.code,{children:"id = 3"})," and ",(0,t.jsx)(n.code,{children:"id = 4"})," are NULL and empty, which are skipped."]})]})}const u=function(e={}){const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(d,e)})):d(e)}},11151:(e,n,s)=>{s.d(n,{Zo:()=>o,ah:()=>i});var t=s(67294);const r=t.createContext({});function i(e){const n=t.useContext(r);return t.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const a={};function o({components:e,children:n,disableParentContext:s}){let o;return o=s?"function"==typeof e?e({}):e||a:i(e),t.createElement(r.Provider,{value:o},n)}}}]);