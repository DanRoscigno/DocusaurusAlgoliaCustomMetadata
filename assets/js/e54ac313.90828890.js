"use strict";(self.webpackChunkstarrocks=self.webpackChunkstarrocks||[]).push([[56569],{69654:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var t=s(85893),a=s(11151);const r={},c="CAST",i={id:"sql-reference/sql-functions/cast",title:"CAST",description:"Description",source:"@site/versioned_docs/version-3.1/sql-reference/sql-functions/cast.md",sourceDirName:"sql-reference/sql-functions",slug:"/sql-reference/sql-functions/cast",permalink:"/doc/en/sql-reference/sql-functions/cast",draft:!1,unlisted:!1,editUrl:"https://github.com/StarRocks/starrocks/edit/main/docs/sql-reference/sql-functions/cast.md",tags:[],version:"3.1",frontMatter:{},sidebar:"documentation",previous:{title:"to_bitmap",permalink:"/doc/en/sql-reference/sql-functions/bitmap-functions/to_bitmap"},next:{title:"case",permalink:"/doc/en/sql-reference/sql-functions/condition-functions/case_when"}},o={},l=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function d(n){const e=Object.assign({h1:"h1",h2:"h2",p:"p",code:"code",pre:"pre",blockquote:"blockquote",strong:"strong"},(0,a.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"cast",children:"CAST"}),"\n",(0,t.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(e.p,{children:["Converts an input into the specified type. For example, ",(0,t.jsx)(e.code,{children:"cast (input as BIGINT)"})," converts the input into a BIGINT value."]}),"\n",(0,t.jsx)(e.p,{children:"From v2.4, StarRocks supports conversion to the ARRAY type."}),"\n",(0,t.jsx)(e.h2,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-Haskell",children:"cast (input as type)\n"})}),"\n",(0,t.jsx)(e.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"input"}),": the data you want to convert.\n",(0,t.jsx)(e.code,{children:"type"}),": the destination data type."]}),"\n",(0,t.jsx)(e.h2,{id:"return-value",children:"Return value"}),"\n",(0,t.jsxs)(e.p,{children:["Returns a value whose data type is the same as ",(0,t.jsx)(e.code,{children:"type"}),"."]}),"\n",(0,t.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(e.p,{children:"Example 1: common data conversions"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-Plain",metastring:"Text",children:"    select cast('9.5' as DECIMAL(10,2));\n    +--------------------------------+\n    | CAST('9.5' AS DECIMAL64(10,2)) |\n    +--------------------------------+\n    |                           9.50 |\n    +--------------------------------+\n    \n    select cast(NULL AS INT);\n    +-------------------+\n    | CAST(NULL AS INT) |\n    +-------------------+\n    |              NULL |\n    +-------------------+\n    \n    select cast(true AS BOOLEAN);\n    +-----------------------+\n    | CAST(TRUE AS BOOLEAN) |\n    +-----------------------+\n    |                     1 |\n    +-----------------------+\n    \n    select cast (1 as BIGINT);\n    +-------------------+\n    | CAST(1 AS BIGINT) |\n    +-------------------+\n    |                 1 |\n    +-------------------+\n"})}),"\n",(0,t.jsx)(e.p,{children:"Example 2: Convert the input into ARRAY."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-Plain",metastring:"Text",children:'    -- Convert string to ARRAY<ANY>.\n\n    select cast(\'[1,2,3]\' as array<int>);\n    +-------------------------------+\n    | CAST(\'[1,2,3]\' AS ARRAY<INT>) |\n    +-------------------------------+\n    | [1,2,3]                       |\n    +-------------------------------+\n\n    select cast(\'[1,2,3]\' as array<bigint>);\n    +----------------------------------+\n    | CAST(\'[1,2,3]\' AS ARRAY<BIGINT>) |\n    +----------------------------------+\n    | [1,2,3]                          |\n    +----------------------------------+\n\n    select cast(\'[1,2,3]\' as array<string>);\n    +------------------------------------------+\n    | CAST(\'[1,2,3]\' AS ARRAY<VARCHAR(65533)>) |\n    +------------------------------------------+\n    | ["1","2","3"]                            |\n    +------------------------------------------+\n\n    select cast(\'["a", "b", "c"]\' as array<string>);\n    +--------------------------------------------------+\n    | CAST(\'["a", "b", "c"]\' AS ARRAY<VARCHAR(65533)>) |\n    +--------------------------------------------------+\n    | ["a","b","c"]                                    |\n    +--------------------------------------------------+\n\n    -- Convert JSON array to ARRAY<ANY>.\n\n    select cast(parse_json(\'[{"a":1}, {"a": 2}]\')  as array<json>);\n    +----------------------------------------------------------+\n    | CAST((parse_json(\'[{"a":1}, {"a": 2}]\')) AS ARRAY<JSON>) |\n    +----------------------------------------------------------+\n    | [\'{"a": 1}\',\'{"a": 2}\']                                  |\n    +----------------------------------------------------------+\n    \n    select cast(parse_json(\'[1, 2, 3]\')  as array<int>);\n    +-----------------------------------------------+\n    | CAST((parse_json(\'[1, 2, 3]\')) AS ARRAY<INT>) |\n    +-----------------------------------------------+\n    | [1,2,3]                                       |\n    +-----------------------------------------------+\n    \n    select cast(parse_json(\'["1","2","3"]\') as array<string>);\n    +--------------------------------------------------------------+\n    | CAST((parse_json(\'["1","2","3"]\')) AS ARRAY<VARCHAR(65533)>) |\n    +--------------------------------------------------------------+\n    | ["1","2","3"]                                                |\n    +--------------------------------------------------------------+\n'})}),"\n",(0,t.jsx)(e.p,{children:"Example 3: Convert data during loading."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'    curl --location-trusted -u <username>:<password> -T ~/user_data/bigint \\\n        -H "columns: tmp_k1, k1=cast(tmp_k1 as BIGINT)" \\\n        http://host:port/api/test/bigint/_stream_load\n'})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Note"})}),"\n",(0,t.jsx)(e.p,{children:"If the original value is a floating-point value (such as 12.0), it will be converted to NULL. If you want to forcibly convert this type into BIGINT, see the following example:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'    curl --location-trusted -u <username>:<password> -T ~/user_data/bigint \\\n        -H "columns: tmp_k1, k1=cast(cast(tmp_k1 as DOUBLE) as BIGINT)" \\\n        http://host:port/api/test/bigint/_stream_load\n'})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-plain",metastring:"text",children:"    MySQL > select cast(cast (\"11.2\" as double) as bigint);\n    +----------------------------------------+\n    | CAST(CAST('11.2' AS DOUBLE) AS BIGINT) |\n    +----------------------------------------+\n    |                                     11 |\n    +----------------------------------------+\n"})})]})}const p=function(n={}){const{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}},11151:(n,e,s)=>{s.d(e,{Zo:()=>i,ah:()=>r});var t=s(67294);const a=t.createContext({});function r(n){const e=t.useContext(a);return t.useMemo((()=>"function"==typeof n?n(e):{...e,...n}),[e,n])}const c={};function i({components:n,children:e,disableParentContext:s}){let i;return i=s?"function"==typeof n?n({}):n||c:r(n),t.createElement(a.Provider,{value:i},e)}}}]);