"use strict";(self.webpackChunkstarrocks=self.webpackChunkstarrocks||[]).push([[27708],{21421:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>o});var t=s(85893),a=s(11151);const c={displayed_sidebar:"English"},i="CAST",r={id:"sql-reference/sql-functions/cast",title:"CAST",description:"Description",source:"@site/versioned_docs/version-2.3/sql-reference/sql-functions/cast.md",sourceDirName:"sql-reference/sql-functions",slug:"/sql-reference/sql-functions/cast",permalink:"/docs/2.3/sql-reference/sql-functions/cast",draft:!1,unlisted:!1,editUrl:"https://github.com/StarRocks/starrocks/edit/main/docs/sql-reference/sql-functions/cast.md",tags:[],version:"2.3",frontMatter:{displayed_sidebar:"English"},sidebar:"English",previous:{title:"to_bitmap",permalink:"/docs/2.3/sql-reference/sql-functions/bitmap-functions/to_bitmap"},next:{title:"coalesce",permalink:"/docs/2.3/sql-reference/sql-functions/condition-functions/coalesce"}},l={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:2},{value:"Return value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function d(e){const n=Object.assign({h1:"h1",h2:"h2",p:"p",code:"code",h3:"h3",pre:"pre",blockquote:"blockquote",strong:"strong"},(0,a.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"cast",children:"CAST"}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:["Converts an input into the specified type. For example, ",(0,t.jsx)(n.code,{children:"cast (input as BIGINT)"})," converts the input into a BIGINT value."]}),"\n",(0,t.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Haskell",children:"cast (input as type)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"input"}),": the data you want to convert.\n",(0,t.jsx)(n.code,{children:"type"}),": the destination data type."]}),"\n",(0,t.jsx)(n.h2,{id:"return-value",children:"Return value"}),"\n",(0,t.jsxs)(n.p,{children:["Returns a value whose data type is the same as ",(0,t.jsx)(n.code,{children:"type"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.p,{children:"Example 1: common data conversions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"    select cast('9.5' as DECIMAL(10,2));\n    +--------------------------------+\n    | CAST('9.5' AS DECIMAL64(10,2)) |\n    +--------------------------------+\n    |                           9.50 |\n    +--------------------------------+\n    \n    select cast(NULL AS INT);\n    +-------------------+\n    | CAST(NULL AS INT) |\n    +-------------------+\n    |              NULL |\n    +-------------------+\n    \n    select cast(true AS BOOLEAN);\n    +-----------------------+\n    | CAST(TRUE AS BOOLEAN) |\n    +-----------------------+\n    |                     1 |\n    +-----------------------+\n    \n    select cast (1 as BIGINT);\n    +-------------------+\n    | CAST(1 AS BIGINT) |\n    +-------------------+\n    |                 1 |\n    +-------------------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example 2: Convert data during loading."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'    curl --location-trusted -u <username>:<password> -T ~/user_data/bigint \\\n        -H "columns: tmp_k1, k1=cast(tmp_k1 as BIGINT)" \\\n        http://host:port/api/test/bigint/_stream_load\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Note"})}),"\n",(0,t.jsx)(n.p,{children:"If the original value is a floating-point value (such as 12.0), it will be converted to NULL. If you want to forcibly convert this type into BIGINT, see the following example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'    curl --location-trusted -u <username>:<password> -T ~/user_data/bigint \\\n        -H "columns: tmp_k1, k1=cast(cast(tmp_k1 as DOUBLE) as BIGINT)" \\\n        http://host:port/api/test/bigint/_stream_load\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",metastring:"text",children:"    MySQL > select cast(cast (\"11.2\" as double) as bigint);\n    +----------------------------------------+\n    | CAST(CAST('11.2' AS DOUBLE) AS BIGINT) |\n    +----------------------------------------+\n    |                                     11 |\n    +----------------------------------------+\n"})})]})}const u=function(e={}){const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(d,e)})):d(e)}},11151:(e,n,s)=>{s.d(n,{Zo:()=>r,ah:()=>c});var t=s(67294);const a=t.createContext({});function c(e){const n=t.useContext(a);return t.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const i={};function r({components:e,children:n,disableParentContext:s}){let r;return r=s?"function"==typeof e?e({}):e||i:c(e),t.createElement(a.Provider,{value:r},n)}}}]);