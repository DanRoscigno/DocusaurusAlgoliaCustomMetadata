"use strict";(self.webpackChunkstarrocks=self.webpackChunkstarrocks||[]).push([[93498],{47473:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var t=r(85893),a=r(11151);const s={displayed_sidebar:"documentation"},o="TPC-H Benchmarking",i={id:"benchmarking/TPC-H_Benchmarking",title:"TPC-H Benchmarking",description:"TPC-H is a decision support benchmark developed by the Transaction Processing Performance Council (TPC). It consists of a suite of business oriented ad-hoc queries and concurrent data modifications.",source:"@site/versioned_docs/version-3.0/benchmarking/TPC-H_Benchmarking.md",sourceDirName:"benchmarking",slug:"/benchmarking/TPC-H_Benchmarking",permalink:"/doc/docs/3.0/benchmarking/TPC-H_Benchmarking",draft:!1,unlisted:!1,editUrl:"https://github.com/StarRocks/starrocks/tree/main/versioned_docs/version-3.0/benchmarking/TPC-H_Benchmarking.md",tags:[],version:"3.0",frontMatter:{displayed_sidebar:"documentation"},sidebar:"documentation",previous:{title:"SSB Flat-table Benchmarking",permalink:"/doc/docs/3.0/benchmarking/SSB_Benchmarking"},next:{title:"TPC-DS Benchmarking",permalink:"/doc/docs/3.0/benchmarking/TPC_DS_Benchmark"}},d={},l=[{value:"1. Test Conclusion",id:"1-test-conclusion",level:2},{value:"2. Test Preparation",id:"2-test-preparation",level:2},{value:"2.1 Hardware Environment",id:"21-hardware-environment",level:3},{value:"2.2 Software Environment",id:"22-software-environment",level:3},{value:"3. Test Data and Results",id:"3-test-data-and-results",level:2},{value:"3.1 Test Data",id:"31-test-data",level:3},{value:"3.2 Test SQL",id:"32-test-sql",level:3},{value:"3.3 Test Results",id:"33-test-results",level:3},{value:"4. Test Procedure",id:"4-test-procedure",level:2},{value:"4.1 Query StarRocks Native Table",id:"41-query-starrocks-native-table",level:3},{value:"4.1.1 Generate Data",id:"411-generate-data",level:4},{value:"4.1.2 Create Table Schema",id:"412-create-table-schema",level:4},{value:"4.1.3 Load Data",id:"413-load-data",level:4},{value:"4.1.4 Collect Statistics (Optional)",id:"414-collect-statistics-optional",level:4},{value:"4.1.5 Query Data",id:"415-query-data",level:4},{value:"4.2 Query Hive External Tables",id:"42-query-hive-external-tables",level:3},{value:"4.2.1 Create Table Schema",id:"421-create-table-schema",level:4},{value:"4.2.2 Load Data",id:"422-load-data",level:4},{value:"4.2.3 Query Data",id:"423-query-data",level:4}];function c(e){const n=Object.assign({h1:"h1",p:"p",h2:"h2",img:"img",strong:"strong",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",ul:"ul",li:"li",blockquote:"blockquote",pre:"pre",code:"code",h4:"h4",ol:"ol"},(0,a.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"tpc-h-benchmarking",children:"TPC-H Benchmarking"}),"\n",(0,t.jsx)(n.p,{children:"TPC-H is a decision support benchmark developed by the Transaction Processing Performance Council (TPC). It consists of a suite of business oriented ad-hoc queries and concurrent data modifications.\nTPC-H can be used to build models based on real production environments to simulate the data warehouse of a sales system. This test uses eight tables with a data size ranging from 1 GB to 3 TB. A total of 22 queries are tested and the main performance metrics are the response time of each query, which is the duration between the time a query is submitted to the time the result is returned."}),"\n",(0,t.jsx)(n.h2,{id:"1-test-conclusion",children:"1. Test Conclusion"}),"\n",(0,t.jsxs)(n.p,{children:["We perform a test on 22 queries against a TPC-H 100 GB dataset. The following figure shows the test result.\n",(0,t.jsx)(n.img,{alt:"comparison",src:r(56978).Z+"",width:"2168",height:"934"})]}),"\n",(0,t.jsx)(n.p,{children:"In the test, StarRocks queries data from both its native storage and Hive external tables. StarRocks and Trino query the same copy of data from Hive external tables. Data is ZLIB-compressed and stored in the ORC format."}),"\n",(0,t.jsxs)(n.p,{children:["The latency for StarRocks to query data from its native storage is 21s, that for StarRocks to query Hive external tables is 92s, and that for Trino to query Hive external tables is ",(0,t.jsx)(n.strong,{children:"as long as 307s"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"2-test-preparation",children:"2. Test Preparation"}),"\n",(0,t.jsx)(n.h3,{id:"21-hardware-environment",children:"2.1 Hardware Environment"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Machine"}),(0,t.jsx)(n.th,{children:"3 cloud hosts"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"CPU"}),(0,t.jsx)(n.td,{children:"16-core"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Memory"}),(0,t.jsx)(n.td,{children:"64 GB"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Network bandwidth"}),(0,t.jsx)(n.td,{children:"5 Gbit/s"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Disk"}),(0,t.jsx)(n.td,{children:"System disk: ESSD 40 GB Data disk: ESSD 100 GB"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"22-software-environment",children:"2.2 Software Environment"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Kernel version: Linux 3.10.0-1127.13.1.el7.x86_64"}),"\n",(0,t.jsx)(n.li,{children:"OS version: CentOS Linux released 7.8.2003"}),"\n",(0,t.jsx)(n.li,{children:"Software version: StarRocks 2.1, Trino-357, Hive-3.1.2"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"StarRocks FE can be separately deployed or hybrid deployed with BEs, which does not affect the test results."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"3-test-data-and-results",children:"3. Test Data and Results"}),"\n",(0,t.jsx)(n.h3,{id:"31-test-data",children:"3.1 Test Data"}),"\n",(0,t.jsx)(n.p,{children:"The test uses a TPC-H 100 GB dataset."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Table"}),(0,t.jsx)(n.th,{children:"Records"}),(0,t.jsx)(n.th,{children:"Data size after compression on StarRocks"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"customer"}),(0,t.jsx)(n.td,{children:"15 million"}),(0,t.jsx)(n.td,{children:"2.4 GB"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"lineitem"}),(0,t.jsx)(n.td,{children:"600 million"}),(0,t.jsx)(n.td,{children:"75 GB"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"nation"}),(0,t.jsx)(n.td,{children:"25"}),(0,t.jsx)(n.td,{children:"2.2 KB"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"orders"}),(0,t.jsx)(n.td,{children:"150 million"}),(0,t.jsx)(n.td,{children:"16 GB"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"part"}),(0,t.jsx)(n.td,{children:"200 million"}),(0,t.jsx)(n.td,{children:"2.4 GB"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"partsupp"}),(0,t.jsx)(n.td,{children:"800 million"}),(0,t.jsx)(n.td,{children:"11.6 GB"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"region"}),(0,t.jsx)(n.td,{children:"5"}),(0,t.jsx)(n.td,{children:"389 B"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"supplier"}),(0,t.jsx)(n.td,{children:"1 million"}),(0,t.jsx)(n.td,{children:"0.14 GB"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"32-test-sql",children:"3.2 Test SQL"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-SQL",children:"--Q1\nselect\n  l_returnflag,\n  l_linestatus,\n  sum(l_quantity) as sum_qty,\n  sum(l_extendedprice) as sum_base_price,\n  sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,\n  sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,\n  avg(l_quantity) as avg_qty,\n  avg(l_extendedprice) as avg_price,\n  avg(l_discount) as avg_disc,\n  count(*) as count_order\nfrom lineitem\nwhere  l_shipdate <= date '1998-12-01'\ngroup by  l_returnflag,  l_linestatus\norder by  l_returnflag,  l_linestatus;\n\n--Q2\nselect count(*) from (\nselect  s_acctbal, s_name,  n_name,  p_partkey,  p_mfgr,  s_address,  s_phone,  s_comment\nfrom  part,  partsupp,  supplier,  nation,  region\nwhere\n  p_partkey = ps_partkey\n  and s_suppkey = ps_suppkey\n  and p_size = 15\n  and p_type like '%BRASS'\n  and s_nationkey = n_nationkey\n  and n_regionkey = r_regionkey\n  and r_name = 'EUROPE'\n  and ps_supplycost = (\n    select  min(ps_supplycost)\n    from  partsupp,  supplier,  nation,  region\n    where\n      p_partkey = ps_partkey\n      and s_suppkey = ps_suppkey\n      and s_nationkey = n_nationkey\n      and n_regionkey = r_regionkey\n      and r_name = 'EUROPE'\n  )\norder by  s_acctbal desc, n_name,  s_name,  p_partkey\n) as t1;\n\n--Q3\nselect count(*) from (\n    select\n      l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority\n    from\n      customer, orders, lineitem\n    where\n      c_mktsegment = 'BUILDING'\n      and c_custkey = o_custkey\n      and l_orderkey = o_orderkey\n      and o_orderdate < date '1995-03-15'\n      and l_shipdate > date '1995-03-15'\n    group by l_orderkey, o_orderdate, o_shippriority\n    order by revenue desc, o_orderdate\n    ) as t1;\n\n--Q4\nselect  o_orderpriority,  count(*) as order_count\nfrom  orders\nwhere\n  o_orderdate >= date '1993-07-01'\n  and o_orderdate < date '1993-07-01' + interval '3' month\n  and exists (\n    select  * from  lineitem\n    where  l_orderkey = o_orderkey and l_commitdate < l_receiptdate\n  )\ngroup by o_orderpriority\norder by o_orderpriority;\n\n--Q5\nselect n_name, sum(l_extendedprice * (1 - l_discount)) as revenue\nfrom customer, orders, lineitem, supplier, nation, region\nwhere\n  c_custkey = o_custkey\n  and l_orderkey = o_orderkey\n  and l_suppkey = s_suppkey\n  and c_nationkey = s_nationkey\n  and s_nationkey = n_nationkey\n  and n_regionkey = r_regionkey\n  and r_name = 'ASIA'\n  and o_orderdate >= date '1994-01-01'\n  and o_orderdate < date '1994-01-01' + interval '1' year\ngroup by n_name\norder by revenue desc;\n\n--Q6\nselect\n  sum(l_extendedprice * l_discount) as revenue\nfrom\n  lineitem\nwhere\n  l_shipdate >= date '1994-01-01'\n  and l_shipdate < date '1994-01-01' + interval '1' year\n  and l_discount between .06 - 0.01 and .06 + 0.01\n  and l_quantity < 24;\n\n--Q7\nselect supp_nation, cust_nation, l_year, sum(volume) as revenue\nfrom (\n    select\n      n1.n_name as supp_nation,\n      n2.n_name as cust_nation,\n      extract(year from l_shipdate) as l_year,\n      l_extendedprice * (1 - l_discount) as volume\n    from supplier, lineitem, orders, customer, nation n1, nation n2\n    where\n      s_suppkey = l_suppkey\n      and o_orderkey = l_orderkey\n      and c_custkey = o_custkey\n      and s_nationkey = n1.n_nationkey\n      and c_nationkey = n2.n_nationkey\n      and (\n        (n1.n_name = 'FRANCE' and n2.n_name = 'GERMANY')\n        or (n1.n_name = 'GERMANY' and n2.n_name = 'FRANCE')\n      )\n      and l_shipdate between date '1995-01-01' and date '1996-12-31'\n  ) as shipping\ngroup by supp_nation, cust_nation, l_year\norder by supp_nation, cust_nation, l_year;\n\n--Q8\nselect\n  o_year, sum(case when nation = 'BRAZIL' then volume else 0 end) / sum(volume) as mkt_share\nfrom\n  (\n    select\n      extract(year from o_orderdate) as o_year,\n      l_extendedprice * (1 - l_discount) as volume,\n      n2.n_name as nation\n    from part, supplier, lineitem, orders, customer, nation n1, nation n2, region\n    where\n      p_partkey = l_partkey\n      and s_suppkey = l_suppkey\n      and l_orderkey = o_orderkey\n      and o_custkey = c_custkey\n      and c_nationkey = n1.n_nationkey\n      and n1.n_regionkey = r_regionkey\n      and r_name = 'AMERICA'\n      and s_nationkey = n2.n_nationkey\n      and o_orderdate between date '1995-01-01' and date '1996-12-31'\n      and p_type = 'ECONOMY ANODIZED STEEL'\n  ) as all_nations\ngroup by o_year\norder by o_year;\n\n--Q9\nselect count(*) from (\nselect nation, o_year, sum(amount) as sum_profit\nfrom\n  (\n    select\n      n_name as nation,\n      extract(year from o_orderdate) as o_year,\n      l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount\n    from part, supplier, lineitem, partsupp, orders, nation\n    where\n      s_suppkey = l_suppkey\n      and ps_suppkey = l_suppkey\n      and ps_partkey = l_partkey\n      and p_partkey = l_partkey\n      and o_orderkey = l_orderkey\n      and s_nationkey = n_nationkey\n      and p_name like '%green%'\n  ) as profit\ngroup by nation, o_year\norder by nation, o_year desc\n) as t1;\n\n--Q10\nselect count(*) from (\nselect c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment\n    from customer, orders, lineitem, nation\n    where\n      c_custkey = o_custkey\n      and l_orderkey = o_orderkey\n      and o_orderdate >= date '1993-10-01'\n      and o_orderdate < date '1993-12-01'\n      and l_returnflag = 'R'\n      and c_nationkey = n_nationkey\n    group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment\n    order by revenue desc\n) as t1;\n\n--Q11\nselect count(*) from (\nselect ps_partkey, sum(ps_supplycost * ps_availqty) as value\nfrom partsupp, supplier, nation\nwhere\n  ps_suppkey = s_suppkey\n  and s_nationkey = n_nationkey\n  and n_name = 'GERMANY'\ngroup by ps_partkey having\n    sum(ps_supplycost * ps_availqty) > (\n      select sum(ps_supplycost * ps_availqty) * 0.0001000000\n      from partsupp, supplier, nation\n      where\n        ps_suppkey = s_suppkey\n        and s_nationkey = n_nationkey\n        and n_name = 'GERMANY'\n    )\norder by value desc\n) as t1;\n\n--Q12\nselect\n  l_shipmode,\n  sum(case when o_orderpriority = '1-URGENT' or o_orderpriority = '2-HIGH' then 1 else 0 end) as high_line_count,\n  sum(case when o_orderpriority <> '1-URGENT' and o_orderpriority <> '2-HIGH' then 1 else 0 end) as low_line_count\nfrom orders, lineitem\nwhere\n  o_orderkey = l_orderkey\n  and l_shipmode in ('MAIL', 'SHIP')\n  and l_commitdate < l_receiptdate\n  and l_shipdate < l_commitdate\n  and l_receiptdate >= date '1994-01-01'\n  and l_receiptdate < date '1994-01-01' + interval '1' year\ngroup by l_shipmode\norder by l_shipmode;\n\n--Q13\nselect  c_count,  count(*) as custdist\nfrom (select c_custkey,count(o_orderkey) as c_count\n    from customer left outer join orders on c_custkey = o_custkey and o_comment not like '%special%requests%'\n    group by  c_custkey\n) as c_orders\ngroup by  c_count\norder by custdist desc, c_count desc;\n\n--Q14\nselect\n  100.00 * sum(case when p_type like 'PROMO%' then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue\nfrom lineitem, part\nwhere\n  l_partkey = p_partkey\n  and l_shipdate >= date '1995-09-01'\n  and l_shipdate < date '1995-09-01' + interval '1' month;\n\n--Q15\nselect s_suppkey, s_name, s_address, s_phone, total_revenue\nfrom supplier, revenue0\nwhere\n  s_suppkey = supplier_no\n  and total_revenue = (\n    select max(total_revenue) from revenue0\n  )\norder by s_suppkey;\n\n--Q16\nselect count(*) from (\nselect p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt\nfrom partsupp, part\nwhere\n  p_partkey = ps_partkey\n  and p_brand <> 'Brand#45'\n  and p_type not like 'MEDIUM POLISHED%'\n  and p_size in (49, 14, 23, 45, 19, 3, 36, 9)\n  and ps_suppkey not in (\n    select s_suppkey from supplier where s_comment like '%Customer%Complaints%'\n  )\ngroup by p_brand, p_type, p_size\norder by supplier_cnt desc, p_brand, p_type, p_size\n) as t1;\n\n--Q17\nselect sum(l_extendedprice) / 7.0 as avg_yearly\nfrom lineitem, part\nwhere\n  p_partkey = l_partkey\n  and p_brand = 'Brand#23'\n  and p_container = 'MED BOX'\n  and l_quantity < (\n    select 0.2 * avg(l_quantity) from lineitem where l_partkey = p_partkey\n  );\n\n--Q18\nselect count(*) from (\nselect c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity)\nfrom customer, orders, lineitem\nwhere\n  o_orderkey in (\n    select l_orderkey from lineitem\n    group by l_orderkey having\n        sum(l_quantity) > 300\n  )\n  and c_custkey = o_custkey\n  and o_orderkey = l_orderkey\ngroup by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice\norder by o_totalprice desc, o_orderdate\n) as t1;\n\n--Q19\nselect sum(l_extendedprice* (1 - l_discount)) as revenue\nfrom lineitem, part\nwhere\n  (\n    p_partkey = l_partkey\n    and p_brand = 'Brand#12'\n    and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')\n    and l_quantity >= 1 and l_quantity <= 1 + 10\n    and p_size between 1 and 5\n    and l_shipmode in ('AIR', 'AIR REG')\n    and l_shipinstruct = 'DELIVER IN PERSON'\n  )\n  or\n  (\n    p_partkey = l_partkey\n    and p_brand = 'Brand#23'\n    and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')\n    and l_quantity >= 10 and l_quantity <= 10 + 10\n    and p_size between 1 and 10\n    and l_shipmode in ('AIR', 'AIR REG')\n    and l_shipinstruct = 'DELIVER IN PERSON'\n  )\n  or\n  (\n    p_partkey = l_partkey\n    and p_brand = 'Brand#34'\n    and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')\n    and l_quantity >= 20 and l_quantity <= 20 + 10\n    and p_size between 1 and 15\n    and l_shipmode in ('AIR', 'AIR REG')\n    and l_shipinstruct = 'DELIVER IN PERSON'\n  );\n\n--Q20\nselect s_name, s_address\nfrom supplier, nation\nwhere\n  s_suppkey in (\n    select ps_suppkey\n    from partsupp\n    where\n      ps_partkey in (\n        select p_partkey from part\n        where p_name like 'forest%'\n      )\n      and ps_availqty > (\n        select 0.5 * sum(l_quantity)\n        from lineitem\n        where\n          l_partkey = ps_partkey\n          and l_suppkey = ps_suppkey\n          and l_shipdate >= date '1994-01-01'\n          and l_shipdate < date '1994-01-01' + interval '1' year\n      )\n  )\n  and s_nationkey = n_nationkey\n  and n_name = 'CANADA'\norder by s_name;\n\n--Q21\nselect count(*) from (\nselect s_name, count(*) as numwait\nfrom  supplier,  lineitem l1,  orders,  nation\nwhere\n  s_suppkey = l1.l_suppkey\n  and o_orderkey = l1.l_orderkey\n  and o_orderstatus = 'F'\n  and l1.l_receiptdate > l1.l_commitdate\n  and exists (\n    select * from  lineitem l2\n    where\n      l2.l_orderkey = l1.l_orderkey\n      and l2.l_suppkey <> l1.l_suppkey\n  )\n  and not exists (\n    select * from  lineitem l3\n    where\n      l3.l_orderkey = l1.l_orderkey\n      and l3.l_suppkey <> l1.l_suppkey\n      and l3.l_receiptdate > l3.l_commitdate\n  )\n  and s_nationkey = n_nationkey\n  and n_name = 'SAUDI ARABIA'\ngroup by s_name\norder by  numwait desc, s_name\n) as t1;\n\n\n--Q22\nselect\n  cntrycode,\n  count(*) as numcust,\n  sum(c_acctbal) as totacctbal\nfrom\n  (\n    select\n      substr(c_phone, 1, 2) as cntrycode,\n      c_acctbal\n    from\n      customer\n    where\n      substr(c_phone, 1, 2) in\n        ('13', '31', '23', '29', '30', '18', '17')\n      and c_acctbal > (\n        select\n          avg(c_acctbal)\n        from\n          customer\n        where\n          c_acctbal > 0.00\n          and substr(c_phone, 1, 2) in\n            ('13', '31', '23', '29', '30', '18', '17')\n      )\n      and not exists (\n        select\n          *\n        from\n          orders\n        where\n          o_custkey = c_custkey\n      )\n  ) as custsale\ngroup by\n  cntrycode\norder by\n  cntrycode;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"33-test-results",children:"3.3 Test Results"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Query"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"StarRocks-native (ms)"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"StarRocks-Hive external (ms)"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Trino (ms)"})})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q1"}),(0,t.jsx)(n.td,{children:"1291"}),(0,t.jsx)(n.td,{children:"5349"}),(0,t.jsx)(n.td,{children:"14350"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q2"}),(0,t.jsx)(n.td,{children:"257"}),(0,t.jsx)(n.td,{children:"940"}),(0,t.jsx)(n.td,{children:"4075"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q3"}),(0,t.jsx)(n.td,{children:"690"}),(0,t.jsx)(n.td,{children:"2585"}),(0,t.jsx)(n.td,{children:"7615"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q4"}),(0,t.jsx)(n.td,{children:"529"}),(0,t.jsx)(n.td,{children:"2514"}),(0,t.jsx)(n.td,{children:"9385"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q5"}),(0,t.jsx)(n.td,{children:"1142"}),(0,t.jsx)(n.td,{children:"5844"}),(0,t.jsx)(n.td,{children:"15350"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q6"}),(0,t.jsx)(n.td,{children:"115"}),(0,t.jsx)(n.td,{children:"2936"}),(0,t.jsx)(n.td,{children:"4045"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q7"}),(0,t.jsx)(n.td,{children:"1435"}),(0,t.jsx)(n.td,{children:"5128"}),(0,t.jsx)(n.td,{children:"8760"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q8"}),(0,t.jsx)(n.td,{children:"855"}),(0,t.jsx)(n.td,{children:"5989"}),(0,t.jsx)(n.td,{children:"9535"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q9"}),(0,t.jsx)(n.td,{children:"3028"}),(0,t.jsx)(n.td,{children:"5507"}),(0,t.jsx)(n.td,{children:"27310"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q10"}),(0,t.jsx)(n.td,{children:"1381"}),(0,t.jsx)(n.td,{children:"3654"}),(0,t.jsx)(n.td,{children:"6560"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q11"}),(0,t.jsx)(n.td,{children:"265"}),(0,t.jsx)(n.td,{children:"691"}),(0,t.jsx)(n.td,{children:"2090"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q12"}),(0,t.jsx)(n.td,{children:"387"}),(0,t.jsx)(n.td,{children:"3827"}),(0,t.jsx)(n.td,{children:"7635"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q13"}),(0,t.jsx)(n.td,{children:"2165"}),(0,t.jsx)(n.td,{children:"3733"}),(0,t.jsx)(n.td,{children:"14530"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q14"}),(0,t.jsx)(n.td,{children:"184"}),(0,t.jsx)(n.td,{children:"3824"}),(0,t.jsx)(n.td,{children:"4355"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q15"}),(0,t.jsx)(n.td,{children:"354"}),(0,t.jsx)(n.td,{children:"7321"}),(0,t.jsx)(n.td,{children:"8975"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q16"}),(0,t.jsx)(n.td,{children:"240"}),(0,t.jsx)(n.td,{children:"1029"}),(0,t.jsx)(n.td,{children:"2265"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q17"}),(0,t.jsx)(n.td,{children:"753"}),(0,t.jsx)(n.td,{children:"5011"}),(0,t.jsx)(n.td,{children:"46405"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q18"}),(0,t.jsx)(n.td,{children:"2909"}),(0,t.jsx)(n.td,{children:"7032"}),(0,t.jsx)(n.td,{children:"30975"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q19"}),(0,t.jsx)(n.td,{children:"702"}),(0,t.jsx)(n.td,{children:"3905"}),(0,t.jsx)(n.td,{children:"7315"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q20"}),(0,t.jsx)(n.td,{children:"963"}),(0,t.jsx)(n.td,{children:"4623"}),(0,t.jsx)(n.td,{children:"12500"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q21"}),(0,t.jsx)(n.td,{children:"870"}),(0,t.jsx)(n.td,{children:"10016"}),(0,t.jsx)(n.td,{children:"58340"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"q22"}),(0,t.jsx)(n.td,{children:"545"}),(0,t.jsx)(n.td,{children:"991"}),(0,t.jsx)(n.td,{children:"5605"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"sum"}),(0,t.jsx)(n.td,{children:"21060"}),(0,t.jsx)(n.td,{children:"92449"}),(0,t.jsx)(n.td,{children:"307975"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"4-test-procedure",children:"4. Test Procedure"}),"\n",(0,t.jsx)(n.h3,{id:"41-query-starrocks-native-table",children:"4.1 Query StarRocks Native Table"}),"\n",(0,t.jsx)(n.h4,{id:"411-generate-data",children:"4.1.1 Generate Data"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Download the tpch-poc toolkit and compile it."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Bash",children:"wget https://starrocks-public.oss-cn-zhangjiakou.aliyuncs.com/tpch-poc-0.1.2.zip\nunzip tpch-poc-0.1.2.zip\ncd tpch-poc-0.1.2\ncd benchmark \n"})}),"\n",(0,t.jsxs)(n.p,{children:["The related tools are stored in the ",(0,t.jsx)(n.code,{children:"bin"})," directory and you can initiate operations in the home directory."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Generate data."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Bash",children:"# Generate 100 GB data in the `data_100` directory.\n./bin/gen_data/gen-tpch.sh 100 data_100\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"412-create-table-schema",children:"4.1.2 Create Table Schema"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Modify the configuration file ",(0,t.jsx)(n.code,{children:"conf/starrocks.conf"})," and specify the cluster address."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-SQL",children:"# StarRocks configuration\nmysql_host: 192.168.1.1\nmysql_port: 9030\nmysql_user: root\nmysql_password:\ndatabase: tpch\n\n# Cluster ports\nhttp_port: 8030\nbe_heartbeat_port: 9050\nbroker_port: 8000\n\n# parallel_fragment_exec_instance_num specifies the parallelism.\n# The recommended parallelism is half the CPU cores of a cluster. The following example uses 8.\nparallel_num: 8\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Run the following script to create a table:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-SQL",children:"# create tables for 100GB data\n./bin/create_db_table.sh ddl_100\n"})}),"\n",(0,t.jsx)(n.p,{children:"The table has been created and the default bucket number has been specified. You can delete the previous table and re-plan the bucket number based on your cluster size and node configuration, which helps achieve better test results."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-SQL",children:'#Create a table named customer.\ndrop table if exists customer;\nCREATE TABLE customer (\n    c_custkey     int NOT NULL,\n    c_name        VARCHAR(25) NOT NULL,\n    c_address     VARCHAR(40) NOT NULL,\n    c_nationkey   int NOT NULL,\n    c_phone       VARCHAR(15) NOT NULL,\n    c_acctbal     decimal(15, 2)   NOT NULL,\n    c_mktsegment  VARCHAR(10) NOT NULL,\n    c_comment     VARCHAR(117) NOT NULL\n)ENGINE=OLAP\nDUPLICATE KEY(`c_custkey`)\nCOMMENT "OLAP"\nDISTRIBUTED BY HASH(`c_custkey`) BUCKETS 24\nPROPERTIES (\n    "replication_num" = "1",\n    "storage_format" = "DEFAULT"\n);\n#Create a table named lineitem.\ndrop table if exists lineitem;\nCREATE TABLE lineitem ( \n    l_shipdate    DATE NOT NULL,\n    l_orderkey    int NOT NULL,\n    l_linenumber  int not null,\n    l_partkey     int NOT NULL,\n    l_suppkey     int not null,\n    l_quantity    decimal(15, 2) NOT NULL,\n    l_extendedprice  decimal(15, 2) NOT NULL,\n    l_discount    decimal(15, 2) NOT NULL,\n    l_tax         decimal(15, 2) NOT NULL,\n    l_returnflag  VARCHAR(1) NOT NULL,\n    l_linestatus  VARCHAR(1) NOT NULL,\n    l_commitdate  DATE NOT NULL,\n    l_receiptdate DATE NOT NULL,\n    l_shipinstruct VARCHAR(25) NOT NULL,\n    l_shipmode     VARCHAR(10) NOT NULL,\n    l_comment      VARCHAR(44) NOT NULL\n)ENGINE=OLAP\nDUPLICATE KEY(`l_shipdate`, `l_orderkey`)\nCOMMENT "OLAP"\nDISTRIBUTED BY HASH(`l_orderkey`) BUCKETS 96\nPROPERTIES (\n    "replication_num" = "1",\n    "storage_format" = "DEFAULT",\n    "colocate_with" = "tpch2"\n);\n#Create a table named nation.\ndrop table if exists nation;\nCREATE TABLE `nation` (\n`n_nationkey` int(11) NOT NULL,\n`n_name`      varchar(25) NOT NULL,\n`n_regionkey` int(11) NOT NULL,\n`n_comment`   varchar(152) NULL\n) ENGINE=OLAP\nDUPLICATE KEY(`N_NATIONKEY`)\nCOMMENT "OLAP"\nDISTRIBUTED BY HASH(`N_NATIONKEY`) BUCKETS 1\nPROPERTIES (\n    "replication_num" = "3",\n    "storage_format" = "DEFAULT"\n);\n#Create a talbe named orders.\ndrop table if exists orders;\nCREATE TABLE orders  (\n    o_orderkey       int NOT NULL,\n    o_orderdate      DATE NOT NULL,\n    o_custkey        int NOT NULL,\n    o_orderstatus    VARCHAR(1) NOT NULL,\n    o_totalprice     decimal(15, 2) NOT NULL,\n    o_orderpriority  VARCHAR(15) NOT NULL,\n    o_clerk          VARCHAR(15) NOT NULL,\n    o_shippriority   int NOT NULL,\n    o_comment        VARCHAR(79) NOT NULL\n)ENGINE=OLAP\nDUPLICATE KEY(`o_orderkey`, `o_orderdate`)\nCOMMENT "OLAP"\nDISTRIBUTED BY HASH(`o_orderkey`) BUCKETS 96\nPROPERTIES (\n    "replication_num" = "1",\n    "storage_format" = "DEFAULT",\n    "colocate_with" = "tpch2"\n);\n#Create a table named part.\ndrop table if exists part;\nCREATE TABLE part (\n    p_partkey          int NOT NULL,\n    p_name        VARCHAR(55) NOT NULL,\n    p_mfgr        VARCHAR(25) NOT NULL,\n    p_brand       VARCHAR(10) NOT NULL,\n    p_type        VARCHAR(25) NOT NULL,\n    p_size        int NOT NULL,\n    p_container   VARCHAR(10) NOT NULL,\n    p_retailprice decimal(15, 2) NOT NULL,\n    p_comment     VARCHAR(23) NOT NULL\n)ENGINE=OLAP\nDUPLICATE KEY(`p_partkey`)\nCOMMENT "OLAP"\nDISTRIBUTED BY HASH(`p_partkey`) BUCKETS 24\nPROPERTIES (\n    "replication_num" = "1",\n    "storage_format" = "DEFAULT",\n    "colocate_with" = "tpch2p"\n);\n#Create a table named partsupp.\ndrop table if exists partsupp;\nCREATE TABLE partsupp ( \n    ps_partkey          int NOT NULL,\n    ps_suppkey     int NOT NULL,\n    ps_availqty    int NOT NULL,\n    ps_supplycost  decimal(15, 2)  NOT NULL,\n    ps_comment     VARCHAR(199) NOT NULL\n)ENGINE=OLAP\nDUPLICATE KEY(`ps_partkey`)\nCOMMENT "OLAP"\nDISTRIBUTED BY HASH(`ps_partkey`) BUCKETS 24\nPROPERTIES (\n    "replication_num" = "1",\n    "storage_format" = "DEFAULT",\n    "colocate_with" = "tpch2p"\n);\n#Create a table named region.\ndrop table if exists region;\nCREATE TABLE region  ( \n    r_regionkey      int NOT NULL,\n    r_name       VARCHAR(25) NOT NULL,\n    r_comment    VARCHAR(152)\n)ENGINE=OLAP\nDUPLICATE KEY(`r_regionkey`)\nCOMMENT "OLAP"\nDISTRIBUTED BY HASH(`r_regionkey`) BUCKETS 1\nPROPERTIES (\n    "replication_num" = "3",\n    "storage_format" = "DEFAULT"\n);\n#Create a table named supplier.\ndrop table if exists supplier;\nCREATE TABLE supplier (  \n    s_suppkey       int NOT NULL,\n    s_name        VARCHAR(25) NOT NULL,\n    s_address     VARCHAR(40) NOT NULL,\n    s_nationkey   int NOT NULL,\n    s_phone       VARCHAR(15) NOT NULL,\n    s_acctbal     decimal(15, 2) NOT NULL,\n    s_comment     VARCHAR(101) NOT NULL\n)ENGINE=OLAP\nDUPLICATE KEY(`s_suppkey`)\nCOMMENT "OLAP"\nDISTRIBUTED BY HASH(`s_suppkey`) BUCKETS 12\nPROPERTIES (\n    "replication_num" = "1",\n    "storage_format" = "DEFAULT"\n);\ndrop view if exists revenue0;\ncreate view revenue0 (supplier_no, total_revenue) as\nselect\n    l_suppkey,\n    sum(l_extendedprice * (1 - l_discount))\nfrom\n    lineitem\nwhere\n    l_shipdate >= date \'1996-01-01\'\n    and l_shipdate < date \'1996-01-01\' + interval \'3\' month\ngroup by\n    l_suppkey;\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"413-load-data",children:"4.1.3 Load Data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Python",children:"./bin/stream_load.sh data_100\n"})}),"\n",(0,t.jsx)(n.h4,{id:"414-collect-statistics-optional",children:"4.1.4 Collect Statistics (Optional)"}),"\n",(0,t.jsx)(n.p,{children:"This step is optional. We recommend that full statistical information be collected to generate better test results. Run the following commands after you connect to the StarRocks cluster:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-SQL",children:"ANALYZE FULL TABLE customer;\nANALYZE FULL TABLE lineitem;\nANALYZE FULL TABLE nation;\nANALYZE FULL TABLE orders;\nANALYZE FULL TABLE part;\nANALYZE FULL TABLE partsupp;\nANALYZE FULL TABLE region;\nANALYZE FULL TABLE supplier;\n"})}),"\n",(0,t.jsx)(n.h4,{id:"415-query-data",children:"4.1.5 Query Data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Python",children:"./bin/benchmark.sh -p -d tpch\n"})}),"\n",(0,t.jsx)(n.h3,{id:"42-query-hive-external-tables",children:"4.2 Query Hive External Tables"}),"\n",(0,t.jsx)(n.h4,{id:"421-create-table-schema",children:"4.2.1 Create Table Schema"}),"\n",(0,t.jsx)(n.p,{children:"Create table schema in Hive. The storage format is ORC."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-SQL",children:"create database tpch_hive_orc;\nuse tpch_hive_orc;\n--Create a table named customer.\nCREATE TABLE `customer`(\n  `c_custkey` int, \n  `c_name` varchar(25), \n  `c_address` varchar(40), \n  `c_nationkey` int, \n  `c_phone` varchar(15), \n  `c_acctbal` decimal(15,2), \n  `c_mktsegment` varchar(10), \n  `c_comment` varchar(117))\nROW FORMAT SERDE \n  'org.apache.hadoop.hive.ql.io.orc.OrcSerde' \nWITH SERDEPROPERTIES ( \n  'field.delim'='|', \n  'serialization.format'='|') \nSTORED AS INPUTFORMAT \n  'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat' \nOUTPUTFORMAT \n  'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat'\nLOCATION\n  'hdfs://emr-header-1.cluster-49146:9000/user/hive/warehouse/tpch_hive_orc.db/customer';\n--Create a table named lineitem.\n  CREATE TABLE `lineitem`(\n  `l_orderkey` bigint, \n  `l_partkey` int, \n  `l_suppkey` int, \n  `l_linenumber` int, \n  `l_quantity` decimal(15,2), \n  `l_extendedprice` decimal(15,2), \n  `l_discount` decimal(15,2), \n  `l_tax` decimal(15,2), \n  `l_returnflag` varchar(1), \n  `l_linestatus` varchar(1), \n  `l_shipdate` date, \n  `l_commitdate` date, \n  `l_receiptdate` date, \n  `l_shipinstruct` varchar(25), \n  `l_shipmode` varchar(10), \n  `l_comment` varchar(44))\nROW FORMAT SERDE \n  'org.apache.hadoop.hive.ql.io.orc.OrcSerde' \nWITH SERDEPROPERTIES ( \n  'field.delim'='|', \n  'serialization.format'='|') \nSTORED AS INPUTFORMAT \n  'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat' \nOUTPUTFORMAT \n  'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat'\nLOCATION\n  'hdfs://emr-header-1.cluster-49146:9000/user/hive/warehouse/tpch_hive_orc.db/lineitem';\n--Create a table named nation.\nCREATE TABLE `nation`(\n  `n_nationkey` int, \n  `n_name` varchar(25), \n  `n_regionkey` int, \n  `n_comment` varchar(152))\nROW FORMAT SERDE \n  'org.apache.hadoop.hive.ql.io.orc.OrcSerde' \nWITH SERDEPROPERTIES ( \n  'field.delim'='|', \n  'serialization.format'='|') \nSTORED AS INPUTFORMAT \n  'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat' \nOUTPUTFORMAT \n  'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat'\nLOCATION\n  'hdfs://emr-header-1.cluster-49146:9000/user/hive/warehouse/tpch_hive_orc.db/nation';\n--Create a table named orders.\nCREATE TABLE `orders`(\n  `o_orderkey` bigint, \n  `o_custkey` int, \n  `o_orderstatus` varchar(1), \n  `o_totalprice` decimal(15,2), \n  `o_orderdate` date, \n  `o_orderpriority` varchar(15), \n  `o_clerk` varchar(15), \n  `o_shippriority` int, \n  `o_comment` varchar(79))\nROW FORMAT SERDE \n  'org.apache.hadoop.hive.ql.io.orc.OrcSerde' \nWITH SERDEPROPERTIES ( \n  'field.delim'='|', \n  'serialization.format'='|') \nSTORED AS INPUTFORMAT \n  'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat' \nOUTPUTFORMAT \n  'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat'\nLOCATION\n  'hdfs://emr-header-1.cluster-49146:9000/user/hive/warehouse/tpch_hive_orc.db/orders';\n--Create a table named part.\nCREATE TABLE `part`(\n  `p_partkey` int, \n  `p_name` varchar(55), \n  `p_mfgr` varchar(25), \n  `p_brand` varchar(10), \n  `p_type` varchar(25), \n  `p_size` int, \n  `p_container` varchar(10), \n  `p_retailprice` decimal(15,2), \n  `p_comment` varchar(23))\nROW FORMAT SERDE \n  'org.apache.hadoop.hive.ql.io.orc.OrcSerde' \nWITH SERDEPROPERTIES ( \n  'field.delim'='|', \n  'serialization.format'='|') \nSTORED AS INPUTFORMAT \n  'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat' \nOUTPUTFORMAT \n  'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat'\nLOCATION\n  'hdfs://emr-header-1.cluster-49146:9000/user/hive/warehouse/tpch_hive_orc.db/part';\n--Create a table named partsupp.\nCREATE TABLE `partsupp`(\n  `ps_partkey` int, \n  `ps_suppkey` int, \n  `ps_availqty` int, \n  `ps_supplycost` decimal(15,2), \n  `ps_comment` varchar(199))\nROW FORMAT SERDE \n  'org.apache.hadoop.hive.ql.io.orc.OrcSerde' \nWITH SERDEPROPERTIES ( \n  'field.delim'='|', \n  'serialization.format'='|') \nSTORED AS INPUTFORMAT \n  'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat' \nOUTPUTFORMAT \n  'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat'\nLOCATION\n  'hdfs://emr-header-1.cluster-49146:9000/user/hive/warehouse/tpch_hive_orc.db/partsupp';\n--Create a table named region.\nCREATE TABLE `region`(\n  `r_regionkey` int, \n  `r_name` varchar(25), \n  `r_comment` varchar(152))\nROW FORMAT SERDE \n  'org.apache.hadoop.hive.ql.io.orc.OrcSerde' \nWITH SERDEPROPERTIES ( \n  'field.delim'='|', \n  'serialization.format'='|') \nSTORED AS INPUTFORMAT \n  'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat' \nOUTPUTFORMAT \n  'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat'\nLOCATION\n  'hdfs://emr-header-1.cluster-49146:9000/user/hive/warehouse/tpch_hive_orc.db/region';\n--Create a table named supplier.\nCREATE TABLE `supplier`(\n  `s_suppkey` int, \n  `s_name` varchar(25), \n  `s_address` varchar(40), \n  `s_nationkey` int, \n  `s_phone` varchar(15), \n  `s_acctbal` decimal(15,2), \n  `s_comment` varchar(101))\nROW FORMAT SERDE \n  'org.apache.hadoop.hive.ql.io.orc.OrcSerde' \nWITH SERDEPROPERTIES ( \n  'field.delim'='|', \n  'serialization.format'='|') \nSTORED AS INPUTFORMAT \n  'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat' \nOUTPUTFORMAT \n  'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat'\nLOCATION\n  'hdfs://emr-header-1.cluster-49146:9000/user/hive/warehouse/tpch_hive_orc.db/supplier';\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create external tables in StarRocks."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-SQL",children:'create database if not exists tpch_sr;\nuse tpch_sr;\nCREATE EXTERNAL RESOURCE "hive_test" PROPERTIES (\n  "type" = "hive",\n  "hive.metastore.uris" = "thrift://xxx.xxx.xxx.xxx:9083"\n);\nCREATE EXTERNAL TABLE IF NOT EXISTS nation (\n    n_nationkey int,\n    n_name VARCHAR(25),\n    n_regionkey int,\n    n_comment varchar(152))\nENGINE=hive\nproperties (\n    "resource" = "hive_test",\n    "table" = "nation",\n    "database" = "tpch_hive_orc"\n);\nCREATE EXTERNAL TABLE IF NOT EXISTS customer (\n    c_custkey     INTEGER,\n    c_name        VARCHAR(25),\n    c_address     VARCHAR(40),\n    c_nationkey   INTEGER,\n    c_phone       VARCHAR(15),\n    c_acctbal     DECIMAL(15,2),\n    c_mktsegment  VARCHAR(10),\n    c_comment     VARCHAR(117))\nENGINE=hive\nproperties (\n    "resource" = "hive_test",\n    "table" = "customer",\n    "database" = "tpch_hive_orc"\n);\nCREATE EXTERNAL TABLE IF NOT EXISTS lineitem (\n    l_orderkey    BIGINT,\n    l_partkey     INTEGER,\n    l_suppkey     INTEGER,\n    l_linenumber  INTEGER,\n    l_quantity    DECIMAL(15,2),\n    l_extendedprice  DECIMAL(15,2),\n    l_discount    DECIMAL(15,2),\n    l_tax         DECIMAL(15,2),\n    l_returnflag  VARCHAR(1),\n    l_linestatus  VARCHAR(1),\n    l_shipdate    DATE,\n    l_commitdate  DATE,\n    l_receiptdate DATE,\n    l_shipinstruct VARCHAR(25),\n    l_shipmode     VARCHAR(10),\n    l_comment      VARCHAR(44))\nENGINE=hive\nproperties (\n    "resource" = "hive_test",\n    "table" = "lineitem",\n    "database" = "tpch_hive_orc"\n);\nCREATE EXTERNAL TABLE IF NOT EXISTS orders  ( \n    o_orderkey       BIGINT,\n    o_custkey        INTEGER,\n    o_orderstatus    VARCHAR(1),\n    o_totalprice     DECIMAL(15,2),\n    o_orderdate      DATE,\n    o_orderpriority  VARCHAR(15),\n    o_clerk          VARCHAR(15),\n    o_shippriority   INTEGER,\n    o_comment        VARCHAR(79))\nENGINE=hive\nproperties (\n    "resource" = "hive_test",\n    "table" = "orders",\n    "database" = "tpch_hive_orc"\n);\nCREATE EXTERNAL TABLE IF NOT EXISTS part  ( \n    p_partkey     INTEGER,\n    p_name        VARCHAR(55),\n    p_mfgr        VARCHAR(25),\n    p_brand       VARCHAR(10),\n    p_type        VARCHAR(25),\n    p_size        INTEGER,\n    p_container   VARCHAR(10),\n    p_retailprice DECIMAL(15,2),\n    p_comment     VARCHAR(23))\nENGINE=hive\nproperties (\n    "resource" = "hive_test",\n    "table" = "part",\n    "database" = "tpch_hive_orc"\n);\nCREATE EXTERNAL TABLE IF NOT EXISTS partsupp ( \n    ps_partkey     INTEGER,\n    ps_suppkey     INTEGER,\n    ps_availqty    INTEGER,\n    ps_supplycost  DECIMAL(15,2),\n    ps_comment     VARCHAR(199))\nENGINE=hive\nproperties (\n    "resource" = "hive_test",\n    "table" = "partsupp",\n    "database" = "tpch_hive_orc"\n);\nCREATE EXTERNAL TABLE IF NOT EXISTS region  ( \n    r_regionkey  INTEGER,\n    r_name       VARCHAR(25),\n    r_comment    VARCHAR(152))\nENGINE=hive\nproperties (\n    "resource" = "hive_test",\n    "table" = "region",\n    "database" = "tpch_hive_orc"\n);\nCREATE EXTERNAL TABLE IF NOT EXISTS supplier (\n    s_suppkey     INTEGER,\n    s_name        VARCHAR(25),\n    s_address     VARCHAR(40),\n    s_nationkey   INTEGER,\n    s_phone       VARCHAR(15),\n    s_acctbal     DECIMAL(15,2),\n    s_comment     VARCHAR(101))\nENGINE=hive\nproperties (\n    "resource" = "hive_test",\n    "table" = "supplier",\n    "database" = "tpch_hive_orc"\n);\ncreate view revenue0 (supplier_no, total_revenue) as\nselect\n    l_suppkey,\n    sum(l_extendedprice * (1 - l_discount))\nfrom\n    lineitem\nwhere\n    l_shipdate >= date \'1996-01-01\'\n    and l_shipdate < date \'1996-01-01\' + interval \'3\' month\ngroup by\n    l_suppkey;\n'})}),"\n",(0,t.jsx)(n.h4,{id:"422-load-data",children:"4.2.2 Load Data"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create Hive external tables in Hive. The table format is CSV. Upload CSV test data to the data storage directory on HDFS. In this example, the HDFS data storage path of the Hive external table is /user/tmp/csv/."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-SQL",children:"create database tpch_hive_csv;\nuse tpch_hive_csv;\n\n--Create an external table named customer.\nCREATE EXTERNAL TABLE `customer`(\n`c_custkey` int, \n`c_name` varchar(25), \n`c_address` varchar(40), \n`c_nationkey` int, \n`c_phone` varchar(15), \n`c_acctbal` double, \n`c_mktsegment` varchar(10), \n`c_comment` varchar(117))\nROW FORMAT SERDE \n'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe' \nWITH SERDEPROPERTIES ( \n'field.delim'='|', \n'serialization.format'='|') \nSTORED AS INPUTFORMAT \n'org.apache.hadoop.mapred.TextInputFormat' \nOUTPUTFORMAT \n'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'\nLOCATION\n'hdfs://emr-header-1.cluster-49146:9000/user/tmp/csv/customer_csv';\n--Create an external table named lineitem.\nCREATE EXTERNAL TABLE `lineitem`(\n`l_orderkey` int, \n`l_partkey` int, \n`l_suppkey` int, \n`l_linenumber` int, \n`l_quantity` double, \n`l_extendedprice` double, \n`l_discount` double, \n`l_tax` double, \n`l_returnflag` varchar(1), \n`l_linestatus` varchar(1), \n`l_shipdate` date, \n`l_commitdate` date, \n`l_receiptdate` date, \n`l_shipinstruct` varchar(25), \n`l_shipmode` varchar(10), \n`l_comment` varchar(44))\nROW FORMAT SERDE \n'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe' \nWITH SERDEPROPERTIES ( \n'field.delim'='|', \n'serialization.format'='|') \nSTORED AS INPUTFORMAT \n'org.apache.hadoop.mapred.TextInputFormat' \nOUTPUTFORMAT \n'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'\nLOCATION\n'hdfs://emr-header-1.cluster-49146:9000/user/tmp/csv/lineitem_csv';\n--Create an external table named nation.\nCREATE EXTERNAL TABLE `nation`(\n`n_nationkey` int, \n`n_name` varchar(25), \n`n_regionkey` int, \n`n_comment` varchar(152))\nROW FORMAT SERDE \n'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe' \nWITH SERDEPROPERTIES ( \n'field.delim'='|', \n'serialization.format'='|') \nSTORED AS INPUTFORMAT \n'org.apache.hadoop.mapred.TextInputFormat' \nOUTPUTFORMAT \n'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'\nLOCATION\n'hdfs://emr-header-1.cluster-49146:9000/user/tmp/csv/nation_csv';\n--Create an external table named orders.\nCREATE EXTERNAL TABLE `orders`(\n`o_orderkey` int, \n`o_custkey` int, \n`o_orderstatus` varchar(1), \n`o_totalprice` double, \n`o_orderdate` date, \n`o_orderpriority` varchar(15), \n`o_clerk` varchar(15), \n`o_shippriority` int, \n`o_comment` varchar(79))\nROW FORMAT SERDE \n'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe' \nWITH SERDEPROPERTIES ( \n'field.delim'='|', \n'serialization.format'='|') \nSTORED AS INPUTFORMAT \n'org.apache.hadoop.mapred.TextInputFormat' \nOUTPUTFORMAT \n'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'\nLOCATION\n'hdfs://emr-header-1.cluster-49146:9000/user/tmp/csv/orders_csv';\n--Create an external table named part.\nCREATE EXTERNAL TABLE `part`(\n`p_partkey` int, \n`p_name` varchar(55), \n`p_mfgr` varchar(25), \n`p_brand` varchar(10), \n`p_type` varchar(25), \n`p_size` int, \n`p_container` varchar(10), \n`p_retailprice` double, \n`p_comment` varchar(23))\nROW FORMAT SERDE \n'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe' \nWITH SERDEPROPERTIES ( \n'field.delim'='|', \n'serialization.format'='|') \nSTORED AS INPUTFORMAT \n'org.apache.hadoop.mapred.TextInputFormat' \nOUTPUTFORMAT \n'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'\nLOCATION\n'hdfs://emr-header-1.cluster-49146:9000/user/tmp/csv/part_csv';\n--Create an external table named partsupp.\nCREATE EXTERNAL TABLE `partsupp`(\n`ps_partkey` int, \n`ps_suppkey` int, \n`ps_availqty` int, \n`ps_supplycost` double, \n`ps_comment` varchar(199))\nROW FORMAT SERDE \n'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe' \nWITH SERDEPROPERTIES ( \n'field.delim'='|', \n'serialization.format'='|') \nSTORED AS INPUTFORMAT \n'org.apache.hadoop.mapred.TextInputFormat' \nOUTPUTFORMAT \n'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'\nLOCATION\n'hdfs://emr-header-1.cluster-49146:9000/user/tmp/csv/partsupp_csv';\n--Create an external table named region.\nCREATE EXTERNAL TABLE `region`(\n`r_regionkey` int, \n`r_name` varchar(25), \n`r_comment` varchar(152))\nROW FORMAT SERDE \n'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe' \nWITH SERDEPROPERTIES ( \n'field.delim'='|', \n'serialization.format'='|') \nSTORED AS INPUTFORMAT \n'org.apache.hadoop.mapred.TextInputFormat' \nOUTPUTFORMAT \n'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'\nLOCATION\n'hdfs://emr-header-1.cluster-49146:9000/user/tmp/csv/region_csv';\n--Create an external table named supplier.\nCREATE EXTERNAL TABLE `supplier`(\n`s_suppkey` int, \n`s_name` varchar(25), \n`s_address` varchar(40), \n`s_nationkey` int, \n`s_phone` varchar(15), \n`s_acctbal` double, \n`s_comment` varchar(101))\nROW FORMAT SERDE \n'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe' \nWITH SERDEPROPERTIES ( \n'field.delim'='|', \n'serialization.format'='|') \nSTORED AS INPUTFORMAT \n'org.apache.hadoop.mapred.TextInputFormat' \nOUTPUTFORMAT \n'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'\nLOCATION\n'hdfs://emr-header-1.cluster-49146:9000/user/tmp/csv/supplier_csv';\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Transfer CSV data in each Hive external table to a Hive table of the ORC format. This helps create Hive external tables of the ORC format in StarRocks and Trino for subsequent testing."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-SQL",children:"use tpch_hive_csv;\ninsert into tpch_hive_orc.customer  select * from customer;\ninsert into tpch_hive_orc.lineitem  select * from lineitem;\ninsert into tpch_hive_orc.nation  select * from nation;\ninsert into tpch_hive_orc.orders  select * from orders;\ninsert into tpch_hive_orc.part  select * from part;\ninsert into tpch_hive_orc.partsupp  select * from partsupp;\ninsert into tpch_hive_orc.region  select * from region;\ninsert into tpch_hive_orc.supplier  select * from supplier;\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"423-query-data",children:"4.2.3 Query Data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-SQL",children:"use tpch_sr;\n--Query system variables of current session.\nshow variables;\n--Set the parallelism to 8.\nset parallel_fragment_exec_instance_num = 8;\n\n--Q1\nselect\n  l_returnflag,\n  l_linestatus,\n  sum(l_quantity) as sum_qty,\n  sum(l_extendedprice) as sum_base_price,\n  sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,\n  sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,\n  avg(l_quantity) as avg_qty,\n  avg(l_extendedprice) as avg_price,\n  avg(l_discount) as avg_disc,\n  count(*) as count_order\nfrom lineitem\nwhere  l_shipdate <= date '1998-12-01'\ngroup by  l_returnflag,  l_linestatus\norder by  l_returnflag,  l_linestatus;\n\n--Q2\nselect count(*) from (\nselect  s_acctbal, s_name,  n_name,  p_partkey,  p_mfgr,  s_address,  s_phone,  s_comment\nfrom  part,  partsupp,  supplier,  nation,  region\nwhere\n  p_partkey = ps_partkey\n  and s_suppkey = ps_suppkey\n  and p_size = 15\n  and p_type like '%BRASS'\n  and s_nationkey = n_nationkey\n  and n_regionkey = r_regionkey\n  and r_name = 'EUROPE'\n  and ps_supplycost = (\n    select  min(ps_supplycost)\n    from  partsupp,  supplier,  nation,  region\n    where\n      p_partkey = ps_partkey\n      and s_suppkey = ps_suppkey\n      and s_nationkey = n_nationkey\n      and n_regionkey = r_regionkey\n      and r_name = 'EUROPE'\n  )\norder by  s_acctbal desc, n_name,  s_name,  p_partkey\n) as t1;\n\n--Q3\nselect count(*) from (\n    select\n      l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority\n    from\n      customer, orders, lineitem\n    where\n      c_mktsegment = 'BUILDING'\n      and c_custkey = o_custkey\n      and l_orderkey = o_orderkey\n      and o_orderdate < date '1995-03-15'\n      and l_shipdate > date '1995-03-15'\n    group by l_orderkey, o_orderdate, o_shippriority\n    order by revenue desc, o_orderdate\n    ) as t1;\n\n--Q4\nselect  o_orderpriority,  count(*) as order_count\nfrom  orders\nwhere\n  o_orderdate >= date '1993-07-01'\n  and o_orderdate < date '1993-07-01' + interval '3' month\n  and exists (\n    select  * from  lineitem\n    where  l_orderkey = o_orderkey and l_commitdate < l_receiptdate\n  )\ngroup by o_orderpriority\norder by o_orderpriority;\n\n--Q5\nselect n_name, sum(l_extendedprice * (1 - l_discount)) as revenue\nfrom customer, orders, lineitem, supplier, nation, region\nwhere\n  c_custkey = o_custkey\n  and l_orderkey = o_orderkey\n  and l_suppkey = s_suppkey\n  and c_nationkey = s_nationkey\n  and s_nationkey = n_nationkey\n  and n_regionkey = r_regionkey\n  and r_name = 'ASIA'\n  and o_orderdate >= date '1994-01-01'\n  and o_orderdate < date '1994-01-01' + interval '1' year\ngroup by n_name\norder by revenue desc;\n\n--Q6\nselect\n  sum(l_extendedprice * l_discount) as revenue\nfrom\n  lineitem\nwhere\n  l_shipdate >= date '1994-01-01'\n  and l_shipdate < date '1994-01-01' + interval '1' year\n  and l_discount between .06 - 0.01 and .06 + 0.01\n  and l_quantity < 24;\n\n--Q7\nselect supp_nation, cust_nation, l_year, sum(volume) as revenue\nfrom (\n    select\n      n1.n_name as supp_nation,\n      n2.n_name as cust_nation,\n      extract(year from l_shipdate) as l_year,\n      l_extendedprice * (1 - l_discount) as volume\n    from supplier, lineitem, orders, customer, nation n1, nation n2\n    where\n      s_suppkey = l_suppkey\n      and o_orderkey = l_orderkey\n      and c_custkey = o_custkey\n      and s_nationkey = n1.n_nationkey\n      and c_nationkey = n2.n_nationkey\n      and (\n        (n1.n_name = 'FRANCE' and n2.n_name = 'GERMANY')\n        or (n1.n_name = 'GERMANY' and n2.n_name = 'FRANCE')\n      )\n      and l_shipdate between date '1995-01-01' and date '1996-12-31'\n  ) as shipping\ngroup by supp_nation, cust_nation, l_year\norder by supp_nation, cust_nation, l_year;\n\n--Q8\nselect\n  o_year, sum(case when nation = 'BRAZIL' then volume else 0 end) / sum(volume) as mkt_share\nfrom\n  (\n    select\n      extract(year from o_orderdate) as o_year,\n      l_extendedprice * (1 - l_discount) as volume,\n      n2.n_name as nation\n    from part, supplier, lineitem, orders, customer, nation n1, nation n2, region\n    where\n      p_partkey = l_partkey\n      and s_suppkey = l_suppkey\n      and l_orderkey = o_orderkey\n      and o_custkey = c_custkey\n      and c_nationkey = n1.n_nationkey\n      and n1.n_regionkey = r_regionkey\n      and r_name = 'AMERICA'\n      and s_nationkey = n2.n_nationkey\n      and o_orderdate between date '1995-01-01' and date '1996-12-31'\n      and p_type = 'ECONOMY ANODIZED STEEL'\n  ) as all_nations\ngroup by o_year\norder by o_year;\n\n--Q9\nselect count(*) from (\nselect nation, o_year, sum(amount) as sum_profit\nfrom\n  (\n    select\n      n_name as nation,\n      extract(year from o_orderdate) as o_year,\n      l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount\n    from part, supplier, lineitem, partsupp, orders, nation\n    where\n      s_suppkey = l_suppkey\n      and ps_suppkey = l_suppkey\n      and ps_partkey = l_partkey\n      and p_partkey = l_partkey\n      and o_orderkey = l_orderkey\n      and s_nationkey = n_nationkey\n      and p_name like '%green%'\n  ) as profit\ngroup by nation, o_year\norder by nation, o_year desc\n) as t1;\n\n--Q10\nselect count(*) from (\nselect c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment\n    from customer, orders, lineitem, nation\n    where\n      c_custkey = o_custkey\n      and l_orderkey = o_orderkey\n      and o_orderdate >= date '1993-10-01'\n      and o_orderdate < date '1993-12-01'\n      and l_returnflag = 'R'\n      and c_nationkey = n_nationkey\n    group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment\n    order by revenue desc\n) as t1;\n\n--Q11\nselect count(*) from (\nselect ps_partkey, sum(ps_supplycost * ps_availqty) as value\nfrom partsupp, supplier, nation\nwhere\n  ps_suppkey = s_suppkey\n  and s_nationkey = n_nationkey\n  and n_name = 'GERMANY'\ngroup by ps_partkey having\n    sum(ps_supplycost * ps_availqty) > (\n      select sum(ps_supplycost * ps_availqty) * 0.0001000000\n      from partsupp, supplier, nation\n      where\n        ps_suppkey = s_suppkey\n        and s_nationkey = n_nationkey\n        and n_name = 'GERMANY'\n    )\norder by value desc\n) as t1;\n\n--Q12\nselect\n  l_shipmode,\n  sum(case when o_orderpriority = '1-URGENT' or o_orderpriority = '2-HIGH' then 1 else 0 end) as high_line_count,\n  sum(case when o_orderpriority <> '1-URGENT' and o_orderpriority <> '2-HIGH' then 1 else 0 end) as low_line_count\nfrom orders, lineitem\nwhere\n  o_orderkey = l_orderkey\n  and l_shipmode in ('MAIL', 'SHIP')\n  and l_commitdate < l_receiptdate\n  and l_shipdate < l_commitdate\n  and l_receiptdate >= date '1994-01-01'\n  and l_receiptdate < date '1994-01-01' + interval '1' year\ngroup by l_shipmode\norder by l_shipmode;\n\n--Q13\nselect  c_count,  count(*) as custdist\nfrom (select c_custkey,count(o_orderkey) as c_count\n    from customer left outer join orders on c_custkey = o_custkey and o_comment not like '%special%requests%'\n    group by  c_custkey\n) as c_orders\ngroup by  c_count\norder by custdist desc, c_count desc;\n\n--Q14\nselect\n  100.00 * sum(case when p_type like 'PROMO%' then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue\nfrom lineitem, part\nwhere\n  l_partkey = p_partkey\n  and l_shipdate >= date '1995-09-01'\n  and l_shipdate < date '1995-09-01' + interval '1' month;\n\n--Q15\nselect s_suppkey, s_name, s_address, s_phone, total_revenue\nfrom supplier, revenue0\nwhere\n  s_suppkey = supplier_no\n  and total_revenue = (\n    select max(total_revenue) from revenue0\n  )\norder by s_suppkey;\n\n--Q16\nselect count(*) from (\nselect p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt\nfrom partsupp, part\nwhere\n  p_partkey = ps_partkey\n  and p_brand <> 'Brand#45'\n  and p_type not like 'MEDIUM POLISHED%'\n  and p_size in (49, 14, 23, 45, 19, 3, 36, 9)\n  and ps_suppkey not in (\n    select s_suppkey from supplier where s_comment like '%Customer%Complaints%'\n  )\ngroup by p_brand, p_type, p_size\norder by supplier_cnt desc, p_brand, p_type, p_size\n) as t1;\n\n--Q17\nselect sum(l_extendedprice) / 7.0 as avg_yearly\nfrom lineitem, part\nwhere\n  p_partkey = l_partkey\n  and p_brand = 'Brand#23'\n  and p_container = 'MED BOX'\n  and l_quantity < (\n    select 0.2 * avg(l_quantity) from lineitem where l_partkey = p_partkey\n  );\n\n--Q18\nselect count(*) from (\nselect c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity)\nfrom customer, orders, lineitem\nwhere\n  o_orderkey in (\n    select l_orderkey from lineitem\n    group by l_orderkey having\n        sum(l_quantity) > 300\n  )\n  and c_custkey = o_custkey\n  and o_orderkey = l_orderkey\ngroup by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice\norder by o_totalprice desc, o_orderdate\n) as t1;\n\n--Q19\nselect sum(l_extendedprice* (1 - l_discount)) as revenue\nfrom lineitem, part\nwhere\n  (\n    p_partkey = l_partkey\n    and p_brand = 'Brand#12'\n    and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')\n    and l_quantity >= 1 and l_quantity <= 1 + 10\n    and p_size between 1 and 5\n    and l_shipmode in ('AIR', 'AIR REG')\n    and l_shipinstruct = 'DELIVER IN PERSON'\n  )\n  or\n  (\n    p_partkey = l_partkey\n    and p_brand = 'Brand#23'\n    and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')\n    and l_quantity >= 10 and l_quantity <= 10 + 10\n    and p_size between 1 and 10\n    and l_shipmode in ('AIR', 'AIR REG')\n    and l_shipinstruct = 'DELIVER IN PERSON'\n  )\n  or\n  (\n    p_partkey = l_partkey\n    and p_brand = 'Brand#34'\n    and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')\n    and l_quantity >= 20 and l_quantity <= 20 + 10\n    and p_size between 1 and 15\n    and l_shipmode in ('AIR', 'AIR REG')\n    and l_shipinstruct = 'DELIVER IN PERSON'\n  );\n\n--Q20\nselect s_name, s_address\nfrom supplier, nation\nwhere\n  s_suppkey in (\n    select ps_suppkey\n    from partsupp\n    where\n      ps_partkey in (\n        select p_partkey from part\n        where p_name like 'forest%'\n      )\n      and ps_availqty > (\n        select 0.5 * sum(l_quantity)\n        from lineitem\n        where\n          l_partkey = ps_partkey\n          and l_suppkey = ps_suppkey\n          and l_shipdate >= date '1994-01-01'\n          and l_shipdate < date '1994-01-01' + interval '1' year\n      )\n  )\n  and s_nationkey = n_nationkey\n  and n_name = 'CANADA'\norder by s_name;\n\n--Q21\nselect count(*) from (\nselect s_name, count(*) as numwait\nfrom  supplier,  lineitem l1,  orders,  nation\nwhere\n  s_suppkey = l1.l_suppkey\n  and o_orderkey = l1.l_orderkey\n  and o_orderstatus = 'F'\n  and l1.l_receiptdate > l1.l_commitdate\n  and exists (\n    select      *     from    lineitem l2\n    where\n      l2.l_orderkey = l1.l_orderkey\n      and l2.l_suppkey <> l1.l_suppkey\n  )\n  and not exists (\n    select      *       from    lineitem l3\n    where\n      l3.l_orderkey = l1.l_orderkey\n      and l3.l_suppkey <> l1.l_suppkey\n      and l3.l_receiptdate > l3.l_commitdate\n  )\n  and s_nationkey = n_nationkey\n  and n_name = 'SAUDI ARABIA'\ngroup by s_name\norder by  numwait desc, s_name\n) as t1;\n\n--Q22\nselect\n  cntrycode,\n  count(*) as numcust,\n  sum(c_acctbal) as totacctbal\nfrom\n  (\n    select\n      substr(c_phone, 1, 2) as cntrycode,\n      c_acctbal\n    from\n      customer\n    where\n      substr(c_phone, 1, 2) in\n        ('13', '31', '23', '29', '30', '18', '17')\n      and c_acctbal > (\n        select\n          avg(c_acctbal)\n        from\n          customer\n        where\n          c_acctbal > 0.00\n          and substr(c_phone, 1, 2) in\n            ('13', '31', '23', '29', '30', '18', '17')\n      )\n      and not exists (\n        select\n          *\n        from\n          orders\n        where\n          o_custkey = c_custkey\n      )\n  ) as custsale\ngroup by\n  cntrycode\norder by\n  cntrycode;\n"})})]})}const p=function(e={}){const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(c,e)})):c(e)}},56978:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/7.2-1-1018abaf5f038eec3ab526a12d81f301.png"},11151:(e,n,r)=>{r.d(n,{Zo:()=>i,ah:()=>s});var t=r(67294);const a=t.createContext({});function s(e){const n=t.useContext(a);return t.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const o={};function i({components:e,children:n,disableParentContext:r}){let i;return i=r?"function"==typeof e?e({}):e||o:s(e),t.createElement(a.Provider,{value:i},n)}}}]);