"use strict";(self.webpackChunkstarrocks=self.webpackChunkstarrocks||[]).push([[77879],{8569:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var s=t(85893),r=t(11151);const c={},o="group_concat",i={id:"sql-reference/sql-functions/string-functions/group_concat",title:"group_concat",description:"Description",source:"@site/versioned_docs/version-2.5/sql-reference/sql-functions/string-functions/group_concat.md",sourceDirName:"sql-reference/sql-functions/string-functions",slug:"/sql-reference/sql-functions/string-functions/group_concat",permalink:"/doc/en/2.5/sql-reference/sql-functions/string-functions/group_concat",draft:!1,unlisted:!1,editUrl:"https://github.com/StarRocks/starrocks/edit/main/docs/sql-reference/sql-functions/string-functions/group_concat.md",tags:[],version:"2.5",frontMatter:{},sidebar:"documentation",previous:{title:"find_in_set",permalink:"/doc/en/2.5/sql-reference/sql-functions/string-functions/find_in_set"},next:{title:"hex",permalink:"/doc/en/2.5/sql-reference/sql-functions/string-functions/hex"}},a={},l=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2},{value:"keyword",id:"keyword",level:2}];function u(e){const n=Object.assign({h1:"h1",h2:"h2",p:"p",code:"code",blockquote:"blockquote",pre:"pre",ul:"ul",li:"li"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"group_concat",children:"group_concat"}),"\n",(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:["This is an aggregate function similar to sum(). group_concat concatenates non-null values into one string, with the second argument ",(0,s.jsx)(n.code,{children:"sep"})," being the separator. The second argument can also be omitted. This function usually needs to be used along with ",(0,s.jsx)(n.code,{children:"group by"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Please note that strings may not be concatenated in sequence because it uses distributed computing."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Haskell",children:"VARCHAR group_concat(VARCHAR str[, VARCHAR sep])\n"})}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"str"}),": the values to concatenate. It must evaluate to VARCHAR."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sep"}),": the separator, optional. If it is not specified, a comma and a space (",(0,s.jsx)(n.code,{children:", "}),") is used by default."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"return-value",children:"Return value"}),"\n",(0,s.jsx)(n.p,{children:"Returns a VARCHAR value."}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE IF NOT EXISTS group_concat (\n    id        tinyint(4)      NULL,\n    value   varchar(65533)  NULL\n) ENGINE=OLAP\nDISTRIBUTED BY HASH(id);\n\nINSERT INTO group_concat VALUES\n(1,'fruit'),\n(2,'drinks'),\n(3,null),\n(4,'fruit'),\n(5,'meat'),\n(6,'seafood');\n\nselect * from group_concat order by id;\n+------+---------+\n| id   | value   |\n+------+---------+\n|    1 | fruit   |\n|    2 | drinks  |\n|    3 | NULL    |\n|    4 | fruit   |\n|    5 | meat    |\n|    6 | seafood |\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select group_concat(value) from group_concat;\n+-------------------------------------+\n| group_concat(value)                 |\n+-------------------------------------+\n| meat, fruit, seafood, fruit, drinks |\n+-------------------------------------+\n\nMySQL > select group_concat(value, \" \") from group_concat;\n+---------------------------------+\n| group_concat(value, ' ')        |\n+---------------------------------+\n| fruit meat fruit drinks seafood |\n+---------------------------------+\n"})}),"\n",(0,s.jsx)(n.h2,{id:"keyword",children:"keyword"}),"\n",(0,s.jsx)(n.p,{children:"GROUP_CONCAT,GROUP,CONCAT"})]})}const d=function(e={}){const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(u,e)})):u(e)}},11151:(e,n,t)=>{t.d(n,{Zo:()=>i,ah:()=>c});var s=t(67294);const r=s.createContext({});function c(e){const n=s.useContext(r);return s.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const o={};function i({components:e,children:n,disableParentContext:t}){let i;return i=t?"function"==typeof e?e({}):e||o:c(e),s.createElement(r.Provider,{value:i},n)}}}]);