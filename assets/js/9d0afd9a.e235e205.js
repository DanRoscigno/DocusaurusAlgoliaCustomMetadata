"use strict";(self.webpackChunkstarrocks=self.webpackChunkstarrocks||[]).push([[44909],{83763:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var s=t(85893),a=t(11151);const r={displayed_sidebar:"English"},i="Query Cache",c={id:"using_starrocks/query_cache",title:"Query Cache",description:"The query cache is a powerful feature of StarRocks that can greatly enhance the performance of aggregate queries. By storing the intermediate results of local aggregations in memory, the query cache can avoid unnecessary disk access and computation for new queries that are identical or similar to previous ones. With its query cache, StarRocks can deliver fast and accurate results for aggregate queries, saving time and resources and enabling better scalability. The query cache is especially useful for high-concurrency scenarios where many users run similar queries on large and complex data sets.",source:"@site/versioned_docs/version-3.0/using_starrocks/query_cache.md",sourceDirName:"using_starrocks",slug:"/using_starrocks/query_cache",permalink:"/doc/docs/3.0/using_starrocks/query_cache",draft:!1,unlisted:!1,editUrl:"https://github.com/StarRocks/starrocks/edit/main/docs/using_starrocks/query_cache.md",tags:[],version:"3.0",frontMatter:{displayed_sidebar:"English"},sidebar:"English",previous:{title:"Data modeling with materialized views",permalink:"/doc/docs/3.0/using_starrocks/data_modeling_with_materialized_views"},next:{title:"Query rewrite with materialized views",permalink:"/doc/docs/3.0/using_starrocks/query_rewrite_with_materialized_views"}},o={},l=[{value:"Application scenarios",id:"application-scenarios",level:2},{value:"Feature boundaries",id:"feature-boundaries",level:2},{value:"How it works",id:"how-it-works",level:2},{value:"Enable query cache",id:"enable-query-cache",level:2},{value:"FE session variables",id:"fe-session-variables",level:3},{value:"BE parameters",id:"be-parameters",level:3},{value:"Engineered for maximum cache hit rate in all scenarios",id:"engineered-for-maximum-cache-hit-rate-in-all-scenarios",level:2},{value:"Semantically equivalent queries",id:"semantically-equivalent-queries",level:3},{value:"Queries with overlapping scanned partitions",id:"queries-with-overlapping-scanned-partitions",level:3},{value:"Queries against data with append-only data changes",id:"queries-against-data-with-append-only-data-changes",level:3},{value:"Metrics",id:"metrics",level:2},{value:"RESTful API operations",id:"restful-api-operations",level:2},{value:"Precautions",id:"precautions",level:2},{value:"Examples",id:"examples",level:2},{value:"Dataset",id:"dataset",level:3},{value:"Query examples",id:"query-examples",level:3},{value:"Query cache works for local aggregations at stage 1",id:"query-cache-works-for-local-aggregations-at-stage-1",level:4},{value:"Query cache does not work for remote aggregations at stage 1",id:"query-cache-does-not-work-for-remote-aggregations-at-stage-1",level:4},{value:"Query cache works for local aggregations at stage 2",id:"query-cache-works-for-local-aggregations-at-stage-2",level:4},{value:"Query cache works for local aggregations at stage 3",id:"query-cache-works-for-local-aggregations-at-stage-3",level:4},{value:"Query cache works for local aggregations at stage 4",id:"query-cache-works-for-local-aggregations-at-stage-4",level:4},{value:"Cached results are reused for two queries whose first aggregations are semantically equivalent",id:"cached-results-are-reused-for-two-queries-whose-first-aggregations-are-semantically-equivalent",level:4},{value:"Query cache does not work for DISTINCT queries for which CTE optimizations are enabled",id:"query-cache-does-not-work-for-distinct-queries-for-which-cte-optimizations-are-enabled",level:4},{value:"Best practices",id:"best-practices",level:2}];function h(e){const n=Object.assign({h1:"h1",p:"p",h2:"h2",ul:"ul",li:"li",code:"code",blockquote:"blockquote",strong:"strong",ol:"ol",img:"img",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",a:"a",pre:"pre",div:"div",em:"em",h4:"h4"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"query-cache",children:"Query Cache"}),"\n",(0,s.jsx)(n.p,{children:"The query cache is a powerful feature of StarRocks that can greatly enhance the performance of aggregate queries. By storing the intermediate results of local aggregations in memory, the query cache can avoid unnecessary disk access and computation for new queries that are identical or similar to previous ones. With its query cache, StarRocks can deliver fast and accurate results for aggregate queries, saving time and resources and enabling better scalability. The query cache is especially useful for high-concurrency scenarios where many users run similar queries on large and complex data sets."}),"\n",(0,s.jsx)(n.p,{children:"This feature is supported since v2.5."}),"\n",(0,s.jsx)(n.p,{children:"In v2.5, the query cache supports only aggregate queries on single flat tables. Since v3.0, the query cache also supports aggregate queries on multiple tables joined in a star schema."}),"\n",(0,s.jsx)(n.h2,{id:"application-scenarios",children:"Application scenarios"}),"\n",(0,s.jsx)(n.p,{children:"We recommend that you use the query cache in the following scenarios:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You frequently run aggregate queries on individual flat tables or on multiple joined tables that are connected in a star schema."}),"\n",(0,s.jsx)(n.li,{children:"Most of your aggregate queries are non-GROUP BY aggregate queries and low-cardinality GROUP BY aggregate queries."}),"\n",(0,s.jsx)(n.li,{children:"Your data is loaded in append mode by time partition and can be categorized as hot data and cold data based on access frequency."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The query cache supports queries that meet the following conditions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The query engine is Pipeline. To enable the Pipeline engine, set the session variable ",(0,s.jsx)(n.code,{children:"enable_pipeline_engine"})," to ",(0,s.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"NOTE"})}),"\n",(0,s.jsx)(n.p,{children:"Other query engines do not support the query cache."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The queries are on native OLAP tables (from v2.5) or cloud-native tables (from v3.0). The query cache does not support queries on external tables. The query cache also supports queries whose plans require access to synchronous materialized views. However, the query cache does not support queries whose plans require access to asynchronous materialized views."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The queries are aggregate queries on individual tables or on multiple joined tables."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"NOTE"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The query cache supports Broadcast Join and Bucket Shuffle Join."}),"\n",(0,s.jsx)(n.li,{children:"The query cache supports two tree structures that contain Join operators: Aggregation-Join and Join-Aggregation. Shuffle joins are not supported in the Aggregation-Join tree structure, while Hash joins are not supported in the Join-Aggregation tree structure."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The queries do not include nondeterminstic functions such as ",(0,s.jsx)(n.code,{children:"rand"}),", ",(0,s.jsx)(n.code,{children:"random"}),", ",(0,s.jsx)(n.code,{children:"uuid"}),", and ",(0,s.jsx)(n.code,{children:"sleep"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The query cache supports queries on tables that use any of the following partition policies: Unpartitioned, Multi-Column Partitioned, and Single-Column Partitioned."}),"\n",(0,s.jsx)(n.h2,{id:"feature-boundaries",children:"Feature boundaries"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The query cache is based on per-tablet computations of the Pipeline engine. Per-tablet computation means that a pipeline driver can process entire tablets one by one rather than processing a portion of a tablet or many tablets interleaved together. If the number of tablets that need to be processed by each individual BE for a query is greater than or equal to the number of pipeline drivers that are invoked to run this query, the query cache works. The number of pipeline drivers invoked represents the actual degree of parallelism (DOP). If the number of tablets is smaller than the number of pipeline drivers, each pipeline driver processes only a portion of a specific tablet. In this situation, per-tablet computation results cannot be produced, and therefore the query cache does not work."}),"\n",(0,s.jsxs)(n.li,{children:["In StarRocks, an aggregate query consists of at least four stages. Per-Tablet computation results generated by AggregateNode in the first stage can be cached only when OlapScanNode and AggregateNode compute data from the same fragment. Per-Tablet computation results generated by AggregateNode in the other stages cannot be cached. For some DISTINCT aggregate queries, if the session variable ",(0,s.jsx)(n.code,{children:"cbo_cte_reuse"})," is set to ",(0,s.jsx)(n.code,{children:"true"}),", the query cache does not work when OlapScanNode, which produces data, and the stage-1 AggregateNode, which consumes the produced data, compute data from different fragments and are bridged by an ExchangeNode. The following two examples show scenarios in which CTE optimizations are performed and therefore the query cache does not work:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The output columns are computed by using the aggregate function ",(0,s.jsx)(n.code,{children:"avg(distinct)"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"The output columns are computed by multiple DISTINCT aggregate functions."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"If your data is shuffled before aggregation, the query cache cannot accelerate the queries on that data."}),"\n",(0,s.jsx)(n.li,{children:"If the group-by columns or deduplicating columns of a table are high-cardinality columns, large results will be generated for aggregate queries on that table. In these cases, the queries will bypass the query cache at runtime."}),"\n",(0,s.jsxs)(n.li,{children:["The query cache occupies a small amount of memory provided by the BE to save computation results. The size of the query cache defaults to 512 MB. Therefore, it is unsuitable for the query cache to save large-sized data items. Additionally, after you enable the query cache, query performance is decreased if the cache hit ratio is low. Therefore, if the size of computation results generated for a tablet exceeds the threshold specified by the ",(0,s.jsx)(n.code,{children:"query_cache_entry_max_bytes"})," or ",(0,s.jsx)(n.code,{children:"query_cache_entry_max_rows"})," parameter, the query cache no longer works for the query and the query is switched to Passthrough mode."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,s.jsx)(n.p,{children:"When the query cache is enabled, each BE splits the local aggregation of a query into the following two stages:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Per-tablet aggregation"}),"\n",(0,s.jsx)(n.p,{children:"The BE processes each tablet individually. When the BE begins processing a tablet, it first probes the query cache to see if the intermediate result of aggregation on that tablet is in the query cache. If so (a cache hit), the BE directly fetches the intermediate result from the query cache. If no (a cache miss), the BE accesses the data on disk and performs local aggregation to compute the intermediate result. When the BE finished processing a tablet, it populates the query cache with the intermediate result of aggregation on that tablet."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Inter-tablet aggregation"}),"\n",(0,s.jsx)(n.p,{children:"The BE gathers the intermediate results from all tablets involved in the query and merges them into a final result."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Query cache - How it works - 1",src:t(81685).Z+"",width:"1280",height:"967"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"When a similar query is issued in the future, it can reuse the cached result for the previous query. For example, the query shown in the following figure involves three tablets (Tablets 0 through 2), and the intermediate result for the first tablet (Tablet 0) is already in the query cache. For this example, the BE can directly fetch the result for Tablet 0 from the query cache instead of accessing the data on disk. If the query cache is fully warmed up, it can contain the intermediate results for all three tablets and thus the BE does not need to access any data on disk."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Query cache - How it works - 2",src:t(50444).Z+"",width:"1280",height:"611"})}),"\n",(0,s.jsxs)(n.p,{children:["To free up extra memory, the query cache adopts a Least Recently Used (LRU)-based eviction policy to manage the cache entries in it. According to this eviction policy, when the amount of memory occupied by the query cache exceeds its predefined size (",(0,s.jsx)(n.code,{children:"query_cache_capacity"}),"), the least recently used cache entries are evicted out of the query cache."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"NOTE"})}),"\n",(0,s.jsx)(n.p,{children:"In the future, StarRocks will also support a Time to Live (TTL)-based eviction policy based on which cache entries can be evicted out of the query cache."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The FE determines whether each query needs to be accelerated by using the query cache and normalizes the queries to eliminate trivial literal details that have no effect on the semantics of queries."}),"\n",(0,s.jsx)(n.p,{children:"To prevent the performance penalty incurred by the bad cases of the query cache, the BE adopts an adaptive policy to bypass the query cache at runtime."}),"\n",(0,s.jsx)(n.h2,{id:"enable-query-cache",children:"Enable query cache"}),"\n",(0,s.jsx)(n.p,{children:"This section describes the parameters and session variables that are used to enable and configure the query cache."}),"\n",(0,s.jsx)(n.h3,{id:"fe-session-variables",children:"FE session variables"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Variable"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Default value"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Can be dynamically configured"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Description"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"enable_query_cache"}),(0,s.jsx)(n.td,{children:"false"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsxs)(n.td,{children:["Specifies whether to enable the query cache. Valid values: ",(0,s.jsx)(n.code,{children:"true"})," and ",(0,s.jsx)(n.code,{children:"false"}),". ",(0,s.jsx)(n.code,{children:"true"})," specifies to enable this feature, and ",(0,s.jsx)(n.code,{children:"false"}),' specifies to disable this feature. When the query cache is enabled, it works only for queries that meet the conditions specified in the "',(0,s.jsx)(n.a,{href:"/doc/docs/3.0/using_starrocks/query_cache#application-scenarios",children:"Application scenarios"}),'" section of this topic.']})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"query_cache_entry_max_bytes"}),(0,s.jsx)(n.td,{children:"4194304"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsxs)(n.td,{children:["Specifies the threshold for triggering the Passthrough mode. Valid values: ",(0,s.jsx)(n.code,{children:"0"})," to ",(0,s.jsx)(n.code,{children:"9223372036854775807"}),". When the number of bytes or rows from the computation results of a specific tablet accessed by a query exceeds the threshold specified by the ",(0,s.jsx)(n.code,{children:"query_cache_entry_max_bytes"})," or  ",(0,s.jsx)(n.code,{children:"query_cache_entry_max_rows"})," parameter, the query is switched to Passthrough mode.",(0,s.jsx)("br",{}),"If the ",(0,s.jsx)(n.code,{children:"query_cache_entry_max_bytes"})," or ",(0,s.jsx)(n.code,{children:"query_cache_entry_max_rows"})," parameter is set to ",(0,s.jsx)(n.code,{children:"0"}),", the Passthrough mode is used even when no computation results are generated from the involved tablets."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"query_cache_entry_max_rows"}),(0,s.jsx)(n.td,{children:"409600"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{children:"Same as above."})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"be-parameters",children:"BE parameters"}),"\n",(0,s.jsxs)(n.p,{children:["You need to configure the following parameter in the BE configuration file ",(0,s.jsx)(n.strong,{children:"be.conf"}),". After you reconfigure this parameter for a BE, you must restart the BE to make the new parameter setting take effect."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Parameter"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Required"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Description"})})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"query_cache_capacity"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsxs)(n.td,{children:["Specifies the size of the query cache. Unit: bytes. The default size is 512 MB.",(0,s.jsx)("br",{}),"Each BE has its own local query cache in memory, and it populates and probes only its own query cache.",(0,s.jsx)("br",{}),"Note that the query cache size cannot be less than 4 MB. If the memory capacity of the BE is insufficient to provision your expected query cache size, you can increase the memory capacity of the BE."]})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"engineered-for-maximum-cache-hit-rate-in-all-scenarios",children:"Engineered for maximum cache hit rate in all scenarios"}),"\n",(0,s.jsx)(n.p,{children:"Consider three scenarios where the query cache is still effective even when the queries are not identical literally. These three scenarios are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Semantically equivalent queries"}),"\n",(0,s.jsx)(n.li,{children:"Queries with overlapping scanned partitions"}),"\n",(0,s.jsx)(n.li,{children:"Queries against data with append-only data changes (no UPDATE or DELETE operations)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"semantically-equivalent-queries",children:"Semantically equivalent queries"}),"\n",(0,s.jsx)(n.p,{children:"When two queries are similar, which does not mean that they must be literally equivalent but means that they contain semantically equivalent snippets in their execution plans, they are considered semantically equivalent and can reuse each other's computation results. In a broad sense, two queries are semantically equivalent if they query data from the same source, use the same computation method, and have the same execution plan. StarRocks applies the following rules to evaluate whether two queries are semantically equivalent:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"If the two queries contain multiple aggregations, they are evaluated as semantically equivalent as long as their first aggregations are semantically equivalent. For example, the following two queries, Q1 and Q2, both contain multiple aggregations, but their first aggregations are semantically equivalent. Therefore, Q1 and Q2 are evaluated as semantically equivalent."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Q1"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT\n    (\n        ifnull(sum(murmur_hash3_32(hour)), 0) + ifnull(sum(murmur_hash3_32(k0)), 0) + ifnull(sum(murmur_hash3_32(__c_0)), 0)\n    ) AS fingerprint\nFROM\n    (\n        SELECT\n            date_trunc('hour', ts) AS hour,\n            k0,\n            sum(v1) AS __c_0\n        FROM\n            t0\n        WHERE\n            ts between '2022-01-03 00:00:00'\n            and '2022-01-03 23:59:59'\n        GROUP BY\n            date_trunc('hour', ts),\n            k0\n    ) AS t;\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Q2"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT\n    date_trunc('hour', ts) AS hour,\n    k0,\n    sum(v1) AS __c_0\nFROM\n    t0\nWHERE\n    ts between '2022-01-03 00:00:00'\n    and '2022-01-03 23:59:59'\nGROUP BY\n    date_trunc('hour', ts),\n    k0\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"If the two queries both belong to one of the following query types, they can be evaluated as semantically equivalent. Note that queries that include a HAVING clause cannot be evaluated as semantically equivalent to queries that do not include a HAVING clause. However, the inclusion of an ORDER BY or LIMIT clause does not affect the evaluation of whether two queries are semantically equivalent."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"GROUP BY aggregations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT <GroupByItems>, <AggFunctionItems> \nFROM <Table> \nWHERE <Predicates> [and <PartitionColumnRangePredicate>]\nGROUP BY <GroupByItems>\n[HAVING <HavingPredicate>] \n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"NOTE"})}),"\n",(0,s.jsx)(n.p,{children:"In the preceding example, the HAVING clause is optional."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"GROUP BY DISTINCT aggregations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT DISTINCT <GroupByItems>, <Items> \nFROM <Table> \nWHERE <Predicates> [and <PartitionColumnRangePredicate>]\nGROUP BY <GroupByItems>\nHAVING <HavingPredicate>\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"NOTE"})}),"\n",(0,s.jsx)(n.p,{children:"In the preceding example, the HAVING clause is optional."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Non-GROUP BY aggregations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT <AggFunctionItems> FROM <Table> \nWHERE <Predicates> [and <PartitionColumnRangePredicate>]\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Non-GROUP BY DISTINCT aggregations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT DISTINCT <Items> FROM <Table> \nWHERE <Predicates> [and <PartitionColumnRangePredicate>]\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["If either query includes ",(0,s.jsx)(n.code,{children:"PartitionColumnRangePredicate"}),", ",(0,s.jsx)(n.code,{children:"PartitionColumnRangePredicate"})," is removed before the two queries are evaluated for semantic equivalence. ",(0,s.jsx)(n.code,{children:"PartitionColumnRangePredicate"})," specifies one of the following types of predicates that reference a partitioning column:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"col between v1 and v2"}),": The values of the partitioning column fall within the [v1, v2] range, in which ",(0,s.jsx)(n.code,{children:"v1"})," and ",(0,s.jsx)(n.code,{children:"v2"})," are constant expressions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"v1 < col and col < v2"}),": The values of the partitioning column fall within the (v1, v2) range, in which ",(0,s.jsx)(n.code,{children:"v1"})," and ",(0,s.jsx)(n.code,{children:"v2"})," are constant expressions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"v1 < col and col <= v2"}),": The values of the partitioning column fall within the (v1, v2] range, in which ",(0,s.jsx)(n.code,{children:"v1"})," and ",(0,s.jsx)(n.code,{children:"v2"})," are constant expressions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"v1 <= col and col < v2"}),": The values of the partitioning column fall within the [v1, v2) range, in which ",(0,s.jsx)(n.code,{children:"v1"})," and ",(0,s.jsx)(n.code,{children:"v2"})," are constant expressions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"v1 <= col and col <= v2"}),": The values of the partitioning column fall within the [v1, v2] range, in which ",(0,s.jsx)(n.code,{children:"v1"})," and ",(0,s.jsx)(n.code,{children:"v2"})," are constant expressions."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"If the output columns of the SELECT clauses of the two queries are the same after they are rearranged, the two queries are evaluated as semantically equivalent."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"If the output columns of the GROUP BY clauses of the two queries are the same after they are rearranged, the two queries are evaluated as semantically equivalent."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["If the remaining predicates of the WHERE clauses of the two queries are semantically equivalent after ",(0,s.jsx)(n.code,{children:"PartitionColumnRangePredicate"})," is removed, the two queries are evaluated as semantically equivalent."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"If the predicates in the HAVING clauses of the two queries are semantically equivalent, the two queries are evaluated as semantically equivalent."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Use the following table ",(0,s.jsx)(n.code,{children:"lineorder_flat"})," as an example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'CREATE TABLE `lineorder_flat`\n(\n    `lo_orderdate` date NOT NULL COMMENT "",\n    `lo_orderkey` int(11) NOT NULL COMMENT "",\n    `lo_linenumber` tinyint(4) NOT NULL COMMENT "",\n    `lo_custkey` int(11) NOT NULL COMMENT "",\n    `lo_partkey` int(11) NOT NULL COMMENT "",\n    `lo_suppkey` int(11) NOT NULL COMMENT "",\n    `lo_orderpriority` varchar(100) NOT NULL COMMENT "",\n    `lo_shippriority` tinyint(4) NOT NULL COMMENT "",\n    `lo_quantity` tinyint(4) NOT NULL COMMENT "",\n    `lo_extendedprice` int(11) NOT NULL COMMENT "",\n    `lo_ordtotalprice` int(11) NOT NULL COMMENT "",\n    `lo_discount` tinyint(4) NOT NULL COMMENT "",\n    `lo_revenue` int(11) NOT NULL COMMENT "",\n    `lo_supplycost` int(11) NOT NULL COMMENT "",\n    `lo_tax` tinyint(4) NOT NULL COMMENT "",\n    `lo_commitdate` date NOT NULL COMMENT "",\n    `lo_shipmode` varchar(100) NOT NULL COMMENT "",\n    `c_name` varchar(100) NOT NULL COMMENT "",\n    `c_address` varchar(100) NOT NULL COMMENT "",\n    `c_city` varchar(100) NOT NULL COMMENT "",\n    `c_nation` varchar(100) NOT NULL COMMENT "",\n    `c_region` varchar(100) NOT NULL COMMENT "",\n    `c_phone` varchar(100) NOT NULL COMMENT "",\n    `c_mktsegment` varchar(100) NOT NULL COMMENT "",\n    `s_name` varchar(100) NOT NULL COMMENT "",\n    `s_address` varchar(100) NOT NULL COMMENT "",\n    `s_city` varchar(100) NOT NULL COMMENT "",\n    `s_nation` varchar(100) NOT NULL COMMENT "",\n    `s_region` varchar(100) NOT NULL COMMENT "",\n    `s_phone` varchar(100) NOT NULL COMMENT "",\n    `p_name` varchar(100) NOT NULL COMMENT "",\n    `p_mfgr` varchar(100) NOT NULL COMMENT "",\n    `p_category` varchar(100) NOT NULL COMMENT "",\n    `p_brand` varchar(100) NOT NULL COMMENT "",\n    `p_color` varchar(100) NOT NULL COMMENT "",\n    `p_type` varchar(100) NOT NULL COMMENT "",\n    `p_size` tinyint(4) NOT NULL COMMENT "",\n    `p_container` varchar(100) NOT NULL COMMENT ""\n)\nENGINE=OLAP \nDUPLICATE KEY(`lo_orderdate`, `lo_orderkey`)\nCOMMENT "olap"\nPARTITION BY RANGE(`lo_orderdate`)\n(PARTITION p1 VALUES [(\'0000-01-01\'), (\'1993-01-01\')),\nPARTITION p2 VALUES [(\'1993-01-01\'), (\'1994-01-01\')),\nPARTITION p3 VALUES [(\'1994-01-01\'), (\'1995-01-01\')),\nPARTITION p4 VALUES [(\'1995-01-01\'), (\'1996-01-01\')),\nPARTITION p5 VALUES [(\'1996-01-01\'), (\'1997-01-01\')),\nPARTITION p6 VALUES [(\'1997-01-01\'), (\'1998-01-01\')),\nPARTITION p7 VALUES [(\'1998-01-01\'), (\'1999-01-01\')))\nDISTRIBUTED BY HASH(`lo_orderkey`)\nPROPERTIES \n(\n    "replication_num" = "1",\n    "colocate_with" = "groupxx1",\n    "storage_format" = "DEFAULT",\n    "enable_persistent_index" = "false",\n    "compression" = "LZ4"\n);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The following two queries, Q1 and Q2, on the table ",(0,s.jsx)(n.code,{children:"lineorder_flat"})," are semantically equivalent after they are processed as follows:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Rearrange the output columns of the SELECT statement."}),"\n",(0,s.jsx)(n.li,{children:"Rearrange the output columns of the GROUP BY clause."}),"\n",(0,s.jsx)(n.li,{children:"Remove the output columns of the ORDER BY clause."}),"\n",(0,s.jsx)(n.li,{children:"Rearrange the predicates in the WHERE clause."}),"\n",(0,s.jsxs)(n.li,{children:["Add ",(0,s.jsx)(n.code,{children:"PartitionColumnRangePredicate"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Q1"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT sum(lo_revenue)), year(lo_orderdate) AS year,p_brand\nFROM lineorder_flat\nWHERE p_category = 'MFGR#12' AND s_region = 'AMERICA'\nGROUP BY year,p_brand\nORDER BY year,p_brand;\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Q2"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT year(lo_orderdate) AS year, p_brand, sum(lo_revenue))\nFROM lineorder_flat\nWHERE s_region = 'AMERICA' AND p_category = 'MFGR#12' AND \n   lo_orderdate >= '1993-01-01' AND lo_orderdate <= '1993-12-31'\nGROUP BY p_brand, year(lo_orderdate)\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Semantic equivalence is evaluated based on the physical plans of queries. Therefore, literal differences in queries do not impact the evaluation for semantic equivalence. Additionally, constant expressions are removed from queries, and ",(0,s.jsx)(n.code,{children:"cast"})," expressions are removed during query optimizations. Therefore, these expressions do not impact the evaluation for semantic equivalence. Thirdly, the aliases of columns and relations do not impact the evaluation for semantic equivalence either."]}),"\n",(0,s.jsx)(n.h3,{id:"queries-with-overlapping-scanned-partitions",children:"Queries with overlapping scanned partitions"}),"\n",(0,s.jsx)(n.p,{children:"Query Cache supports predicate-based query splitting."}),"\n",(0,s.jsx)(n.p,{children:"Splitting queries based on predicate semantics help implement reuse of partial computation results. When a query contains a predicate that references the partitioning column of a table and the predicate specifies a value range, StarRocks can split the range into multiple intervals based on table partitioning. The computation results from each individual interval can be separately reused by other queries."}),"\n",(0,s.jsxs)(n.p,{children:["Use the following table ",(0,s.jsx)(n.code,{children:"t0"})," as an example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'CREATE TABLE if not exists t0\n(\n    ts DATETIME NOT NULL,\n    k0 VARCHAR(10) NOT NULL,\n    k1 BIGINT NOT NULL,\n    v1 DECIMAL64(7, 2) NOT NULL \n)\nENGINE=OLAP\nDUPLICATE KEY(`ts`, `k0`, `k1`)\nCOMMENT "OLAP"\nPARTITION BY RANGE(ts)\n(\n  START ("2022-01-01 00:00:00") END ("2022-02-01 00:00:00") EVERY (INTERVAL 1 day) \n)\nDISTRIBUTED BY HASH(`ts`, `k0`, `k1`)\nPROPERTIES\n(\n    "replication_num" = "1", \n    "storage_format" = "default"\n);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The table ",(0,s.jsx)(n.code,{children:"t0"})," is partitioned by day, and the column ",(0,s.jsx)(n.code,{children:"ts"})," is the table's partitioning column. Among the following four queries, Q2, Q3, and Q4 can reuse portions of the computation results cached for Q1:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Q1"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT date_trunc('day', ts) as day, sum(v0)\nFROM t0\nWHERE ts BETWEEN '2022-01-02 12:30:00' AND '2022-01-14 23:59:59'\nGROUP BY day;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The value range specified by the predicate ",(0,s.jsx)(n.code,{children:"ts between '2022-01-02 12:30:00' and '2022-01-14 23:59:59'"})," of Q1 can be split into the following intervals:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"1. [2022-01-02 12:30:00, 2022-01-03 00:00:00),\n2. [2022-01-03 00:00:00, 2022-01-04 00:00:00),\n3. [2022-01-04 00:00:00, 2022-01-05 00:00:00),\n...\n12. [2022-01-13 00:00:00, 2022-01-14 00:00:00),\n13. [2022-01-14 00:00:00, 2022-01-15 00:00:00),\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Q2"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT date_trunc('day', ts) as day, sum(v0)\nFROM t0\nWHERE ts >= '2022-01-02 12:30:00' AND  ts < '2022-01-05 00:00:00'\nGROUP BY day;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Q2 can reuse the computation results within the following intervals of Q1:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"1. [2022-01-02 12:30:00, 2022-01-03 00:00:00),\n2. [2022-01-03 00:00:00, 2022-01-04 00:00:00),\n3. [2022-01-04 00:00:00, 2022-01-05 00:00:00),\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Q3"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT date_trunc('day', ts) as day, sum(v0)\nFROM t0\nWHERE ts >= '2022-01-01 12:30:00' AND  ts <= '2022-01-10 12:00:00'\nGROUP BY day;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Q3 can reuse the computation results within the following intervals of Q1:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"2. [2022-01-03 00:00:00, 2022-01-04 00:00:00),\n3. [2022-01-04 00:00:00, 2022-01-05 00:00:00),\n...\n8. [2022-01-09 00:00:00, 2022-01-10 00:00:00),\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Q4"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT date_trunc('day', ts) as day, sum(v0)\nFROM t0\nWHERE ts BETWEEN '2022-01-02 12:30:00' and '2022-01-02 23:59:59'\nGROUP BY day;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Q4 can reuse the computation results within the following intervals of Q1:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"1. [2022-01-02 12:30:00, 2022-01-03 00:00:00),\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The support for reuse of partial computation results varies depending on the partitioning policy used, as described in the following table."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Partitioning policy"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Support for reuse of partial computation results"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Unpartitioned"}),(0,s.jsx)(n.td,{children:"Not supported"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Multi-Column Partitioned"}),(0,s.jsxs)(n.td,{children:["Not supported",(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"NOTE"}),(0,s.jsx)("br",{}),"This feature may be supported in the future."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Single-Column Partitioned"}),(0,s.jsx)(n.td,{children:"Supported"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"queries-against-data-with-append-only-data-changes",children:"Queries against data with append-only data changes"}),"\n",(0,s.jsx)(n.p,{children:"Query Cache supports multi-version caching."}),"\n",(0,s.jsx)(n.p,{children:"As data loads are made, new versions of tablets are generated. Consequently, the cached computation results that are generated from the previous versions of the tablets become stale and lag behind the latest tablet versions. In this situation, the multi-version caching mechanism tries to merge the stale results saved in the query cache and the incremental versions of the tablets stored on disk into the final results of the tablets so that new queries can carry the latest tablet versions. Multi-version caching is constrained by table types, query types, and data update types."}),"\n",(0,s.jsx)(n.p,{children:"The support for multi-version caching varies depending on table types and query types, as described in the following table."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Table type"})}),(0,s.jsxs)(n.th,{children:[(0,s.jsx)(n.strong,{children:"Query"})," ",(0,s.jsx)(n.strong,{children:"type"})]}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Support for multi-version caching"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Duplicate Key table"}),(0,s.jsx)(n.td,{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Queries on base tables"}),(0,s.jsx)("li",{children:"Queries on synchronous materialized views"})]})}),(0,s.jsx)(n.td,{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Queries on base tables: supported in all situations except when incremental tablet versions contain data deletion records."}),(0,s.jsx)("li",{children:"Queries on synchronous materialized views: supported in all situations except when the GROUP BY, HAVING, or WHERE clauses of queries reference aggregation columns."})]})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Aggregate table"}),(0,s.jsx)(n.td,{children:"Queries on base tables or queries on synchronous materialized views"}),(0,s.jsxs)(n.td,{children:["Supported in all situations except the following",(0,s.jsx)(n.div,{})," schemas of base tables contain the aggregate function ",(0,s.jsx)(n.code,{children:"replace"}),".The GROUP BY, HAVING, or WHERE clauses of queries reference aggregation columns.Incremental tablet versions contain data deletion records."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Unique Key table"}),(0,s.jsx)(n.td,{children:"N/A"}),(0,s.jsx)(n.td,{children:"Not supported. However, the query cache is supported."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Primary Key table"}),(0,s.jsx)(n.td,{children:"N/A"}),(0,s.jsx)(n.td,{children:"Not supported. However, the query cache is supported."})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"The impact of data update types on multi-version caching is as follows:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Data deletions"}),"\n",(0,s.jsx)(n.p,{children:"Multi-version caching cannot work if incremental versions of tablets contain delete operations."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Data insertions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If an empty version is generated for a tablet, the existing data of the tablet in the query cache remains valid and can still be retrieved."}),"\n",(0,s.jsx)(n.li,{children:"If a non-empty version is generated for a tablet, the existing data of the tablet in the query cache remains valid, but its version lags behind the latest version of the tablet. In this situation, StarRocks reads the incremental data generated from the version of the existing data to the latest version of the tablet, merges the existing data with the incremental data, and populates the merged data into the query cache."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Schema changes and tablet truncations"}),"\n",(0,s.jsx)(n.p,{children:"If the schema of a table is changed or specific tablets of the table are truncated, new tablets are generated for the table. As a result, the existing data of the tablets of the table in the query cache becomes invalid."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"metrics",children:"Metrics"}),"\n",(0,s.jsxs)(n.p,{children:["The profiles of queries for which the query cache works contain ",(0,s.jsx)(n.code,{children:"CacheOperator"})," statistics."]}),"\n",(0,s.jsxs)(n.p,{children:["In the source plan of a query, if the pipeline contains ",(0,s.jsx)(n.code,{children:"OlapScanOperator"}),", the names of ",(0,s.jsx)(n.code,{children:"OlapScanOperator"})," and aggregate operators are prefixed with ",(0,s.jsx)(n.code,{children:"ML_"})," to denote that the pipeline uses ",(0,s.jsx)(n.code,{children:"MultilaneOperator"})," to perform per-tablet computations. ",(0,s.jsx)(n.code,{children:"CacheOperator"})," is inserted preceding ",(0,s.jsx)(n.code,{children:"ML_CONJUGATE_AGGREGATE"})," to process the logic that controls how the query cache runs in Passthrough, Populate, and Probe modes. The profile of the query contains the following ",(0,s.jsx)(n.code,{children:"CacheOperator"})," metrics that help you understand the query cache usage."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Metric"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Description"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CachePassthroughBytes"}),(0,s.jsx)(n.td,{children:"The number of bytes generated in Passthrough mode."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CachePassthroughChunkNum"}),(0,s.jsx)(n.td,{children:"The number of chunks generated in Passthrough mode."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CachePassthroughRowNum"}),(0,s.jsx)(n.td,{children:"The number of rows generated in Passthrough mode."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CachePassthroughTabletNum"}),(0,s.jsx)(n.td,{children:"The number of tablets generated in Passthrough mode."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CachePassthroughTime:"}),(0,s.jsx)(n.td,{children:"The amount of computation time taken in Passthrough mode."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CachePopulateBytes"}),(0,s.jsx)(n.td,{children:"The number of bytes generated in Populate mode."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CachePopulateChunkNum"}),(0,s.jsx)(n.td,{children:"The number of chunks generated in Populate mode."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CachePopulateRowNum"}),(0,s.jsx)(n.td,{children:"The number of rows generated in Populate mode."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CachePopulateTabletNum"}),(0,s.jsx)(n.td,{children:"The number of tablets generated in Populate mode."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CachePopulateTime"}),(0,s.jsx)(n.td,{children:"The amount of computation time taken in Populate mode."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CacheProbeBytes"}),(0,s.jsx)(n.td,{children:"The number of bytes generated for cache hits in Probe mode."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CacheProbeChunkNum"}),(0,s.jsx)(n.td,{children:"The number of chunks generated for cache hits in Probe mode."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CacheProbeRowNum"}),(0,s.jsx)(n.td,{children:"The number of rows generated for cache hits in Probe mode."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CacheProbeTabletNum"}),(0,s.jsx)(n.td,{children:"The number of tablets generated for cache hits in Probe mode."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CacheProbeTime"}),(0,s.jsx)(n.td,{children:"The amount of computation time taken in Probe mode."})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"CachePopulate"}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"XXX"})})," metrics provide statistics about query cache misses for which the query cache is updated."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"CachePassthrough"}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"XXX"})})," metrics provide statistics about query cache misses for which the query cache is not updated because the size of per-tablet computation results generated is large."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"CacheProbe"}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"XXX"})})," metrics provide statistics about query cache hits."]}),"\n",(0,s.jsxs)(n.p,{children:["In the multi-version caching mechanism, ",(0,s.jsx)(n.code,{children:"CachePopulate"})," metrics and ",(0,s.jsx)(n.code,{children:"CacheProbe"})," metrics may contain the same tablet statistics, and ",(0,s.jsx)(n.code,{children:"CachePassthrough"})," metrics and ",(0,s.jsx)(n.code,{children:"CacheProbe"})," metrics may also contain the same tablet statistics. For example, when StarRocks computes the data of each tablet, it hits the computation results generated on the historical version of the tablet. In this situation, StarRocks reads the incremental data generated from the historical version to the latest version of the tablet, computes the data, and merges the incremental data with the cached data. If the size of the computation results generated after the merging does not exceed the threshold specified by the ",(0,s.jsx)(n.code,{children:"query_cache_entry_max_bytes"})," or ",(0,s.jsx)(n.code,{children:"query_cache_entry_max_rows"})," parameter, the statistics of the tablet are collected into ",(0,s.jsx)(n.code,{children:"CachePopulate"})," metrics. Otherwise, the statistics of the tablet are collected into ",(0,s.jsx)(n.code,{children:"CachePassthrough"})," metrics."]}),"\n",(0,s.jsx)(n.h2,{id:"restful-api-operations",children:"RESTful API operations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"metrics |grep query_cache"})}),"\n",(0,s.jsx)(n.p,{children:"This API operation is used to query the metrics related to the query cache."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"curl -s  http://<be_host>:<be_http_port>/metrics |grep query_cache\n\n# TYPE starrocks_be_query_cache_capacity gauge\nstarrocks_be_query_cache_capacity 536870912\n# TYPE starrocks_be_query_cache_hit_count gauge\nstarrocks_be_query_cache_hit_count 5084393\n# TYPE starrocks_be_query_cache_hit_ratio gauge\nstarrocks_be_query_cache_hit_ratio 0.984098\n# TYPE starrocks_be_query_cache_lookup_count gauge\nstarrocks_be_query_cache_lookup_count 5166553\n# TYPE starrocks_be_query_cache_usage gauge\nstarrocks_be_query_cache_usage 0\n# TYPE starrocks_be_query_cache_usage_ratio gauge\nstarrocks_be_query_cache_usage_ratio 0.000000\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"api/query_cache/stat"})}),"\n",(0,s.jsx)(n.p,{children:"This API operation is used to query the usage of the query cache."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'curl  http://<be_host>:<be_http_port>/api/query_cache/stat\n{\n    "capacity": 536870912,\n    "usage": 0,\n    "usage_ratio": 0.0,\n    "lookup_count": 5025124,\n    "hit_count": 4943720,\n    "hit_ratio": 0.983800598751394\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"api/query_cache/invalidate_all"})}),"\n",(0,s.jsx)(n.p,{children:"This API operation is used to clear the query cache."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'curl  -XPUT http://<be_host>:<be_http_port>/api/query_cache/invalidate_all\n\n{\n    "status": "OK"\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The parameters in the preceding API operations are as follows:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"be_host"}),": the IP address of the node on which the BE resides."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"be_http_port"}),": the HTTP port number of the node on which the BE resides."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"precautions",children:"Precautions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"StarRocks needs to populate the query cache with the computation results of queries that are initiated for the first time. As a result, the query performance may be slightly lower than expected, and the query latency is increased."}),"\n",(0,s.jsx)(n.li,{children:"If you configure a large query cache size, the amount of memory that can be provisioned to query evaluation on the BE is decreased. We recommend that the query cache size do not exceed 1/6 of the memory capacity provisioned to query evaluation."}),"\n",(0,s.jsxs)(n.li,{children:["If the number of tablets that need to be processed is smaller than the value of ",(0,s.jsx)(n.code,{children:"pipeline_dop"}),", the query cache does not work. To enable the query cache to work, you can set ",(0,s.jsx)(n.code,{children:"pipeline_dop"})," to a smaller value such as ",(0,s.jsx)(n.code,{children:"1"}),". From v3.0 onwards, StarRocks adaptively adjusts this parameter based on query parallelism."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"dataset",children:"Dataset"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Log in to your StarRocks cluster, go to the destination database, and run the following command to create a table named ",(0,s.jsx)(n.code,{children:"t0"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'CREATE TABLE t0\n(\n      `ts` datetime NOT NULL COMMENT "",\n      `k0` varchar(10) NOT NULL COMMENT "",\n      `k1` char(6) NOT NULL COMMENT "",\n      `v0` bigint(20) NOT NULL COMMENT "",\n      `v1` decimal64(7, 2) NOT NULL COMMENT ""\n)\nENGINE=OLAP \nDUPLICATE KEY(`ts`, `k0`, `k1`)\nCOMMENT "OLAP"\nPARTITION BY RANGE(`ts`)\n(\n    START ("2022-01-01 00:00:00") END ("2022-02-01 00:00:00") EVERY (INTERVAL 1 DAY)\n)\nDISTRIBUTED BY HASH(`ts`, `k0`, `k1`)\nPROPERTIES\n(\n    "replication_num" = "1",\n    "storage_format" = "DEFAULT",\n    "enable_persistent_index" = "false"\n);\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Insert the following data records into ",(0,s.jsx)(n.code,{children:"t0"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"INSERT INTO t0\nVALUES\n    ('2022-01-11 20:42:26', 'n4AGcEqYp', 'hhbawx', '799393174109549', '8029.42'),\n    ('2022-01-27 18:17:59', 'i66lt', 'mtrtzf', '100400167', '10000.88'),\n    ('2022-01-28 20:10:44', 'z6', 'oqkeun', '-58681382337', '59881.87'),\n    ('2022-01-29 14:54:31', 'qQ', 'dzytua', '-19682006834', '43807.02'),\n    ('2022-01-31 08:08:11', 'qQ', 'dzytua', '7970665929984223925', '-8947.74'),\n    ('2022-01-15 00:40:58', '65', 'hhbawx', '4054945', '156.56'),\n    ('2022-01-24 16:17:51', 'onqR3JsK1', 'udtmfp', '-12962', '-72127.53'),\n    ('2022-01-01 22:36:24', 'n4AGcEqYp', 'fabnct', '-50999821', '17349.85'),\n    ('2022-01-21 08:41:50', 'Nlpz1j3h', 'dzytua', '-60162', '287.06'),\n    ('2022-01-30 23:44:55', '', 'slfght', '62891747919627339', '8014.98'),\n    ('2022-01-18 19:14:28', 'z6', 'dzytua', '-1113001726', '73258.24'),\n    ('2022-01-30 14:54:59', 'z6', 'udtmfp', '111175577438857975', '-15280.41'),\n    ('2022-01-08 22:08:26', 'z6', 'ympyls', '3', '2.07'),\n    ('2022-01-03 08:17:29', 'Nlpz1j3h', 'udtmfp', '-234492', '217.58'),\n    ('2022-01-27 07:28:47', 'Pc', 'cawanm', '-1015', '-20631.50'),\n    ('2022-01-17 14:07:47', 'Nlpz1j3h', 'lbsvqu', '2295574006197343179', '93768.75'),\n    ('2022-01-31 14:00:12', 'onqR3JsK1', 'umlkpo', '-227', '-66199.05'),\n    ('2022-01-05 20:31:26', '65', 'lbsvqu', '684307', '36412.49'),\n    ('2022-01-06 00:51:34', 'z6', 'dzytua', '11700309310', '-26064.10'),\n    ('2022-01-26 02:59:00', 'n4AGcEqYp', 'slfght', '-15320250288446', '-58003.69'),\n    ('2022-01-05 03:26:26', 'z6', 'cawanm', '19841055192960542', '-5634.36'),\n    ('2022-01-17 08:51:23', 'Pc', 'ghftus', '35476438804110', '13625.99'),\n    ('2022-01-30 18:56:03', 'n4AGcEqYp', 'lbsvqu', '3303892099598', '8.37'),\n    ('2022-01-22 14:17:18', 'i66lt', 'umlkpo', '-27653110', '-82306.25'),\n    ('2022-01-02 10:25:01', 'qQ', 'ghftus', '-188567166', '71442.87'),\n    ('2022-01-30 04:58:14', 'Pc', 'ympyls', '-9983', '-82071.59'),\n    ('2022-01-05 00:16:56', '7Bh', 'hhbawx', '43712', '84762.97'),\n    ('2022-01-25 03:25:53', '65', 'mtrtzf', '4604107', '-2434.69'),\n    ('2022-01-27 21:09:10', '65', 'udtmfp', '476134823953365199', '38736.04'),\n    ('2022-01-11 13:35:44', '65', 'qmwhvr', '1', '0.28'),\n    ('2022-01-03 19:13:07', '', 'lbsvqu', '11', '-53084.04'),\n    ('2022-01-20 02:27:25', 'i66lt', 'umlkpo', '3218824416', '-71393.20'),\n    ('2022-01-04 04:52:36', '7Bh', 'ghftus', '-112543071', '-78377.93'),\n    ('2022-01-27 18:27:06', 'Pc', 'umlkpo', '477', '-98060.13'),\n    ('2022-01-04 19:40:36', '', 'udtmfp', '433677211', '-99829.94'),\n    ('2022-01-20 23:19:58', 'Nlpz1j3h', 'udtmfp', '361394977', '-19284.18'),\n    ('2022-01-05 02:17:56', 'Pc', 'oqkeun', '-552390906075744662', '-25267.92'),\n    ('2022-01-02 16:14:07', '65', 'dzytua', '132', '2393.77'),\n    ('2022-01-28 23:17:14', 'z6', 'umlkpo', '61', '-52028.57'),\n    ('2022-01-12 08:05:44', 'qQ', 'hhbawx', '-9579605666539132', '-87801.81'),\n    ('2022-01-31 19:48:22', 'z6', 'lbsvqu', '9883530877822', '34006.42'),\n    ('2022-01-11 20:38:41', '', 'piszhr', '56108215256366', '-74059.80'),\n    ('2022-01-01 04:15:17', '65', 'cawanm', '-440061829443010909', '88960.51'),\n    ('2022-01-05 07:26:09', 'qQ', 'umlkpo', '-24889917494681901', '-23372.12'),\n    ('2022-01-29 18:13:55', 'Nlpz1j3h', 'cawanm', '-233', '-24294.42'),\n    ('2022-01-10 00:49:45', 'Nlpz1j3h', 'ympyls', '-2396341', '77723.88'),\n    ('2022-01-29 08:02:58', 'n4AGcEqYp', 'slfght', '45212', '93099.78'),\n    ('2022-01-28 08:59:21', 'onqR3JsK1', 'oqkeun', '76', '-78641.65'),\n    ('2022-01-26 14:29:39', '7Bh', 'umlkpo', '176003552517', '-99999.96'),\n    ('2022-01-03 18:53:37', '7Bh', 'piszhr', '3906151622605106', '55723.01'),\n    ('2022-01-04 07:08:19', 'i66lt', 'ympyls', '-240097380835621', '-81800.87'),\n    ('2022-01-28 14:54:17', 'Nlpz1j3h', 'slfght', '-69018069110121', '90533.64'),\n    ('2022-01-22 07:48:53', 'Pc', 'ympyls', '22396835447981344', '-12583.39'),\n    ('2022-01-22 07:39:29', 'Pc', 'uqkghp', '10551305', '52163.82'),\n    ('2022-01-08 22:39:47', 'Nlpz1j3h', 'cawanm', '67905472699', '87831.30'),\n    ('2022-01-05 14:53:34', '7Bh', 'dzytua', '-779598598706906834', '-38780.41'),\n    ('2022-01-30 17:34:41', 'onqR3JsK1', 'oqkeun', '346687625005524', '-62475.31'),\n    ('2022-01-29 12:14:06', '', 'qmwhvr', '3315', '22076.88'),\n    ('2022-01-05 06:47:04', 'Nlpz1j3h', 'udtmfp', '-469', '42747.17'),\n    ('2022-01-19 15:20:20', '7Bh', 'lbsvqu', '347317095885', '-76393.49'),\n    ('2022-01-08 16:18:22', 'z6', 'fghmcd', '2', '90315.60'),\n    ('2022-01-02 00:23:06', 'Pc', 'piszhr', '-3651517384168400', '58220.34'),\n    ('2022-01-12 08:23:31', 'onqR3JsK1', 'udtmfp', '5636394870355729225', '33224.25'),\n    ('2022-01-28 10:46:44', 'onqR3JsK1', 'oqkeun', '-28102078612755', '6469.53'),\n    ('2022-01-23 23:16:11', 'onqR3JsK1', 'ghftus', '-707475035515433949', '63422.66'),\n    ('2022-01-03 05:32:31', 'z6', 'hhbawx', '-45', '-49680.52'),\n    ('2022-01-27 03:24:33', 'qQ', 'qmwhvr', '375943906057539870', '-66092.96'),\n    ('2022-01-25 20:07:22', '7Bh', 'slfght', '1', '72440.21'),\n    ('2022-01-04 16:07:24', 'qQ', 'uqkghp', '751213107482249', '16417.31'),\n    ('2022-01-23 19:22:00', 'Pc', 'hhbawx', '-740731249600493', '88439.40'),\n    ('2022-01-05 09:04:20', '7Bh', 'cawanm', '23602', '302.44');\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"query-examples",children:"Query examples"}),"\n",(0,s.jsx)(n.p,{children:"The statistics of query cache-related metrics in this section are examples and are for reference only."}),"\n",(0,s.jsx)(n.h4,{id:"query-cache-works-for-local-aggregations-at-stage-1",children:"Query cache works for local aggregations at stage 1"}),"\n",(0,s.jsx)(n.p,{children:"This includes three situations:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The query accesses only a single tablet."}),"\n",(0,s.jsx)(n.li,{children:"The query accesses multiple tablets from multiple partitions of a table that itself comprises a colocated group, and data does not need to be shuffled for aggregations."}),"\n",(0,s.jsx)(n.li,{children:"The query accesses multiple tablets from the same partition of a table, and data does not need to be shuffled for aggregations."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Query example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT\n    date_trunc('hour', ts) AS hour,\n    k0,\n    sum(v1) AS __c_0\nFROM\n    t0\nWHERE\n    ts between '2022-01-03 00:00:00'\n    and '2022-01-03 23:59:59'\nGROUP BY\n    date_trunc('hour', ts),\n    k0\n"})}),"\n",(0,s.jsx)(n.p,{children:"The following figure shows the query cache-related metrics in the query profile."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Query Cache - Stage 1 - Metrics",src:t(87663).Z+"",width:"1010",height:"1188"})}),"\n",(0,s.jsx)(n.h4,{id:"query-cache-does-not-work-for-remote-aggregations-at-stage-1",children:"Query cache does not work for remote aggregations at stage 1"}),"\n",(0,s.jsx)(n.p,{children:"When aggregations on multiple tablets are forcibly performed at stage 1, data is first shuffled and then aggregated."}),"\n",(0,s.jsx)(n.p,{children:"Query example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SET new_planner_agg_stage = 1;\n\nSELECT\n    date_trunc('hour', ts) AS hour,\n    v0 % 2 AS is_odd,\n    sum(v1) AS __c_0\nFROM\n    t0\nWHERE\n    ts between '2022-01-03 00:00:00'\n    and '2022-01-03 23:59:59'\nGROUP BY\n    date_trunc('hour', ts),\n    is_odd\n"})}),"\n",(0,s.jsx)(n.h4,{id:"query-cache-works-for-local-aggregations-at-stage-2",children:"Query cache works for local aggregations at stage 2"}),"\n",(0,s.jsx)(n.p,{children:"This includes three situations:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The aggregations at stage 2 of the query are compiled to compare the same type of data. The first aggregation is a local aggregation. After the first aggregation is complete, the results generated from the first aggregation are computed to perform a second aggregation, which is a global aggregation."}),"\n",(0,s.jsx)(n.li,{children:"The query is a SELECT DISTINCT query."}),"\n",(0,s.jsxs)(n.li,{children:["The query includes one of the following DISTINCT aggregate functions: ",(0,s.jsx)(n.code,{children:"sum(distinct)"}),", ",(0,s.jsx)(n.code,{children:"count(distinct)"}),", and ",(0,s.jsx)(n.code,{children:"avg(distinct)"}),". In most cases, aggregations are performed at stage 3 or 4 for such a query. However, you can run ",(0,s.jsx)(n.code,{children:"set new_planner_agg_stage = 1"})," to forcibly perform aggregations at stage 2 for the query. If the query contains ",(0,s.jsx)(n.code,{children:"avg(distinct)"})," and you want to perform aggregations at stage, you also need to run ",(0,s.jsx)(n.code,{children:"set cbo_cte_reuse = false"})," to disable CTE optimizations."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Query example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT\n    date_trunc('hour', ts) AS hour,\n    v0 % 2 AS is_odd,\n    sum(v1) AS __c_0\nFROM\n    t0\nWHERE\n    ts between '2022-01-03 00:00:00'\n    and '2022-01-03 23:59:59'\nGROUP BY\n    date_trunc('hour', ts),\n    is_odd\n"})}),"\n",(0,s.jsx)(n.p,{children:"The following figure shows the query cache-related metrics in the query profile."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Query Cache - Stage 2 - Metrics",src:t(13690).Z+"",width:"990",height:"1154"})}),"\n",(0,s.jsx)(n.h4,{id:"query-cache-works-for-local-aggregations-at-stage-3",children:"Query cache works for local aggregations at stage 3"}),"\n",(0,s.jsx)(n.p,{children:"The query is a GROUP BY aggregate query that includes a single DISTINCT aggregate function."}),"\n",(0,s.jsxs)(n.p,{children:["The supported DISTINCT aggregate functions are ",(0,s.jsx)(n.code,{children:"sum(distinct)"}),", ",(0,s.jsx)(n.code,{children:"count(distinct)"}),", and ",(0,s.jsx)(n.code,{children:"avg(distinct)"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"NOTICE"})}),"\n",(0,s.jsxs)(n.p,{children:["If the query includes ",(0,s.jsx)(n.code,{children:"avg(distinct)"}),", you also need to run ",(0,s.jsx)(n.code,{children:"set cbo_cte_reuse = false"})," to disable CTE optimizations."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Query example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT\n    date_trunc('hour', ts) AS hour,\n    v0 % 2 AS is_odd,\n    sum(distinct v1) AS __c_0\nFROM\n    t0\nWHERE\n    ts between '2022-01-03 00:00:00'\n    and '2022-01-03 23:59:59'\nGROUP BY\n    date_trunc('hour', ts),\n    is_odd;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The following figure shows the query cache-related metrics in the query profile."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Query Cache - Stage 3 - Metrics",src:t(24952).Z+"",width:"988",height:"1166"})}),"\n",(0,s.jsx)(n.h4,{id:"query-cache-works-for-local-aggregations-at-stage-4",children:"Query cache works for local aggregations at stage 4"}),"\n",(0,s.jsx)(n.p,{children:"The query is a non-GROUP BY aggregate query that includes a single DISTINCT aggregate function. Such queries include classical queries that remove deduplicate data."}),"\n",(0,s.jsx)(n.p,{children:"Query example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT\n    count(distinct v1) AS __c_0\nFROM\n    t0\nWHERE\n    ts between '2022-01-03 00:00:00'\n    and '2022-01-03 23:59:59'\n"})}),"\n",(0,s.jsx)(n.p,{children:"The following figure shows the query cache-related metrics in the query profile."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Query Cache - Stage 4 - Metrics",src:t(18822).Z+"",width:"950",height:"1156"})}),"\n",(0,s.jsx)(n.h4,{id:"cached-results-are-reused-for-two-queries-whose-first-aggregations-are-semantically-equivalent",children:"Cached results are reused for two queries whose first aggregations are semantically equivalent"}),"\n",(0,s.jsx)(n.p,{children:"Use the following two queries, Q1 and Q2, as an example. Q1 and Q2 both include multiple aggregations, but their first aggregations are semantically equivalent. Therefore, Q1 and Q2 are evaluated as semantically equivalent, and can reuse each other's computation results saved in the query cache."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Q1"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT\n    (\n        ifnull(sum(murmur_hash3_32(hour)), 0) + ifnull(sum(murmur_hash3_32(k0)), 0) + ifnull(sum(murmur_hash3_32(__c_0)), 0)\n      ) AS fingerprint\nFROM\n    (\n        SELECT\n            date_trunc('hour', ts) AS hour,\n            k0,\n            sum(v1) AS __c_0\n        FROM\n            t0\n        WHERE\n            ts between '2022-01-03 00:00:00'\n            and '2022-01-03 23:59:59'\n        GROUP BY\n            date_trunc('hour', ts),\n            k0\n    ) AS t;\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Q2"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT\n    date_trunc('hour', ts) AS hour,\n    k0,\n    sum(v1) AS __c_0\nFROM\n    t0\nWHERE\n    ts between '2022-01-03 00:00:00'\n    and '2022-01-03 23:59:59'\nGROUP BY\n    date_trunc('hour', ts),\n    k0\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The following figure shows the ",(0,s.jsx)(n.code,{children:"CachePopulate"})," metrics for Q1."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Query Cache - Q1 - Metrics",src:t(85223).Z+"",width:"1002",height:"1156"})}),"\n",(0,s.jsxs)(n.p,{children:["The following figure shows the ",(0,s.jsx)(n.code,{children:"CacheProbe"})," metrics for Q2."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Query Cache - Q2 - Metrics",src:t(50061).Z+"",width:"982",height:"1160"})}),"\n",(0,s.jsx)(n.h4,{id:"query-cache-does-not-work-for-distinct-queries-for-which-cte-optimizations-are-enabled",children:"Query cache does not work for DISTINCT queries for which CTE optimizations are enabled"}),"\n",(0,s.jsxs)(n.p,{children:["After you run ",(0,s.jsx)(n.code,{children:"set cbo_cte_reuse = true"})," to enable CTE optimizations, the computation results for specific queries that include DISTINCT aggregate functions cannot be cached. A few examples are as follows:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The query contains a single DISTINCT aggregate function ",(0,s.jsx)(n.code,{children:"avg(distinct)"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT\n    avg(distinct v1) AS __c_0\nFROM\n    t0\nWHERE\n    ts between '2022-01-03 00:00:00'\n    and '2022-01-03 23:59:59';\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Query Cache - CTE - 1",src:t(4083).Z+"",width:"1084",height:"1166"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The query contains multiple DISTINCT aggregate functions that reference the same column:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT\n    avg(distinct v1) AS __c_0,\n    sum(distinct v1) AS __c_1,\n    count(distinct v1) AS __c_2\nFROM\n    t0\nWHERE\n    ts between '2022-01-03 00:00:00'\n    and '2022-01-03 23:59:59';\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Query Cache - CTE - 2",src:t(92371).Z+"",width:"1130",height:"1202"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The query contains multiple DISTINCT aggregate functions that each reference a different column:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT\n    sum(distinct v1) AS __c_1,\n    count(distinct v0) AS __c_2\nFROM\n    t0\nWHERE\n    ts between '2022-01-03 00:00:00'\n    and '2022-01-03 23:59:59';\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Query Cache - CTE - 3",src:t(58931).Z+"",width:"1044",height:"1214"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best practices"}),"\n",(0,s.jsx)(n.p,{children:"When you create your table, specify a reasonable partition description and a reasonable distribution method, including:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Choose a single DATE-type column as the partition column. If the table contains more than one DATE-type column, choose the column whose values roll forward as data is incrementally ingested and that is used to define your interesting time ranges of queries."}),"\n",(0,s.jsx)(n.li,{children:"Choose a proper partition width. The data ingested most recently may modify the latest partitions of the table. Therefore, the cache entries involving the latest partitions are unstable and are apt to be invalidated."}),"\n",(0,s.jsxs)(n.li,{children:["Specify a bucket number that is several dozen in the distribution description of the table creation statement. If the bucket number is exceedingly small, the query cache cannot take effect when the number of tablets that need to be processed by the BE is less than the value of ",(0,s.jsx)(n.code,{children:"pipeline_dop"}),"."]}),"\n"]})]})}const d=function(e={}){const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(h,e)})):h(e)}},4083:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/query_cache_distinct_with_cte_Q1_en-78baec68173add1602ef9b87daeb18ec.png"},92371:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/query_cache_distinct_with_cte_Q2_en-eb3a31a195cdd8ac67d74ed6dac0a98d.png"},58931:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/query_cache_distinct_with_cte_Q3_en-a88efd0f3f2e469cfa5806fd46afc966.png"},81685:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/query_cache_principle-1-c329d56ce0b3bcdc087d70b18c918f9e.png"},50444:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/query_cache_principle-2-86fe9324aebdf60c98a771d256acc14e.png"},85223:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/query_cache_reuse_Q1_en-e7d3ec4680a192e1956c1211cd11c30e.png"},50061:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/query_cache_reuse_Q2_en-181dfb454bbddcc93f88c8aede92558d.png"},87663:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/query_cache_stage1_agg_with_cache_en-9eb1b64beb2c0681cbd7a6438972e727.png"},13690:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/query_cache_stage2_agg_with_cache_en-cea3ccce1963fcdc4eeb3a86af61ed2e.png"},24952:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/query_cache_stage3_agg_with_cache_en-85ffd774bb5a811f21585e207f0654d7.png"},18822:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/query_cache_stage4_agg_with_cache_en-b930e2ae7360201a037c79a27eac5f22.png"},11151:(e,n,t)=>{t.d(n,{Zo:()=>c,ah:()=>r});var s=t(67294);const a=s.createContext({});function r(e){const n=s.useContext(a);return s.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const i={};function c({components:e,children:n,disableParentContext:t}){let c;return c=t?"function"==typeof e?e({}):e||i:r(e),s.createElement(a.Provider,{value:c},n)}}}]);