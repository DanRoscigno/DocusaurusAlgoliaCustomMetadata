"use strict";(self.webpackChunkstarrocks=self.webpackChunkstarrocks||[]).push([[89836],{79504:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var t=s(85893),o=s(11151);const r={displayed_sidebar:"English"},a="to_json",i={id:"sql-reference/sql-functions/json-functions/json-query-and-processing-functions/to_json",title:"to_json",description:"Description",source:"@site/versioned_docs/version-3.1/sql-reference/sql-functions/json-functions/json-query-and-processing-functions/to_json.md",sourceDirName:"sql-reference/sql-functions/json-functions/json-query-and-processing-functions",slug:"/sql-reference/sql-functions/json-functions/json-query-and-processing-functions/to_json",permalink:"/docs/sql-reference/sql-functions/json-functions/json-query-and-processing-functions/to_json",draft:!1,unlisted:!1,editUrl:"https://github.com/StarRocks/starrocks/edit/main/docs/sql-reference/sql-functions/json-functions/json-query-and-processing-functions/to_json.md",tags:[],version:"3.1",frontMatter:{displayed_sidebar:"English"},sidebar:"English",previous:{title:"json_string",permalink:"/docs/sql-reference/sql-functions/json-functions/json-query-and-processing-functions/json_string"},next:{title:"Map Functions",permalink:"/docs/category/map-functions"}},c={},l=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2},{value:"See also",id:"see-also",level:2}];function u(n){const e=Object.assign({h1:"h1",h2:"h2",p:"p",a:"a",pre:"pre",code:"code",ul:"ul",li:"li"},(0,o.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"to_json",children:"to_json"}),"\n",(0,t.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(e.p,{children:"Converts a Map or Struct value into a JSON string. If the input value is NULL, NULL is returned."}),"\n",(0,t.jsxs)(e.p,{children:["If you want to cast values of other data types, see ",(0,t.jsx)(e.a,{href:"/docs/sql-reference/sql-functions/json-functions/json-query-and-processing-functions/cast",children:"cast"}),"."]}),"\n",(0,t.jsx)(e.p,{children:"This function is supported from v3.1 onwards."}),"\n",(0,t.jsx)(e.h2,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-Haskell",children:"to_json(any_value)\n"})}),"\n",(0,t.jsx)(e.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"any_value"}),": the Map or Struct expression you want to convert. If the input value is invalid, an error is returned. The value in each key-value pair of the Map or Struct value is nullable. See the last example."]}),"\n",(0,t.jsx)(e.h2,{id:"return-value",children:"Return value"}),"\n",(0,t.jsx)(e.p,{children:"Returns a JSON value."}),"\n",(0,t.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-Haskell",children:'select to_json(map{1:\'a\',2:\'b\'});\n+---------------------------+\n| to_json(map{1:\'a\',2:\'b\'}) |\n+---------------------------+\n| {"1": "a", "2": "b"}      |\n+---------------------------+\n\nselect to_json(row(\'asia\',\'eu\'));\n+--------------------------------+\n| to_json(row(\'asia\', \'eu\'))     |\n+--------------------------------+\n| {"col1": "asia", "col2": "eu"} |\n+--------------------------------+\n\nselect to_json(map(\'a\', named_struct(\'b\', 1)));\n+----------------------------------------+\n| to_json(map{\'a\':named_struct(\'b\', 1)}) |\n+----------------------------------------+\n| {"a": {"b": 1}}                        |\n+----------------------------------------+\n\nselect to_json(named_struct("k1", cast(null as string), "k2", "v2"));\n+-----------------------------------------------------------------------+\n| to_json(named_struct(\'k1\', CAST(NULL AS VARCHAR(65533)), \'k2\', \'v2\')) |\n+-----------------------------------------------------------------------+\n| {"k1": null, "k2": "v2"}                                              |\n+-----------------------------------------------------------------------+\n'})}),"\n",(0,t.jsx)(e.h2,{id:"see-also",children:"See also"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"/docs/sql-reference/sql-statements/data-types/Map",children:"Map data type"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"/docs/sql-reference/sql-statements/data-types/STRUCT",children:"Struct data type"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"/docs/sql-reference/sql-functions/function-list#map-functions",children:"Map functions"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"/docs/sql-reference/sql-functions/function-list#struct-functions",children:"Struct functions"})}),"\n"]})]})}const d=function(n={}){const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(u,n)})):u(n)}},11151:(n,e,s)=>{s.d(e,{Zo:()=>i,ah:()=>r});var t=s(67294);const o=t.createContext({});function r(n){const e=t.useContext(o);return t.useMemo((()=>"function"==typeof n?n(e):{...e,...n}),[e,n])}const a={};function i({components:n,children:e,disableParentContext:s}){let i;return i=s?"function"==typeof n?n({}):n||a:r(n),t.createElement(o.Provider,{value:i},e)}}}]);