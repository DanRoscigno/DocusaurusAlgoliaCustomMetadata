"use strict";(self.webpackChunkstarrocks=self.webpackChunkstarrocks||[]).push([[14137],{34221:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var i=t(85893),r=t(11151);const s={displayed_sidebar:"English"},a="FAQs",o={id:"quick_start/Test_faq",title:"FAQs",description:"Deployment",source:"@site/versioned_docs/version-2.0/quick_start/Test_faq.md",sourceDirName:"quick_start",slug:"/quick_start/Test_faq",permalink:"/docs/2.0/quick_start/Test_faq",draft:!1,unlisted:!1,editUrl:"https://github.com/StarRocks/starrocks/edit/main/docs/quick_start/Test_faq.md",tags:[],version:"2.0",frontMatter:{displayed_sidebar:"English"},sidebar:"English",previous:{title:"Data import and query",permalink:"/docs/2.0/quick_start/Import_and_query"},next:{title:"Error Codes",permalink:"/docs/2.0/reference/Error_code"}},l={},c=[{value:"Deployment",id:"deployment",level:2},{value:"How to select hardware and optimize configuration",id:"how-to-select-hardware-and-optimize-configuration",level:3},{value:"Hardware Selection",id:"hardware-selection",level:4},{value:"Modeling",id:"modeling",level:2},{value:"Partitioning and bucketing",id:"partitioning-and-bucketing",level:3},{value:"Range partitioning",id:"range-partitioning",level:4},{value:"Hash partitioning",id:"hash-partitioning",level:4},{value:"Sort key",id:"sort-key",level:3},{value:"Data types",id:"data-types",level:3},{value:"Query",id:"query",level:2},{value:"Query parallelism",id:"query-parallelism",level:3},{value:"Use profile to analyze query bottlenecks",id:"use-profile-to-analyze-query-bottlenecks",level:3}];function d(e){const n=Object.assign({h1:"h1",h2:"h2",h3:"h3",h4:"h4",ul:"ul",li:"li",code:"code",strong:"strong"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"faqs",children:"FAQs"}),"\n",(0,i.jsx)(n.h2,{id:"deployment",children:"Deployment"}),"\n",(0,i.jsx)(n.h3,{id:"how-to-select-hardware-and-optimize-configuration",children:"How to select hardware and optimize configuration"}),"\n",(0,i.jsx)(n.h4,{id:"hardware-selection",children:"Hardware Selection"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"For BE, we recommend 16 cores with 64GB or more. For FE, we recommend 8 cores with 16GB or more."}),"\n",(0,i.jsx)(n.li,{children:"HDDs or SSDs can be used."}),"\n",(0,i.jsxs)(n.li,{children:["CPU must support AVX2 instruction sets, use ",(0,i.jsx)(n.code,{children:"cat /proc/cpuinfo |grep avx2"})," to confirm there is output. If not, we recommend replacing the machine. StarRocks' vectorization engine needs CPU instruction sets to perform a better effect."]}),"\n",(0,i.jsx)(n.li,{children:"The network needs 10 GB NIC and 10 GB switch."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"modeling",children:"Modeling"}),"\n",(0,i.jsx)(n.h3,{id:"partitioning-and-bucketing",children:"Partitioning and bucketing"}),"\n",(0,i.jsx)(n.h4,{id:"range-partitioning",children:"Range partitioning"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reasonable range partitioning can reduce the amount of data for scanning. Taking a data management perspective, we normally choose \u201ctime\u201d or \u201cregion\u201d as range partition keys."}),"\n",(0,i.jsx)(n.li,{children:"With dynamic partitioning, you can create partitions automatically at regular intervals (on a daily basis)."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"hash-partitioning",children:"Hash partitioning"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Choose ",(0,i.jsx)(n.strong,{children:"high-cardinality columns"})," as the hash partition key) to ensure that data is balanced among buckets. If a column has a unique ID, use it as the hash partition key. If there is data skew, use multiple columns as the hash partition key but try not to choose too many columns."]}),"\n",(0,i.jsx)(n.li,{children:"The number of buckets affects query parallelism. We recommend setting each bucket around 100MB to 1GB."}),"\n",(0,i.jsxs)(n.li,{children:["To make full use of the limited machine resources, set the number of buckets based on ",(0,i.jsx)(n.code,{children:"Number of BE * cpu core / 2"}),". For example, you have a table with 100GB data and four BEs each of which is 64C. To take full advantage of the CPU resources with only one partition, you can set 144 buckets (",(0,i.jsx)(n.code,{children:"4 * 64 /2  = 144"}),") and each bucket contains 694 MB data."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"sort-key",children:"Sort key"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Design the sort key based on your query needs."}),"\n",(0,i.jsxs)(n.li,{children:["To speed up queries, choose columns ",(0,i.jsx)(n.strong,{children:"that are often used as filter and group by conditions"})," as sort keys."]}),"\n",(0,i.jsxs)(n.li,{children:["If there is ",(0,i.jsx)(n.strong,{children:"a large data-point query"}),", we recommend you to put the query ID in the first column. For example, if the query is ",(0,i.jsx)(n.code,{children:"select sum(revenue) from lineorder where user_id='aaa100'"}),"; and there is high concurrency, we recommend putting ",(0,i.jsx)(n.code,{children:"user\\_id"})," as the first column of the sort key."]}),"\n",(0,i.jsxs)(n.li,{children:["If the query is mainly ",(0,i.jsx)(n.strong,{children:"aggregation and scan"}),", we recommend putting the low-cardinality columns first. For example, if the main type of query is ",(0,i.jsx)(n.code,{children:"select region, nation, count(*) from lineorder_flat group by region, nation"}),", it would be more appropriate to put region as the first column and nation as the second. Putting the low-cardinality columns in front achieves data locality."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"data-types",children:"Data types"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Choose precise data types. In other words, don't use string if you can use int; don't use bigint if you can use int. Precise data types help the database perform better."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"query",children:"Query"}),"\n",(0,i.jsx)(n.h3,{id:"query-parallelism",children:"Query parallelism"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Set the query parallelism via the session variable ",(0,i.jsx)(n.code,{children:"parallel\\_fragment\\_exec\\_instance\\_num"}),". If the query performance is not satisfying but CPU resources are sufficient, adjust the parallelism by setting ",(0,i.jsx)(n.code,{children:"parallel\\_fragment\\_exec\\_instance\\_num = 16;"}),". Parallelism can be set to ",(0,i.jsx)(n.strong,{children:"half the number of CPU cores"})," ."]}),"\n",(0,i.jsxs)(n.li,{children:["To make the session variable globally valid, set",(0,i.jsx)(n.strong,{children:"global"})," ",(0,i.jsx)(n.code,{children:"parallel\\_fragment\\_exec\\_instance\\_num = 16;"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parallel\\_fragment\\_exec\\_instance\\_num"})," is affected by the number of tablets owned by each BE. For example, if a table has 32 tablets and 3 partitions distributed on 4 BEs, then the number of tablets per BE is ",(0,i.jsx)(n.code,{children:"32 * 3 / 4 = 24"}),". In this case, the parallelism value of each BE cannot exceed 24. Even if you set ",(0,i.jsx)(n.code,{children:"parallel\\_fragment\\_exec\\_instance\\_num = 32"}),", the parallelism value will still be 24 during execution."]}),"\n",(0,i.jsxs)(n.li,{children:["To process high QPS queries, we recommend setting  ",(0,i.jsx)(n.code,{children:"parallel\\_fragment\\_exec\\_instance\\_num"})," to ",(0,i.jsx)(n.code,{children:"1"}),". This reduces the competition for resources during querying and therefore improves the QPS."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"use-profile-to-analyze-query-bottlenecks",children:"Use profile to analyze query bottlenecks"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["To view the query plan, use the command ",(0,i.jsx)(n.code,{children:"explain sql"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["To enable profile reporting, set ",(0,i.jsx)(n.code,{children:"is\\_report\\_success = true"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["To view the current query and profile information, go to ",(0,i.jsx)(n.code,{children:"http:FE\\_IP:FE\\_HTTP\\_PORT/queries"}),"."]}),"\n"]})]})}const h=function(e={}){const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(d,e)})):d(e)}},11151:(e,n,t)=>{t.d(n,{Zo:()=>o,ah:()=>s});var i=t(67294);const r=i.createContext({});function s(e){const n=i.useContext(r);return i.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const a={};function o({components:e,children:n,disableParentContext:t}){let o;return o=t?"function"==typeof e?e({}):e||a:s(e),i.createElement(r.Provider,{value:o},n)}}}]);