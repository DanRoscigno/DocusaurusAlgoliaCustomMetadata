"use strict";(self.webpackChunkstarrocks=self.webpackChunkstarrocks||[]).push([[26187],{70335:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var t=s(85893),a=s(11151);const l={displayed_sidebar:"English"},i="CREATE MATERIALIZED VIEW",r={id:"sql-reference/sql-statements/data-definition/CREATE_MATERIALIZED_VIEW",title:"CREATE MATERIALIZED VIEW",description:"description",source:"@site/versioned_docs/version-2.2/sql-reference/sql-statements/data-definition/CREATE_MATERIALIZED_VIEW.md",sourceDirName:"sql-reference/sql-statements/data-definition",slug:"/sql-reference/sql-statements/data-definition/CREATE_MATERIALIZED_VIEW",permalink:"/docs/2.2/sql-reference/sql-statements/data-definition/CREATE_MATERIALIZED_VIEW",draft:!1,unlisted:!1,editUrl:"https://github.com/StarRocks/starrocks/edit/main/docs/sql-reference/sql-statements/data-definition/CREATE_MATERIALIZED_VIEW.md",tags:[],version:"2.2",frontMatter:{displayed_sidebar:"English"},sidebar:"English",previous:{title:"CREATE INDEX",permalink:"/docs/2.2/sql-reference/sql-statements/data-definition/CREATE_INDEX"},next:{title:"CREATE REPOSITORY",permalink:"/docs/2.2/sql-reference/sql-statements/data-definition/CREATE_REPOSITORY"}},c={},d=[{value:"description",id:"description",level:2},{value:"example",id:"example",level:2},{value:"keyword",id:"keyword",level:2}];function o(e){const n=Object.assign({h1:"h1",h2:"h2",p:"p",code:"code",pre:"pre",ol:"ol",li:"li",ul:"ul"},(0,a.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"create-materialized-view",children:"CREATE MATERIALIZED VIEW"}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"description"}),"\n",(0,t.jsx)(n.p,{children:"This statement is used to create materialized views."}),"\n",(0,t.jsx)(n.p,{children:"Note:"}),"\n",(0,t.jsxs)(n.p,{children:["Asynchronous syntax. After the call is successful, it only indicates that the task to create the materialized view is successfully submitted. The user needs to check the progress of the materialized view by using ",(0,t.jsx)(n.code,{children:"show alter table rollup"})," .\nAfter the progress is FINISHED, you can use the ",(0,t.jsx)(n.code,{children:"desc [table_name] all"})," command to check the schema of the materialized view."]}),"\n",(0,t.jsx)(n.p,{children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'CREATE MATERIALIZED VIEW [MV name] as [query]\n[PROPERTIES ("key" = "value")]\n'})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"MV name"}),"\n",(0,t.jsx)(n.p,{children:"Name of the materialized view. Required."}),"\n",(0,t.jsx)(n.p,{children:"Materialized view names in the same table cannot be duplicated."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"query"}),"\n",(0,t.jsx)(n.p,{children:"The query used to construct the materialized view. The result of the query is the data of the materialized view. Currently, the supported query format is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT select_expr[, select_expr ...]\nFROM [Base view name]\nGROUP BY column_name[, column_name ...]\nORDER BY column_name[, column_name ...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"The syntax is the same as the query syntax."}),"\n",(0,t.jsx)(n.p,{children:"select_expr: All columns in the materialized view's schema."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Only single columns and aggregate columns without expression calculation are supported."}),"\n",(0,t.jsx)(n.li,{children:"The aggregate function currently only supports SUM, MIN, MAX, and the parameters of the aggregate function can only be a single column without expression calculation."}),"\n",(0,t.jsx)(n.li,{children:"Contains at least one single column."}),"\n",(0,t.jsx)(n.li,{children:"All involved columns can only appear once."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"base view name: The original table name of the materialized view. Required."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Must be a single table and not a subquery"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"group by: Grouped column of materialized view. Optional."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The data not filled will not be grouped."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"order by: sort order of materialized view. Optional."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The order of the column sort must be the same as the column declaration order in select_expr."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"If order by is not declared, sort columns are automatically supplemented by rules."}),"\n",(0,t.jsx)(n.p,{children:"If the materialized view is of an aggregate type, all grouped columns are automatically supplemented with sort columns."}),"\n",(0,t.jsx)(n.p,{children:"If the materialized view is of a non-aggregated type, the first 36 bytes are automatically supplemented as a sort column."}),"\n",(0,t.jsx)(n.p,{children:"If the number of sorts automatically supplemented is less than three, the first three are sorted."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"If the query contains a grouped column, the sort order must be the same as the grouped column."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"properties"}),"\n",(0,t.jsx)(n.p,{children:"Declare some configuration of materialized view. Optional."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'\nPROPERTIES ("key" = "value", "key" = "value" ...)\n'})}),"\n",(0,t.jsx)(n.p,{children:"The following configurations can be declared here:"}),"\n",(0,t.jsx)(n.p,{children:"short_key: the number of columns.\ntimeout: timeout for materialized view construction."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"example"}),"\n",(0,t.jsx)(n.p,{children:"Base table structure is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"mysql> desc duplicate_table;\n+-------+--------+------+------+---------+-------+\n| Field | Type   | Null | Key  | Default | Extra |\n+-------+--------+------+------+---------+-------+\n| k1    | INT    | Yes  | true | N/A     |       |\n| k2    | INT    | Yes  | true | N/A     |       |\n| k3    | BIGINT | Yes  | true | N/A     |       |\n| k4    | BIGINT | Yes  | true | N/A     |       |\n+-------+--------+------+------+---------+-------+\n"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create a materialized view containing only the columns of the original table (k1, k2)."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"create materialized view k1_k2 as\nselect k1, k2 from duplicate_table;\n"})}),"\n",(0,t.jsx)(n.p,{children:"The materialized view contains only two columns k1, k2 without any aggregation."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",metastring:"text",children:"+-----------------+-------+--------+------+------+---------+-------+\n| IndexName       | Field | Type   | Null | Key  | Default | Extra |\n+-----------------+-------+--------+------+------+---------+-------+\n| k1_k2           | k1    | INT    | Yes  | true | N/A     |       |\n|                 | k2    | INT    | Yes  | true | N/A     |       |\n+-----------------+-------+--------+------+------+---------+-------+\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create a materialized view sorted by k2."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"create materialized view k2_order as\nselect k2, k1 from duplicate_table order by k2;\n"})}),"\n",(0,t.jsx)(n.p,{children:"The materialized view's schema is shown below. The materialized view contains only two columns k2, k1, where column k2 is a sort column without any aggregation."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",metastring:"text",children:"+-----------------+-------+--------+------+-------+---------+-------+\n| IndexName       | Field | Type   | Null | Key   | Default | Extra |\n+-----------------+-------+--------+------+-------+---------+-------+\n| k2_order        | k2    | INT    | Yes  | true  | N/A     |       |\n|                 | k1    | INT    | Yes  | false | N/A     | NONE  |\n+-----------------+-------+--------+------+-------+---------+-------+\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create a materialized view grouped by k1, k2 with k3 as the SUM aggregate."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"create materialized view k1_k2_sumk3 as\nselect k1, k2, sum(k3) from duplicate_table group by k1, k2;\n"})}),"\n",(0,t.jsx)(n.p,{children:"The materialized view's schema is shown below. The materialized view contains two columns k1, k2 and sum (k3), where k1, k2 are grouped columns, and sum (k3) is the sum of the k3 columns grouped according to k1, k2."}),"\n",(0,t.jsx)(n.p,{children:"Because the materialized view does not declare a sort column, and the materialized view has aggregate data, the system supplements the grouped columns k1 and k2 by default."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",metastring:"text",children:"+-----------------+-------+--------+------+-------+---------+-------+\n| IndexName       | Field | Type   | Null | Key   | Default | Extra |\n+-----------------+-------+--------+------+-------+---------+-------+\n| k1_k2_sumk3     | k1    | INT    | Yes  | true  | N/A     |       |\n|                 | k2    | INT    | Yes  | true  | N/A     |       |\n|                 | k3    | BIGINT | Yes  | false | N/A     | SUM   |\n+-----------------+-------+--------+------+-------+---------+-------+\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create a materialized view to remove duplicate rows."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"create materialized view deduplicate as\nselect k1, k2, k3, k4 from duplicate_table group by k1, k2, k3, k4;\n"})}),"\n",(0,t.jsx)(n.p,{children:"The materialized view schema is shown below. The materialized view contains k1, k2, k3, and k4 columns, and there are no duplicate rows."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",metastring:"text",children:"+-----------------+-------+--------+------+-------+---------+-------+\n| IndexName       | Field | Type   | Null | Key   | Default | Extra |\n+-----------------+-------+--------+------+-------+---------+-------+\n| deduplicate     | k1    | INT    | Yes  | true  | N/A     |       |\n|                 | k2    | INT    | Yes  | true  | N/A     |       |\n|                 | k3    | BIGINT | Yes  | true  | N/A     |       |\n|                 | k4    | BIGINT | Yes  | true  | N/A     |       |\n+-----------------+-------+--------+------+-------+---------+-------+\n\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create a non-aggregated materialized view that does not declare a sort column."}),"\n",(0,t.jsx)(n.p,{children:"The schema of all_type_table is shown below:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",metastring:"text",children:"+-------+--------------+------+-------+---------+-------+\n| Field | Type         | Null | Key   | Default | Extra |\n+-------+--------------+------+-------+---------+-------+\n| k1    | TINYINT      | Yes  | true  | N/A     |       |\n| k2    | SMALLINT     | Yes  | true  | N/A     |       |\n| k3    | INT          | Yes  | true  | N/A     |       |\n| k4    | BIGINT       | Yes  | true  | N/A     |       |\n| k5    | DECIMAL(9,0) | Yes  | true  | N/A     |       |\n| k6    | DOUBLE       | Yes  | false | N/A     | NONE  |\n| k7    | VARCHAR(20)  | Yes  | false | N/A     | NONE  |\n+-------+--------------+------+-------+---------+-------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"The materialized view contains k3, k4, k5, k6, k7 columns, and no sort column is declared. The creation statement is as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"create materialized view mv_1 as\nselect k3, k4, k5, k6, k7 from all_type_table;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The system's default supplementary sort columns are k3, k4, and k5. The sum of the number of bytes for these three column types is ",(0,t.jsx)(n.code,{children:"4 (INT) + 8 (BIGINT) + 16 (DECIMAL) = 28 <36"}),". So these three columns are added as sort columns."]}),"\n",(0,t.jsx)(n.p,{children:"The materialized view's schema is as follows. You can see that the key fields of the k3, k4, and k5 columns are true, which is the sort order. The key field of the k6, k7 columns is false, which is the non-sort order."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",metastring:"text",children:"+----------------+-------+--------------+------+-------+---------+-------+\n| IndexName      | Field | Type         | Null | Key   | Default | Extra |\n+----------------+-------+--------------+------+-------+---------+-------+\n| mv_1           | k3    | INT          | Yes  | true  | N/A     |       |\n|                | k4    | BIGINT       | Yes  | true  | N/A     |       |\n|                | k5    | DECIMAL(9,0) | Yes  | true  | N/A     |       |\n|                | k6    | DOUBLE       | Yes  | false | N/A     | NONE  |\n|                | k7    | VARCHAR(20)  | Yes  | false | N/A     | NONE  |\n+----------------+-------+--------------+------+-------+---------+-------+\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"keyword",children:"keyword"}),"\n",(0,t.jsx)(n.p,{children:"CREATE, MATERIALIZED, VIEW"})]})}const h=function(e={}){const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(o,e)})):o(e)}},11151:(e,n,s)=>{s.d(n,{Zo:()=>r,ah:()=>l});var t=s(67294);const a=t.createContext({});function l(e){const n=t.useContext(a);return t.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const i={};function r({components:e,children:n,disableParentContext:s}){let r;return r=s?"function"==typeof e?e({}):e||i:l(e),t.createElement(a.Provider,{value:r},n)}}}]);