"use strict";(self.webpackChunkstarrocks=self.webpackChunkstarrocks||[]).push([[45434],{60340:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=t(85893),s=t(11151);const i={displayed_sidebar:"English"},o="Use Flink connector to read data from StarRocks",a={id:"unloading/Flink_connector",title:"Use Flink connector to read data from StarRocks",description:"This topic describes how to use the source function of flink-connector-starrocks to read data from StarRocks.",source:"@site/versioned_docs/version-2.2/unloading/Flink_connector.md",sourceDirName:"unloading",slug:"/unloading/Flink_connector",permalink:"/docs/2.2/unloading/Flink_connector",draft:!1,unlisted:!1,editUrl:"https://github.com/StarRocks/starrocks/edit/main/docs/unloading/Flink_connector.md",tags:[],version:"2.2",frontMatter:{displayed_sidebar:"English"},sidebar:"English",previous:{title:"Export Overview",permalink:"/docs/2.2/unloading/Export"},next:{title:"Spark StarRocks Connector",permalink:"/docs/2.2/unloading/Spark_connector"}},c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Procedure",id:"procedure",level:2},{value:"Step 1: Install flink-connector-starrocks",id:"step-1-install-flink-connector-starrocks",level:3},{value:"Step 2: Use flink-connector-starrocks to read StarRocks data",id:"step-2-use-flink-connector-starrocks-to-read-starrocks-data",level:3},{value:"Parameter description",id:"parameter-description",level:2},{value:"Data type mapping between Flink and StarRocks",id:"data-type-mapping-between-flink-and-starrocks",level:2},{value:"What to do next",id:"what-to-do-next",level:2}];function l(e){const n=Object.assign({h1:"h1",p:"p",blockquote:"blockquote",a:"a",h2:"h2",ul:"ul",li:"li",img:"img",h3:"h3",ol:"ol",code:"code",pre:"pre",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",strong:"strong"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"use-flink-connector-to-read-data-from-starrocks",children:"Use Flink connector to read data from StarRocks"}),"\n",(0,r.jsx)(n.p,{children:"This topic describes how to use the source function of flink-connector-starrocks to read data from StarRocks."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["If you need to use the sink function of flink-connector-starrocks to write data into StarRocks, see ",(0,r.jsx)(n.a,{href:"/docs/2.2/loading/Flink-connector-starrocks",children:"Flink connector"})," in the Data Loading chapter."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"You can use the source function of flink-connector-starrocks to read data from StarRocks. Different from the Flink JDBC connector, flink-connector-starrocks can read data from multiple StarRocks backends (BEs) in parallel, which significantly improves data reading efficiency.\nDifference between the two connectors:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"flink-connector-starrocks: Flink first obtains the query plan from the frontend (FE), delivers the query plan as a parameter to BE nodes, and then obtains data results from BE nodes."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"flink-connector",src:t(21986).Z+"",width:"1288",height:"864"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Flink JDBC connector: Flink JDBC connector can only read data from the FE in a serial fashion. The data reading efficiency is low."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"JDBC connector",src:t(6523).Z+"",width:"1466",height:"722"})}),"\n",(0,r.jsx)(n.h2,{id:"procedure",children:"Procedure"}),"\n",(0,r.jsx)(n.h3,{id:"step-1-install-flink-connector-starrocks",children:"Step 1: Install flink-connector-starrocks"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Select a flink-connector-starrocks version based on your Flink version and download the JAR package of ",(0,r.jsx)(n.a,{href:"https://github.com/StarRocks/flink-connector-starrocks/releases",children:"flink-connector-starrocks"}),".\nIf you need to debug code, you can select the corresponding branch code and compile the code."]}),"\n",(0,r.jsxs)(n.li,{children:["Place the downloaded or compiled JAR package in the ",(0,r.jsx)(n.code,{children:"lib"})," directory of Flink."]}),"\n",(0,r.jsx)(n.li,{children:"Restart Flink."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"step-2-use-flink-connector-starrocks-to-read-starrocks-data",children:"Step 2: Use flink-connector-starrocks to read StarRocks data"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"The source function of flink-connector-starrocks cannot guarantee exactly-once semantics. If the reading task fails, you must repeat this step to create another reading task."}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If you use a Flink SQL client (recommended), you can read data from StarRocks by referring to the following command. For more information about the parameters in this command, see ",(0,r.jsx)(n.a,{href:"https://docs.starrocks.com/en-us/main/unloading/Flink_connector#Parameter-description",children:"Parameter description"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-SQL",children:"-- Create a table in Flink based on the target StarRocks table and configure table properties (including information about flink-connector-starrocks, database, and table).\n\nCREATE TABLE flink_test (\n\n    date_1 DATE,\n\n    datetime_1 TIMESTAMP(6),\n\n    char_1 CHAR(20),\n\n    varchar_1 VARCHAR,\n\n    boolean_1 BOOLEAN,\n\n    tinyint_1 TINYINT,\n\n    smallint_1 SMALLINT,\n\n    int_1 INT,\n\n    bigint_1 BIGINT,\n\n    largeint_1 STRING,\n\n    float_1 FLOAT,\n\n    double_1 DOUBLE,FLI\n\n    decimal_1 DECIMAL(27,9)\n\n) WITH (\n\n   'connector'='starrocks',\n\n   'scan-url'='192.168.xxx.xxx:8030,192.168.xxx.xxx:8030',\n\n   'jdbc-url'='jdbc:mysql://192.168.xxx.xxx:9030',\n\n   'username'='root',\n\n   'password'='xxxxxx',\n\n   'database-name'='flink_test',\n\n   'table-name'='flink_test'\n\n);\n\n-- Execute an SQL statement to read data from StarRocks.\n\nselect date_1, smallint_1 from flink_test where char_1 `<>` 'A' and int_1 = -126;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Only some of the SQL statements can be used to read StarRocks data, such as"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"select ... from table_name where ..."}),". Aggregate functions except for COUNT are not supported."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Predicate pushdown is supported. Predicates can be automatically pushed down when you execute SQL statements, such as the filter conditions in the preceding example."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"char_1 < > 'A' and int_1 = -126"})," will be pushed down to the connector and converted into a statement suitable for querying StarRocks data. Additional configuration is not required."]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If you use Flink DataStream, you must add a dependency before you use flash-connector-starrocks to read StarRocks data."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Add the following dependency to the ",(0,r.jsx)(n.code,{children:"pom.xml"})," file."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Replace x.x.x with the latest version number of flink-connector-starrocks. You can click ",(0,r.jsx)(n.a,{href:"https://search.maven.org/search?q=g:com.starrocks",children:"version information"}),"to obtain the latest version number."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-SQL",children:"<dependency>    \n\n    <groupId>com.starrocks</groupId>\n\n    <artifactId>flink-connector-starrocks</artifactId>\n\n    \x3c!-- for flink-1.14 --\x3e\n\n    <version>x.x.x_flink-1.14_2.11</version>\n\n    <version>x.x.x_flink-1.14_2.12</version>\n\n    \x3c!-- for flink-1.13 --\x3e\n\n    <version>x.x.x_flink-1.13_2.11</version>\n\n    <version>x.x.x_flink-1.13_2.12</version>\n\n    \x3c!-- for flink-1.12 --\x3e\n\n    <version>x.x.x_flink-1.12_2.11</version>\n\n    <version>x.x.x_flink-1.12_2.12</version>\n\n    \x3c!-- for flink-1.11 --\x3e\n\n    <version>x.x.x_flink-1.11_2.11</version>\n\n    <version>x.x.x_flink-1.11_2.12</version>\n\n</dependency>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Use flink-connector-starrocks to read data from StarRocks by referring to the following sample code. The following table describes the parameters in these commands."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Java",children:'StarRocksSourceOptions options = StarRocksSourceOptions.builder()\n\n        .withProperty("scan-url", "192.168.xxx.xxx:8030,192.168.xxx.xxx:8030")\n\n        .withProperty("jdbc-url", "jdbc:mysql://192.168.xxx.xxx:9030")\n\n        .withProperty("username", "root")\n\n        .withProperty("password", "xxxxxx")\n\n        .withProperty("table-name", "flink_test")\n\n        .withProperty("database-name", "test")\n\n        .withProperty("cloumns", "char_1, date_1")        \n\n        .withProperty("filters", "int_1 = 10")\n\n        .build();\n\nTableSchema tableSchema = TableSchema.builder()\n\n        .field("date_1", DataTypes.DATE())\n\n        .field("datetime_1", DataTypes.TIMESTAMP(6))\n\n        .field("char_1", DataTypes.CHAR(20))\n\n        .field("varchar_1", DataTypes.STRING())\n\n        .field("boolean_1", DataTypes.BOOLEAN())\n\n        .field("tinyint_1", DataTypes.TINYINT())\n\n        .field("smallint_1", DataTypes.SMALLINT())\n\n        .field("int_1", DataTypes.INT())\n\n        .field("bigint_1", DataTypes.BIGINT())\n\n        .field("largeint_1", DataTypes.STRING())\n\n        .field("float_1", DataTypes.FLOAT())\n\n        .field("double_1", DataTypes.DOUBLE())\n\n        .field("decimal_1", DataTypes.DECIMAL(27, 9))\n\n        .build();\n\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\nenv.addSource(StarRocksSource.source(options, tableSchema)).setParallelism(5).print();\n\nenv.execute("StarRocks flink source");\n'})}),"\n",(0,r.jsx)(n.h2,{id:"parameter-description",children:"Parameter description"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Data type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"connector"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"The connector. Set the value to starrocks."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"scan-url"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"The scan URL of the FE node. The URL is used to access the FE node through the web server. The format is < FE IP address >: < FE HTTP port >. The port number defaults to 8030. Separate multiple addresses with commas, for example, 192.168.xxx.xxx:8030, 192.168.xxx.xxx:8030."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"jdbc-url"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"The JDBC URL of the FE node. This URL is used to access the MySQL client on the FE node. The format is jdbc:mysql://< FE IP address >:< FE query port >. The port number defaults to 9030."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"username"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsxs)(n.td,{children:["The username in StarRocks. The username must have read permissions to the target database and table. For more information, see ",(0,r.jsx)(n.a,{href:"/docs/2.2/administration/User_privilege",children:"User permissions"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"password"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"The password of the username."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"database-name"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"The name of the StarRocks database."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"table-name"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"The name of the StarRocks table."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"scan.connect.timeout-ms"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"The maximum duration for flink-connector-starrocks to connect to StarRocks, in milliseconds. The default value is 1000. If this duration is exceeded, the connection times out and an error occurs."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"scan.params.keep-alive-min"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"The keep-alive duration of the query task, in minutes. The default value is 10. we recommend that you set this parameter to a value greater than or equal to 5."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"scan.params.query-timeout-s"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"The timeout duration of the query task, in seconds. The default value is 600. If the query result is not returned within this duration, the query task is stopped."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"scan.params.mem-limit-byte"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"The maximum memory space allowed for a single query in the BE node, in bytes. The default value is 1073741824 (1 GB)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"scan.max-retries"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"The maximum number of retries when a query fails. The default value is 1. An error occurs if this value is exceeded."})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"data-type-mapping-between-flink-and-starrocks",children:"Data type mapping between Flink and StarRocks"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["The data type mapping in the following table applies only to reading StarRocks data from Flink. For the data type mapping for writing Flink data to StarRocks, see ",(0,r.jsx)(n.a,{href:"/docs/2.2/loading/Flink-connector-starrocks",children:"Flink connector"})," in the Data Loading chapter."]}),"\n"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"StarRocks"}),(0,r.jsx)(n.th,{children:"Flink"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"NULL"}),(0,r.jsx)(n.td,{children:"NULL"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"BOOLEAN"}),(0,r.jsx)(n.td,{children:"BOOLEAN"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"TINYINT"}),(0,r.jsx)(n.td,{children:"TINYINT"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SMALLINT"}),(0,r.jsx)(n.td,{children:"SMALLINT"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"INT"}),(0,r.jsx)(n.td,{children:"INT"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"BIGINT"}),(0,r.jsx)(n.td,{children:"BIGINT"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"LARGEINT"}),(0,r.jsx)(n.td,{children:"STRING"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FLOAT"}),(0,r.jsx)(n.td,{children:"FLOAT"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DOUBLE"}),(0,r.jsx)(n.td,{children:"DOUBLE"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DATE"}),(0,r.jsx)(n.td,{children:"DATE"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DATETIME"}),(0,r.jsx)(n.td,{children:"TIMESTAMP"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DECIMAL"}),(0,r.jsx)(n.td,{children:"DECIMAL"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DECIMALV2"}),(0,r.jsx)(n.td,{children:"DECIMAL"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DECIMAL32"}),(0,r.jsx)(n.td,{children:"DECIMAL"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DECIMAL64"}),(0,r.jsx)(n.td,{children:"DECIMAL"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DECIMAL128"}),(0,r.jsx)(n.td,{children:"DECIMAL"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"CHAR"}),(0,r.jsx)(n.td,{children:"CHAR"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"VARCHAR"}),(0,r.jsx)(n.td,{children:"STRING"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"what-to-do-next",children:"What to do next"}),"\n",(0,r.jsxs)(n.p,{children:["After data is read from StarRocks, you can use ",(0,r.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-docs-master/docs/try-flink/flink-operations-playground/#flink-webui",children:"Flink WEBUI"})," to observe the details of the reading task. For example, the ",(0,r.jsx)(n.strong,{children:"Metrics"})," page of Flink WEBUI displays the number of data rows that are read (",(0,r.jsx)(n.code,{children:"totalScannedRows"}),")."]})]})}const h=function(e={}){const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(l,e)})):l(e)}},21986:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/5.3.2-1-754f40ad6d35622970a5f5ab2614e3b1.png"},6523:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/5.3.2-2-52b40ca88dc794d1a45bb4e472b5d655.png"},11151:(e,n,t)=>{t.d(n,{Zo:()=>a,ah:()=>i});var r=t(67294);const s=r.createContext({});function i(e){const n=r.useContext(s);return r.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const o={};function a({components:e,children:n,disableParentContext:t}){let a;return a=t?"function"==typeof e?e({}):e||o:i(e),r.createElement(s.Provider,{value:a},n)}}}]);