"use strict";(self.webpackChunkstarrocks=self.webpackChunkstarrocks||[]).push([[44560],{99051:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var a=t(85893),s=t(11151);const o={},r="UPDATE",l={id:"sql-reference/sql-statements/data-manipulation/UPDATE",title:"UPDATE",description:"Modifies rows in a Primary Key table. In versions earlier than version 3.0, the UPDATE statement only supports simple syntax, such as UPDATE  SET = WHERE . Starting from version 3.0, StarRocks enriches the syntax to support multi-table joins and common table expressions (CTEs). If you need to join the table to be updated with other tables in the database, you can reference these other tables in the FROM clause or CTE.",source:"@site/versioned_docs/version-3.0/sql-reference/sql-statements/data-manipulation/UPDATE.md",sourceDirName:"sql-reference/sql-statements/data-manipulation",slug:"/sql-reference/sql-statements/data-manipulation/UPDATE",permalink:"/doc/en/3.0/sql-reference/sql-statements/data-manipulation/UPDATE",draft:!1,unlisted:!1,editUrl:"https://github.com/StarRocks/starrocks/edit/main/docs/sql-reference/sql-statements/data-manipulation/UPDATE.md",tags:[],version:"3.0",frontMatter:{},sidebar:"documentation",previous:{title:"SUBMIT TASK",permalink:"/doc/en/3.0/sql-reference/sql-statements/data-manipulation/SUBMIT_TASK"},next:{title:"ALTER ROUTINE LOAD",permalink:"/doc/en/3.0/sql-reference/sql-statements/data-manipulation/alter-routine-load"}},c={},i=[{value:"Usage notes",id:"usage-notes",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Multi-table UPDATE",id:"multi-table-update",level:3}];function d(e){const n=Object.assign({h1:"h1",p:"p",code:"code",h2:"h2",pre:"pre",h3:"h3"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"update",children:"UPDATE"}),"\n",(0,a.jsxs)(n.p,{children:["Modifies rows in a Primary Key table. In versions earlier than version 3.0, the UPDATE statement only supports simple syntax, such as ",(0,a.jsx)(n.code,{children:"UPDATE <table_name> SET <column_name>=<expression> WHERE <where_condition>"}),". Starting from version 3.0, StarRocks enriches the syntax to support multi-table joins and common table expressions (CTEs). If you need to join the table to be updated with other tables in the database, you can reference these other tables in the FROM clause or CTE."]}),"\n",(0,a.jsx)(n.h2,{id:"usage-notes",children:"Usage notes"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-SQL",children:"[ WITH <with_query> [, ...] ]\nUPDATE <table_name>\nSET <column_name> = <expression> [, ...]\n[ FROM <from_item> [, ...] ]\nWHERE <where_condition>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"with_query"})}),"\n",(0,a.jsx)(n.p,{children:"One or more CTEs that can be referenced by name in an UPDATE statement. CTEs are temporary result sets that can improve the readability of complex statements."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"table_name"})}),"\n",(0,a.jsx)(n.p,{children:"The name of the table to be updated."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"column_name"})}),"\n",(0,a.jsx)(n.p,{children:"The name of the column to be updated. It cannot include the table name. For example, 'UPDATE t1 SET col = 1' is not valid."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"expression"})}),"\n",(0,a.jsx)(n.p,{children:"The expression that assigns new values to the column."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"from_item"})}),"\n",(0,a.jsxs)(n.p,{children:["One or more other tables in the database. These tables can be joined with the table to be updated based on the condition specified in the WHERE clause. The values of the rows in the result set are used to update the values for the specified columns in the matched rows in the table to be updated. For example, if the FROM clause is ",(0,a.jsx)(n.code,{children:"FROM t1 WHERE t0.pk = t1.pk"}),", StarRocks converts the table expression in the FROM clause to ",(0,a.jsx)(n.code,{children:"t0 JOIN t1 ON t0.pk=t1.pk"})," when executing the UPDATE statement."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"where_condition"})}),"\n",(0,a.jsx)(n.p,{children:"The condition based on which you want to update rows. Only rows that meet the WHERE condition can be updated. This parameter is required, because it helps prevent you from accidentally updating the entire table. If you want to update the entire table, you can use 'WHERE true'."}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsxs)(n.p,{children:["For example, there are two tables ",(0,a.jsx)(n.code,{children:"employees"})," and ",(0,a.jsx)(n.code,{children:"accounts"})," in StarRocks. The table ",(0,a.jsx)(n.code,{children:"employees"})," records employee information, and the table ",(0,a.jsx)(n.code,{children:"accounts"})," records account information."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-SQL",children:"CREATE TABLE Employees (\n    EmployeeID INT,\n    Name VARCHAR(50),\n    Salary DECIMAL(10, 2)\n)\nPRIMARY KEY (EmployeeID) \nDISTRIBUTED BY HASH (EmployeeID)\nPROPERTIES (\"replication_num\" = \"3\");\n\nINSERT INTO Employees VALUES\n    (1, 'John Doe', 5000),\n    (2, 'Jane Smith', 6000),\n    (3, 'Robert Johnson', 5500),\n    (4, 'Emily Williams', 4500),\n    (5, 'Michael Brown', 7000);\n"})}),"\n",(0,a.jsx)(n.p,{children:"If you need to give a 10% raise to all employees, you can execute the following statement:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-SQL",children:"UPDATE Employees\nSET Salary = Salary * 1.1  -- Increase the salary by 10%.\nWHERE true;\n"})}),"\n",(0,a.jsx)(n.p,{children:"If you need to give a 10% raise to employees with salaries lower than the average salary, you can execute the following statement:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-SQL",children:"UPDATE Employees\nSET Salary = Salary * 1.1   -- Increase the salary by 10%.\nWHERE Salary < (SELECT AVG(Salary) FROM Employees);\n"})}),"\n",(0,a.jsx)(n.p,{children:"You can also use a CTE to rewrite the above statement to improve readability."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-SQL",children:"WITH AvgSalary AS (\n    SELECT AVG(Salary) AS AverageSalary\n    FROM Employees\n)\nUPDATE Employees\nSET Salary = Salary * 1.1   -- Increase the salary by 10%.\nFROM AvgSalary\nWHERE Employees.Salary < AvgSalary.AverageSalary;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"multi-table-update",children:"Multi-table UPDATE"}),"\n",(0,a.jsxs)(n.p,{children:["Create a table ",(0,a.jsx)(n.code,{children:"Accounts"})," to record account information and insert three data rows into the table."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-SQL",children:'CREATE TABLE Accounts (\n    Accounts_id BIGINT NOT NULL,\n    Name VARCHAR(26) NOT NULL,\n    Sales_person VARCHAR(50) NOT NULL\n) \nPRIMARY KEY (Accounts_id)\nDISTRIBUTED BY HASH (Accounts_id)\nPROPERTIES ("replication_num" = "3");\n\nINSERT INTO employees VALUES (1,100),(2,1000);\n\nCREATE TABLE accounts \n(\n    accounts_id BIGINT NOT NULL,\n    name VARCHAR(26) NOT NULL,\n    sales_person INT NOT NULL\n) \nPRIMARY KEY (accounts_id)\nDISTRIBUTED BY HASH(accounts_id) BUCKETS 1\nPROPERTIES ("replication_num" = "3");\n\nINSERT INTO accounts VALUES (1,\'Acme Corporation\',2),(2,\'Acme Corporation\',3),(3,\'Corporation\',3);\n'})}),"\n",(0,a.jsxs)(n.p,{children:["If you need to increase the sales count of salespersons that manage Acme Corporation's account in the ",(0,a.jsx)(n.code,{children:"employees"})," table by 1, you can execute the following statement:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-SQL",children:"UPDATE employees\nSET sales_count = sales_count + 1\nFROM accounts\nWHERE accounts.name = 'Acme Corporation'\n   AND employees.id = accounts.sales_person;\n"})}),"\n",(0,a.jsx)(n.p,{children:"You can also use a CTE to rewrite the above statement to improve readability."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-SQL",children:"WITH acme_accounts as (\n    SELECT * from accounts\n     WHERE accounts.name = 'Acme Corporation'\n)\nUPDATE employees SET sales_count = sales_count + 1\nFROM acme_accounts\nWHERE employees.id = acme_accounts.sales_person;\n"})})]})}const h=function(e={}){const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(d,e)})):d(e)}},11151:(e,n,t)=>{t.d(n,{Zo:()=>l,ah:()=>o});var a=t(67294);const s=a.createContext({});function o(e){const n=a.useContext(s);return a.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const r={};function l({components:e,children:n,disableParentContext:t}){let l;return l=t?"function"==typeof e?e({}):e||r:o(e),a.createElement(s.Provider,{value:l},n)}}}]);