"use strict";(self.webpackChunkstarrocks=self.webpackChunkstarrocks||[]).push([[54288],{27055:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var s=r(85893),a=r(11151);const i={displayed_sidebar:"English"},t="Window function",l={id:"using_starrocks/Window_function",title:"Window function",description:"Background",source:"@site/versioned_docs/version-2.1/using_starrocks/Window_function.md",sourceDirName:"using_starrocks",slug:"/using_starrocks/Window_function",permalink:"/zh/docs/2.1/using_starrocks/Window_function",draft:!1,unlisted:!1,editUrl:"https://github.com/StarRocks/docs.zh-cn/edit/main/using_starrocks/Window_function.md",tags:[],version:"2.1",frontMatter:{displayed_sidebar:"English"},sidebar:"English",previous:{title:"\u80cc\u666f\u4ecb\u7ecd",permalink:"/zh/docs/2.1/using_starrocks/Using_bitmap"},next:{title:"File manager",permalink:"/zh/docs/2.1/using_starrocks/filemanager"}},o={},c=[{value:"Background",id:"background",level:2},{value:"Usage",id:"usage",level:2},{value:"Function",id:"function",level:3},{value:"PARTITION BY clause",id:"partition-by-clause",level:3},{value:"ORDER BY clause",id:"order-by-clause",level:3},{value:"Window Clause",id:"window-clause",level:3},{value:"Function Examples",id:"function-examples",level:2},{value:"AVG()",id:"avg",level:3},{value:"COUNT()",id:"count",level:3},{value:"DENSE_RANK()",id:"dense_rank",level:3},{value:"FIRST_VALUE()",id:"first_value",level:3},{value:"LAG()",id:"lag",level:3},{value:"LAST_VALUE()",id:"last_value",level:3},{value:"LEAD()",id:"lead",level:3},{value:"MAX()",id:"max",level:3},{value:"MIN()",id:"min",level:3},{value:"RANK()",id:"rank",level:3},{value:"ROW_NUMBER()",id:"row_number",level:3},{value:"SUM()",id:"sum",level:3}];function d(e){const n=Object.assign({h1:"h1",h2:"h2",p:"p",strong:"strong",code:"code",pre:"pre",h3:"h3",ul:"ul",li:"li"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"window-function",children:"Window function"}),"\n",(0,s.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,s.jsxs)(n.p,{children:["The window function is a special class of built-in functions. Similar to the aggregation function, it also does calculations on multiple input rows to get a single data value. The difference is that the window function processes the input data within a specific window, rather than using the \u201cgroup by\u201d method. The data in each window can be sorted and grouped using the over() clause. The window function ",(0,s.jsx)(n.strong,{children:"computes a separate value for each row"}),", rather than computing one value for each group. This flexibility allows users to add additional columns to the select clause and further filter the result set. The window function can only appear in the select list and the outermost position of a clause. It takes effect at the end of the query, that is, after the ",(0,s.jsx)(n.code,{children:"join"}),", ",(0,s.jsx)(n.code,{children:"where"}),", and ",(0,s.jsx)(n.code,{children:"group by"})," operations are performed. The window function is often used to analyze trends, calculate outliers, and perform bucketing analyses on large-scale data."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.p,{children:"Syntax of the window function\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"function(args) OVER(partition_by_clause order_by_clause [window_clause])\npartition_by_clause ::= PARTITION BY expr [, expr ...]\norder_by_clause ::= ORDER BY expr [ASC | DESC] [, expr [ASC | DESC] ...]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"function",children:"Function"}),"\n",(0,s.jsx)(n.p,{children:"Currently supported Functions include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"MIN(), MAX(), COUNT(), SUM(), AVG()"}),"\n",(0,s.jsx)(n.li,{children:"FIRST_VALUE(), LAST_VALUE(), LEAD(), LAG()"}),"\n",(0,s.jsx)(n.li,{children:"ROW_NUMBER(), RANK(), DENSE_RANK()"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"partition-by-clause",children:"PARTITION BY clause"}),"\n",(0,s.jsx)(n.p,{children:"The Partition By clause is similar to Group By. It groups the input rows by one or more specified columns. Rows with the same value are grouped together."}),"\n",(0,s.jsx)(n.h3,{id:"order-by-clause",children:"ORDER BY clause"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Order By"})," clause is basically the same as the outer ",(0,s.jsx)(n.code,{children:"Order By"}),". It defines the order of the input rows. If",(0,s.jsx)(n.code,{children:"Partition By"})," is specified, ",(0,s.jsx)(n.code,{children:"Order By"})," defines the order within each Partition grouping. The only difference is that ",(0,s.jsx)(n.code,{children:"Order By n"})," (n is a positive integer) in the ",(0,s.jsx)(n.code,{children:"OVER"})," clause is equivalent to no operation, whereas the n in the outer ",(0,s.jsx)(n.code,{children:"Order By"})," indicates sorting by the nth column."]}),"\n",(0,s.jsx)(n.p,{children:"Example 1:"}),"\n",(0,s.jsxs)(n.p,{children:["This example shows adding an id column to the select list with values of 1, 2, 3, etc., sorted by the ",(0,s.jsx)(n.code,{children:"date_and_time"})," column in the events table."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT row_number() OVER (ORDER BY date_and_time) AS id,\n    c1, c2, c3, c4\nFROM events;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"window-clause",children:"Window Clause"}),"\n",(0,s.jsxs)(n.p,{children:["The window clause is used to specify a range of rows for operations ( the previous and later lines based on the current line). It supports the following syntaxes \u2013 AVG(), COUNT(), FIRST_VALUE(), LAST_VALUE() and SUM(). For MAX() and MIN(), the window clause can specify the start to ",(0,s.jsx)(n.code,{children:"UNBOUNDED PRECEDING"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"ROWS BETWEEN [ { m | UNBOUNDED } PRECEDING | CURRENT ROW] [ AND [CURRENT ROW | { UNBOUNDED | n } FOLLOWING] ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example 2:"}),"\n",(0,s.jsx)(n.p,{children:"Suppose we have the following stock data, the stock symbol is JDR, and the closing price is the daily closing price."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"create table stock_ticker (\n    stock_symbol string,\n    closing_price decimal(8,2),\n    closing_date timestamp);\n\n-- ...load some data...\n\nselect *\nfrom stock_ticker\norder by stock_symbol, closing_date\n"})}),"\n",(0,s.jsx)(n.p,{children:"The raw data was shown as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"+--------------+---------------+---------------------+\n| stock_symbol | closing_price | closing_date        |\n+--------------+---------------+---------------------+\n| JDR          | 12.86         | 2014-10-02 00:00:00 |\n| JDR          | 12.89         | 2014-10-03 00:00:00 |\n| JDR          | 12.94         | 2014-10-04 00:00:00 |\n| JDR          | 12.55         | 2014-10-05 00:00:00 |\n| JDR          | 14.03         | 2014-10-06 00:00:00 |\n| JDR          | 14.75         | 2014-10-07 00:00:00 |\n| JDR          | 13.98         | 2014-10-08 00:00:00 |\n+--------------+---------------+---------------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This query uses the window function to generate the moving_average column whose value is the 3-day (previous day, current day, and next day) average stock price. The first day does not have the value of its previous day, and the last day does not have the value of the day after, so these two rows only calculate the average value of two days. Here ",(0,s.jsx)(n.code,{children:"Partition By"})," does not take effect, because all the data is JDR data. However, if there is other stock information, ",(0,s.jsx)(n.code,{children:"Partition By"})," will ensure that the window function is operated within each Partition."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"select stock_symbol, closing_date, closing_price,\n    avg(closing_price)\n        over (partition by stock_symbol\n              order by closing_date\n              rows between 1 preceding and 1 following\n        ) as moving_average\nfrom stock_ticker;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The following data is obtained:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"+--------------+---------------------+---------------+----------------+\n| stock_symbol | closing_date        | closing_price | moving_average |\n+--------------+---------------------+---------------+----------------+\n| JDR          | 2014-10-02 00:00:00 | 12.86         | 12.87          |\n| JDR          | 2014-10-03 00:00:00 | 12.89         | 12.89          |\n| JDR          | 2014-10-04 00:00:00 | 12.94         | 12.79          |\n| JDR          | 2014-10-05 00:00:00 | 12.55         | 13.17          |\n| JDR          | 2014-10-06 00:00:00 | 14.03         | 13.77          |\n| JDR          | 2014-10-07 00:00:00 | 14.75         | 14.25          |\n| JDR          | 2014-10-08 00:00:00 | 13.98         | 14.36          |\n+--------------+---------------------+---------------+----------------+\n"})}),"\n",(0,s.jsx)(n.h2,{id:"function-examples",children:"Function Examples"}),"\n",(0,s.jsx)(n.p,{children:"This section describes the window functions supported in StarRocks."}),"\n",(0,s.jsx)(n.h3,{id:"avg",children:"AVG()"}),"\n",(0,s.jsx)(n.p,{children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"AVG([DISTINCT | ALL] *expression*) [OVER (*analytic_clause*)]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example 3:"}),"\n",(0,s.jsx)(n.p,{children:"Calculate the x-average of the current row and each row before and after it."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"select x, property,\n    avg(x)\n        over (\n            partition by property\n            order by x\n            rows between 1 preceding and 1 following\n        ) as 'moving average'\nfrom int_t\nwhere property in ('odd','even');\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"+----+----------+----------------+\n| x  | property | moving average |\n+----+----------+----------------+\n| 2  | even     | 3              |\n| 4  | even     | 4              |\n| 6  | even     | 6              |\n| 8  | even     | 8              |\n| 10 | even     | 9              |\n| 1  | odd      | 2              |\n| 3  | odd      | 3              |\n| 5  | odd      | 5              |\n| 7  | odd      | 7              |\n| 9  | odd      | 8              |\n+----+----------+----------------+\n"})}),"\n",(0,s.jsx)(n.h3,{id:"count",children:"COUNT()"}),"\n",(0,s.jsx)(n.p,{children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"COUNT([DISTINCT | ALL] expression) [OVER (analytic_clause)]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example 4:"}),"\n",(0,s.jsx)(n.p,{children:"Count the occurrence of x from the current row to the first row."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"select x, property,\n    count(x)\n        over (\n            partition by property\n            order by x\n            rows between unbounded preceding and current row\n        ) as 'cumulative total'\nfrom int_t where property in ('odd','even');\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"+----+----------+------------------+\n| x  | property | cumulative count |\n+----+----------+------------------+\n| 2  | even     | 1                |\n| 4  | even     | 2                |\n| 6  | even     | 3                |\n| 8  | even     | 4                |\n| 10 | even     | 5                |\n| 1  | odd      | 1                |\n| 3  | odd      | 2                |\n| 5  | odd      | 3                |\n| 7  | odd      | 4                |\n| 9  | odd      | 5                |\n+----+----------+------------------+\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dense_rank",children:"DENSE_RANK()"}),"\n",(0,s.jsxs)(n.p,{children:["The DENSE_RANK() function is used to represent rankings. Unlike RANK(), DENSE_RANK()",(0,s.jsx)(n.strong,{children:"does not have vacant"})," numbers. For example, if there are two tied 1s, the third number of DENSE_RANK() is still 2, whereas the third number of RANK() is 3."]}),"\n",(0,s.jsx)(n.p,{children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"DENSE_RANK() OVER(partition_by_clause order_by_clause)\n"})}),"\n",(0,s.jsx)(n.p,{children:"The following example shows the ranking of column x according to the property column grouping."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"select x, y,\n    dense_rank()\n        over (\n            partition by x\n            order by y\n        ) as rank\nfrom int_t;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"+---+---+------+\n| x | y | rank |\n+---+---+------+\n| 1 | 1 | 1    |\n| 1 | 2 | 2    |\n| 1 | 2 | 2    |\n| 2 | 1 | 1    |\n| 2 | 2 | 2    |\n| 2 | 3 | 3    |\n| 3 | 1 | 1    |\n| 3 | 1 | 1    |\n| 3 | 2 | 2    |\n+---+---+------+\n"})}),"\n",(0,s.jsx)(n.h3,{id:"first_value",children:"FIRST_VALUE()"}),"\n",(0,s.jsxs)(n.p,{children:["FIRST_VALUE() returns the ",(0,s.jsx)(n.strong,{children:"first"})," value of the window range."]}),"\n",(0,s.jsx)(n.p,{children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"FIRST_VALUE(expr) OVER(partition_by_clause order_by_clause [window_clause])\n"})}),"\n",(0,s.jsx)(n.p,{children:"For example 5:"}),"\n",(0,s.jsx)(n.p,{children:"We have the following data:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:" select name, country, greeting\n from mail_merge;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"+---------+---------+--------------+\n| name    | country | greeting     |\n+---------+---------+--------------+\n| Pete    | USA     | Hello        |\n| John    | USA     | Hi           |\n| Boris   | Germany | Guten tag    |\n| Michael | Germany | Guten morgen |\n| Bjorn   | Sweden  | Hej          |\n| Mats    | Sweden  | Tja          |\n+---------+---------+--------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Use FIRST_VALUE() to return the first greeting value in each grouping, based on the country grouping."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"select country, name,\n    first_value(greeting)\n        over (\n            partition by country\n            order by name, greeting\n        ) as greeting\nfrom mail_merge;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"+---------+---------+-----------+\n| country | name    | greeting  |\n+---------+---------+-----------+\n| Germany | Boris   | Guten tag |\n| Germany | Michael | Guten tag |\n| Sweden  | Bjorn   | Hej       |\n| Sweden  | Mats    | Hej       |\n| USA     | John    | Hi        |\n| USA     | Pete    | Hi        |\n+---------+---------+-----------+\n"})}),"\n",(0,s.jsx)(n.h3,{id:"lag",children:"LAG()"}),"\n",(0,s.jsx)(n.p,{children:"The LAG() method is used to calculate the value of rows ahead of the current row."}),"\n",(0,s.jsx)(n.p,{children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"LAG (expr, offset, default) OVER (partition_by_clause order_by_clause)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example 6:"}),"\n",(0,s.jsx)(n.p,{children:"Calculate the closing price of the previous day"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'select stock_symbol, closing_date, closing_price,\n    lag(closing_price,1, 0) over\n    (\n        partition by stock_symbol\n        order by closing_date\n    ) as "yesterday closing"\nfrom stock_ticker\norder by closing_date;\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"+--------------+---------------------+---------------+-------------------+\n| stock_symbol | closing_date        | closing_price | yesterday closing |\n+--------------+---------------------+---------------+-------------------+\n| JDR          | 2014-09-13 00:00:00 | 12.86         | 0                 |\n| JDR          | 2014-09-14 00:00:00 | 12.89         | 12.86             |\n| JDR          | 2014-09-15 00:00:00 | 12.94         | 12.89             |\n| JDR          | 2014-09-16 00:00:00 | 12.55         | 12.94             |\n| JDR          | 2014-09-17 00:00:00 | 14.03         | 12.55             |\n| JDR          | 2014-09-18 00:00:00 | 14.75         | 14.03             |\n| JDR          | 2014-09-19 00:00:00 | 13.98         | 14.75             |\n+--------------+---------------------+---------------+-------------------+\n"})}),"\n",(0,s.jsx)(n.h3,{id:"last_value",children:"LAST_VALUE()"}),"\n",(0,s.jsxs)(n.p,{children:["LAST_VALUE() returns the ",(0,s.jsx)(n.strong,{children:"last"})," value of the window range. It is the opposite of FIRST_VALUE()."]}),"\n",(0,s.jsx)(n.p,{children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"LAST_VALUE(expr) OVER(partition_by_clause order_by_clause [window_clause])\n"})}),"\n",(0,s.jsx)(n.p,{children:"Use the data form the example 6:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"select country, name,\n    last_value(greeting)\n        over (\n            partition by country\n            order by name, greeting\n        ) as greeting\nfrom mail_merge;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"+---------+---------+--------------+\n| country | name    | greeting     |\n+---------+---------+--------------+\n| Germany | Boris   | Guten morgen |\n| Germany | Michael | Guten morgen |\n| Sweden  | Bjorn   | Tja          |\n| Sweden  | Mats    | Tja          |\n| USA     | John    | Hello        |\n| USA     | Pete    | Hello        |\n+---------+---------+--------------+\n"})}),"\n",(0,s.jsx)(n.h3,{id:"lead",children:"LEAD()"}),"\n",(0,s.jsx)(n.p,{children:"The LEAD() method is used to calculate the value of rows after the current row."}),"\n",(0,s.jsx)(n.p,{children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"LEAD (expr, offset, default]) OVER (partition_by_clause order_by_clause)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example 7:"}),"\n",(0,s.jsx)(n.p,{children:"Calculate the next day's closing price and compare it to today's  to see whether it is higher or lower."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'select stock_symbol, closing_date, closing_price,\n    case\n        (lead(closing_price,1, 0)\n            over (partition by stock_symbol\n                  order by closing_date)\n         - closing_price) > 0\n    when true then "higher"\n    when false then "flat or lower"\n    end as "trending"\nfrom stock_ticker\norder by closing_date;\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"+--------------+---------------------+---------------+---------------+\n| stock_symbol | closing_date        | closing_price | trending      |\n+--------------+---------------------+---------------+---------------+\n| JDR          | 2014-09-13 00:00:00 | 12.86         | higher        |\n| JDR          | 2014-09-14 00:00:00 | 12.89         | higher        |\n| JDR          | 2014-09-15 00:00:00 | 12.94         | flat or lower |\n| JDR          | 2014-09-16 00:00:00 | 12.55         | higher        |\n| JDR          | 2014-09-17 00:00:00 | 14.03         | higher        |\n| JDR          | 2014-09-18 00:00:00 | 14.75         | flat or lower |\n| JDR          | 2014-09-19 00:00:00 | 13.98         | flat or lower |\n+--------------+---------------------+---------------+---------------+\n"})}),"\n",(0,s.jsx)(n.h3,{id:"max",children:"MAX()"}),"\n",(0,s.jsx)(n.p,{children:"Syntax\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"MAX([DISTINCT | ALL] expression) [OVER (analytic_clause)]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example 8:"}),"\n",(0,s.jsx)(n.p,{children:"Calculate the maximum value of rows ranging from the first row to the row after the current row."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"select x, property,\n    max(x)\n        over (\n            order by property, x\n            rows between unbounded preceding and 1 following\n        ) as 'local maximum'\nfrom int_t\nwhere property in ('prime','square');\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"+---+----------+---------------+\n| x | property | local maximum |\n+---+----------+---------------+\n| 2 | prime    | 3             |\n| 3 | prime    | 5             |\n| 5 | prime    | 7             |\n| 7 | prime    | 7             |\n| 1 | square   | 7             |\n| 4 | square   | 9             |\n| 9 | square   | 9             |\n+---+----------+---------------+\n"})}),"\n",(0,s.jsx)(n.h3,{id:"min",children:"MIN()"}),"\n",(0,s.jsx)(n.p,{children:"Syntax\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"MIN([DISTINCT | ALL] expression) [OVER (analytic_clause)]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example 9:"}),"\n",(0,s.jsx)(n.p,{children:"Calculate the minimum value of rows ranging from the first row to the row after the current row."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"select x, property,\n    min(x)\n        over (\n            order by property, x desc\n            rows between unbounded preceding and 1 following\n        ) as 'local minimum'\nfrom int_t\nwhere property in ('prime','square');\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"+---+----------+---------------+\n| x | property | local minimum |\n+---+----------+---------------+\n| 7 | prime    | 5             |\n| 5 | prime    | 3             |\n| 3 | prime    | 2             |\n| 2 | prime    | 2             |\n| 9 | square   | 2             |\n| 4 | square   | 1             |\n| 1 | square   | 1             |\n+---+----------+---------------+\n"})}),"\n",(0,s.jsx)(n.h3,{id:"rank",children:"RANK()"}),"\n",(0,s.jsxs)(n.p,{children:["The RANK() function is used to represent rankings. Unlike DENSE_RANK(), RANK() will ",(0,s.jsx)(n.strong,{children:"appear as a vacant"})," number. For example, if two tied 1s appear, the third number of RANK() will be 3 instead of 2."]}),"\n",(0,s.jsx)(n.p,{children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"RANK() OVER(partition_by_clause order_by_clause)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example 10:"}),"\n",(0,s.jsx)(n.p,{children:"Ranking according to column x:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"select x, y, rank() over(partition by x order by y) as rank\nfrom int_t;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"+---+---+------+\n| x | y | rank |\n+---+---+------+\n| 1 | 1 | 1    |\n| 1 | 2 | 2    |\n| 1 | 2 | 2    |\n| 2 | 1 | 1    |\n| 2 | 2 | 2    |\n| 2 | 3 | 3    |\n| 3 | 1 | 1    |\n| 3 | 1 | 1    |\n| 3 | 2 | 3    |\n+---+---+------+\n"})}),"\n",(0,s.jsx)(n.h3,{id:"row_number",children:"ROW_NUMBER()"}),"\n",(0,s.jsxs)(n.p,{children:["Returns a continuously increasing integer starting from 1 for each row of a Partition. Unlike RANK() and DENSE_RANK(), the value returned by ROW_NUMBER() ",(0,s.jsx)(n.strong,{children:"does not repeat or have gaps"})," and is ",(0,s.jsx)(n.strong,{children:"continuously incremented"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"ROW_NUMBER() OVER(partition_by_clause order_by_clause)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example 11:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"select x, y, row_number() over(partition by x order by y) as rank\nfrom int_t;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"+---+---+------+\n| x | y | rank |\n+---+---+------+\n| 1 | 1 | 1    |\n| 1 | 2 | 2    |\n| 1 | 2 | 3    |\n| 2 | 1 | 1    |\n| 2 | 2 | 2    |\n| 2 | 3 | 3    |\n| 3 | 1 | 1    |\n| 3 | 1 | 2    |\n| 3 | 2 | 3    |\n+---+---+------+\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sum",children:"SUM()"}),"\n",(0,s.jsx)(n.p,{children:"Syntax\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SUM([DISTINCT | ALL] expression) [OVER (analytic_clause)]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example 12:"}),"\n",(0,s.jsxs)(n.p,{children:["Group by property and calculate the sum of the ",(0,s.jsx)(n.strong,{children:"current, preceding, and following rows"})," within the group."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"select x, property,\n    sum(x)\n        over (\n            partition by property\n            order by x\n            rows between 1 preceding and 1 following\n        ) as 'moving total'\nfrom int_t where property in ('odd','even');\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Plain",metastring:"Text",children:"+----+----------+--------------+\n| x  | property | moving total |\n+----+----------+--------------+\n| 2  | even     | 6            |\n| 4  | even     | 12           |\n| 6  | even     | 18           |\n| 8  | even     | 24           |\n| 10 | even     | 18           |\n| 1  | odd      | 4            |\n| 3  | odd      | 9            |\n| 5  | odd      | 15           |\n| 7  | odd      | 21           |\n+----+----------+--------------+\n"})})]})}const h=function(e={}){const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(d,e)})):d(e)}},11151:(e,n,r)=>{r.d(n,{Zo:()=>l,ah:()=>i});var s=r(67294);const a=s.createContext({});function i(e){const n=s.useContext(a);return s.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const t={};function l({components:e,children:n,disableParentContext:r}){let l;return l=r?"function"==typeof e?e({}):e||t:i(e),s.createElement(a.Provider,{value:l},n)}}}]);