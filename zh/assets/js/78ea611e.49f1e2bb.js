"use strict";(self.webpackChunkstarrocks=self.webpackChunkstarrocks||[]).push([[51754],{38846:(e,_,n)=>{n.r(_),n.d(_,{assets:()=>i,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var a=n(85893),t=n(11151);const l={displayed_sidebar:"Chinese"},r="query_dump \u63a5\u53e3",s={id:"faq/Dump_query",title:"query_dump \u63a5\u53e3",description:"\u672c\u6587\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 StarRocks \u7684 query_dump \u63a5\u53e3\u6765\u67e5\u770b SQL \u67e5\u8be2\u7684\u76f8\u5173\u4fe1\u606f\u3002",source:"@site/i18n/zh/docusaurus-plugin-content-docs/version-3.1/faq/Dump_query.md",sourceDirName:"faq",slug:"/faq/Dump_query",permalink:"/doc/zh/docs/faq/Dump_query",draft:!1,unlisted:!1,editUrl:"https://github.com/StarRocks/docs.zh-cn/edit/main/faq/Dump_query.md",tags:[],version:"3.1",frontMatter:{displayed_sidebar:"Chinese"},sidebar:"Chinese",previous:{title:"\u67e5\u8be2\u76f8\u5173\u95ee\u9898",permalink:"/doc/zh/docs/faq/Sql_faq"},next:{title:"\u5176\u4ed6",permalink:"/doc/zh/docs/faq/Others"}},i={},o=[{value:"\u529f\u80fd\u4ecb\u7ecd",id:"\u529f\u80fd\u4ecb\u7ecd",level:2},{value:"HTTP \u63a5\u53e3",id:"http-\u63a5\u53e3",level:2},{value:"\u8bf7\u6c42\u6837\u4f8b",id:"\u8bf7\u6c42\u6837\u4f8b",level:2},{value:"\u5173\u95ed\u4fe1\u606f\u8131\u654f",id:"\u5173\u95ed\u4fe1\u606f\u8131\u654f",level:3},{value:"\u6253\u5f00\u4fe1\u606f\u8131\u654f\uff08\u9ed8\u8ba4\uff09",id:"\u6253\u5f00\u4fe1\u606f\u8131\u654f\u9ed8\u8ba4",level:3},{value:"Keywords",id:"keywords",level:2}];function u(e){const _=Object.assign({h1:"h1",p:"p",ul:"ul",li:"li",code:"code",h2:"h2",pre:"pre",h3:"h3"},(0,t.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(_.h1,{id:"query_dump-\u63a5\u53e3",children:"query_dump \u63a5\u53e3"}),"\n",(0,a.jsx)(_.p,{children:"\u672c\u6587\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 StarRocks \u7684 query_dump \u63a5\u53e3\u6765\u67e5\u770b SQL \u67e5\u8be2\u7684\u76f8\u5173\u4fe1\u606f\u3002"}),"\n",(0,a.jsx)(_.p,{children:"\u4f7f\u7528 StarRocks \u6267\u884c\u67e5\u8be2 SQL \u65f6\uff0c\u5982\u679c\u9047\u5230\u4ee5\u4e0b\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 StarRocks \u7684 query_dump \u529f\u80fd\u5c06 SQL \u4ee5\u53ca\u76f8\u5173\u7684\u4fe1\u606f\u53d1\u9001\u7ed9 StarRocks \u6280\u672f\u652f\u6301\u4eba\u5458\u8fdb\u884c\u95ee\u9898\u6392\u67e5\u3002"}),"\n",(0,a.jsxs)(_.ul,{children:["\n",(0,a.jsxs)(_.li,{children:["\u6267\u884c SQL \u6216\u8005 EXPLAIN SQL \u65f6\u8fd4\u56de ",(0,a.jsx)(_.code,{children:"Unknown Error"}),"\u3002"]}),"\n",(0,a.jsx)(_.li,{children:"\u6267\u884c SQL \u65f6\u9047\u5230\u975e\u6b63\u5e38\u8fd4\u56de\u7684\u62a5\u9519\u4fe1\u606f\u6216\u5f02\u5e38\u3002"}),"\n",(0,a.jsx)(_.li,{children:"\u6267\u884c SQL \u65f6\u6548\u7387\u4e0d\u7b26\u5408\u9884\u671f\uff0c\u6216\u8005\u53d1\u73b0\u6267\u884c\u8ba1\u5212\u6709\u4f18\u5316\u70b9\uff08\u4f8b\u5982\uff0c\u53ef\u4ee5\u88c1\u526a\u5206\u533a\u6216\u8fdb\u884c Join \u987a\u5e8f\u8c03\u6574\uff09\u3002"}),"\n"]}),"\n",(0,a.jsx)(_.h2,{id:"\u529f\u80fd\u4ecb\u7ecd",children:"\u529f\u80fd\u4ecb\u7ecd"}),"\n",(0,a.jsx)(_.p,{children:"query_dump \u4f1a\u6839\u636e\u67e5\u8be2\u7684 SQL\uff0c\u8fd4\u56de FE \u6267\u884c SQL \u65f6\u4f9d\u8d56\u7684\u4fe1\u606f\uff0c\u5305\u62ec\uff1a"}),"\n",(0,a.jsxs)(_.ul,{children:["\n",(0,a.jsx)(_.li,{children:"\u67e5\u8be2\u8bed\u53e5"}),"\n",(0,a.jsx)(_.li,{children:"\u67e5\u8be2\u4e2d\u5f15\u7528\u7684\u8868\u7ed3\u6784"}),"\n",(0,a.jsx)(_.li,{children:"Session \u53d8\u91cf"}),"\n",(0,a.jsx)(_.li,{children:"BE \u4e2a\u6570"}),"\n",(0,a.jsx)(_.li,{children:"\u7edf\u8ba1\u4fe1\u606f\uff08Min\uff0cMax\u503c\uff09"}),"\n",(0,a.jsx)(_.li,{children:"\u5f02\u5e38\u4fe1\u606f\uff08\u5f02\u5e38\u5806\u6808\uff09"}),"\n",(0,a.jsx)(_.li,{children:"\u6267\u884c\u8ba1\u5212\u4fe1\u606f"}),"\n"]}),"\n",(0,a.jsx)(_.p,{children:"\u4e3a\u4e86\u4fdd\u62a4\u6570\u636e\u9690\u79c1\uff0c\u6211\u4eec\u4f1a\u5bf9\u67e5\u8be2\u4f7f\u7528\u7684\u5e93\u540d\uff0c\u8868\u540d\uff0c\u5217\u540d\u7b49\u5143\u4fe1\u606f\u8fdb\u884c\u8131\u654f\uff0c\u540c\u65f6\u4e5f\u4f1a\u4f7f\u7528\u8131\u654f\u540e\u7684\u5143\u4fe1\u606f\u6539\u5199\u67e5\u8be2\u8bed\u53e5\u3002"}),"\n",(0,a.jsx)(_.p,{children:'\u5143\u4fe1\u606f\u8131\u654f\u9ed8\u8ba4\u5f00\u542f\u3002\u5982\u679c\u8131\u654f\u8fc7\u7a0b\u9047\u5230\u5f02\u5e38\u4f1a\u7ec8\u6b62\u8131\u654f\u8fc7\u7a0b\uff0c\u5219\u4f7f\u7528\u539f\u59cb\u4fe1\u606f\u3002\u5982\u679c\u9700\u8981\u5173\u95ed\u8131\u654f\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u5728URI\u4e2d\u8bbe\u7f6e "mock=false"\u3002'}),"\n",(0,a.jsx)(_.h2,{id:"http-\u63a5\u53e3",children:"HTTP \u63a5\u53e3"}),"\n",(0,a.jsx)(_.p,{children:"HTTP Post"}),"\n",(0,a.jsx)(_.pre,{children:(0,a.jsx)(_.code,{className:"language-shell",children:" fe_host:fe_http_port/api/query_dump?db=${database}&mock={value} post_data=${Query}\n"})}),"\n",(0,a.jsx)(_.pre,{children:(0,a.jsx)(_.code,{className:"language-shell",children:'wget --user=${username} --password=${password} --post-file ${query_file} "http://${fe_host}:${fe_http_port}/api/query_dump?db=${database}&mock=${value}" -O ${dump_file}\n'})}),"\n",(0,a.jsx)(_.p,{children:"\u53c2\u6570\u8bf4\u660e\uff1a"}),"\n",(0,a.jsxs)(_.ul,{children:["\n",(0,a.jsx)(_.li,{children:"query_file\uff1a\u5305\u542b query \u7684\u6587\u4ef6\u3002"}),"\n",(0,a.jsx)(_.li,{children:"dump_file\uff1a\u8f93\u51fa\u6587\u4ef6\u3002"}),"\n",(0,a.jsxs)(_.li,{children:["db\uff1aSQL \u8bed\u53e5\u6267\u884c\u7684\u6570\u636e\u5e93\u3002\u5982\u679c\u7528\u6237\u5728 query \u4e2d\u5305\u542b\u4e86 ",(0,a.jsx)(_.code,{children:"use db"})," \u8bed\u53e5\uff0c\u5219 ",(0,a.jsx)(_.code,{children:"db"})," \u53c2\u6570\u4e3a\u53ef\u9009\uff0c\u5426\u5219\u9700\u8981\u6307\u5b9a\u3002"]}),"\n",(0,a.jsx)(_.li,{children:"mock: \u6253\u5f00/\u5173\u95ed\u4fe1\u606f\u8131\u654f\u8fc7\u7a0b\u3002"}),"\n"]}),"\n",(0,a.jsx)(_.h2,{id:"\u8bf7\u6c42\u6837\u4f8b",children:"\u8bf7\u6c42\u6837\u4f8b"}),"\n",(0,a.jsx)(_.h3,{id:"\u5173\u95ed\u4fe1\u606f\u8131\u654f",children:"\u5173\u95ed\u4fe1\u606f\u8131\u654f"}),"\n",(0,a.jsx)(_.p,{children:"\u547d\u4ee4"}),"\n",(0,a.jsx)(_.pre,{children:(0,a.jsx)(_.code,{className:"language-shell",children:'wget --user=root --password=123 --post-file query_file "http://127.0.0.1:8030/api/query_dump?db=tpch&mock=false" -O dump_file\n'})}),"\n",(0,a.jsx)(_.p,{children:"\u8fd4\u56de\u683c\u5f0f"}),"\n",(0,a.jsx)(_.p,{children:"\u8fd4\u56de\u683c\u5f0f\u4e3a JSON\uff0c\u6837\u4f8b\uff1a"}),"\n",(0,a.jsx)(_.pre,{children:(0,a.jsx)(_.code,{className:"language-json",children:'{\n  "statement": "select\\n    l_returnflag,\\n    l_linestatus,\\n    sum(l_quantity) as sum_qty,\\n    sum(l_extendedprice) as sum_base_price,\\n    sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,\\n    sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,\\n    avg(l_quantity) as avg_qty,\\n    avg(l_extendedprice) as avg_price,\\n    avg(l_discount) as avg_disc,\\n    count(*) as count_order\\nfrom\\n    lineitem\\nwhere\\n    l_shipdate <= date \'1998-12-01\'\\ngroup by\\n    l_returnflag,\\n    l_linestatus\\norder by\\n    l_returnflag,\\n    l_linestatus ;\\n\\n",\n  "table_meta": {\n    "tpch.lineitem": "CREATE TABLE `lineitem` (\\n  `L_ORDERKEY` int(11) NOT NULL COMMENT \\"\\",\\n  `L_PARTKEY` int(11) NOT NULL COMMENT \\"\\",\\n  `L_SUPPKEY` int(11) NOT NULL COMMENT \\"\\",\\n  `L_LINENUMBER` int(11) NOT NULL COMMENT \\"\\",\\n  `L_QUANTITY` double NOT NULL COMMENT \\"\\",\\n  `L_EXTENDEDPRICE` double NOT NULL COMMENT \\"\\",\\n  `L_DISCOUNT` double NOT NULL COMMENT \\"\\",\\n  `L_TAX` double NOT NULL COMMENT \\"\\",\\n  `L_RETURNFLAG` char(1) NOT NULL COMMENT \\"\\",\\n  `L_LINESTATUS` char(1) NOT NULL COMMENT \\"\\",\\n  `L_SHIPDATE` date NOT NULL COMMENT \\"\\",\\n  `L_COMMITDATE` date NOT NULL COMMENT \\"\\",\\n  `L_RECEIPTDATE` date NOT NULL COMMENT \\"\\",\\n  `L_SHIPINSTRUCT` char(25) NOT NULL COMMENT \\"\\",\\n  `L_SHIPMODE` char(10) NOT NULL COMMENT \\"\\",\\n  `L_COMMENT` varchar(44) NOT NULL COMMENT \\"\\",\\n  `PAD` char(1) NOT NULL COMMENT \\"\\"\\n) ENGINE=OLAP \\nDUPLICATE KEY(`L_ORDERKEY`)\\nCOMMENT \\"OLAP\\"\\nDISTRIBUTED BY HASH(`L_ORDERKEY`) BUCKETS 20 \\nPROPERTIES (\\n\\"replication_num\\" = \\"1\\",\\n\\"in_memory\\" = \\"false\\",\\n\\"enable_persistent_index\\" = \\"false\\",\\n\\"replicated_storage\\" = \\"true\\",\\n\\"compression\\" = \\"LZ4\\"\\n);"\n  },\n  "table_row_count": {\n    "tpch.lineitem": {\n      "lineitem": 3\n    }\n  },\n  "column_statistics": {\n    "tpch.lineitem": {\n      "L_TAX": "[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE",\n      "L_SHIPDATE": "[1.6094304E9, 1.6094304E9, 0.0, 4.0, 1.0] ESTIMATE",\n      "L_EXTENDEDPRICE": "[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE",\n      "L_DISCOUNT": "[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE",\n      "L_RETURNFLAG": "[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE",\n      "L_LINESTATUS": "[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE",\n      "L_QUANTITY": "[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE"\n    }\n  },\n  "explain_info": "PLAN FRAGMENT 0(F02)\\n  Output Exprs:9: L_RETURNFLAG | 10: L_LINESTATUS | 20: sum | 21: sum | 22: sum | 23: sum | 24: avg | 25: avg | 26: avg | 27: count\\n  Input Partition: UNPARTITIONED\\n  RESULT SINK\\n\\n  6:MERGING-EXCHANGE\\n     distribution type: GATHER\\n     cardinality: 1\\n     column statistics: \\n     * L_RETURNFLAG--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n     * L_LINESTATUS--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n     * sum--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * sum--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * sum--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * sum--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * count--\x3e[0.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n\\nPLAN FRAGMENT 1(F01)\\n\\n  Input Partition: HASH_PARTITIONED: 9: L_RETURNFLAG, 10: L_LINESTATUS\\n  OutPut Partition: UNPARTITIONED\\n  OutPut Exchange Id: 06\\n\\n  5:SORT\\n  |  order by: [9, VARCHAR, false] ASC, [10, VARCHAR, false] ASC\\n  |  offset: 0\\n  |  cardinality: 1\\n  |  column statistics: \\n  |  * L_RETURNFLAG--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n  |  * L_LINESTATUS--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * count--\x3e[0.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  \\n  4:AGGREGATE (merge finalize)\\n  |  aggregate: sum[([20: sum, DOUBLE, true]); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true], sum[([21: sum, DOUBLE, true]); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true], sum[([22: sum, DOUBLE, true]); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true], sum[([23: sum, DOUBLE, true]); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true], avg[([24: avg, VARBINARY, true]); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true], avg[([25: avg, VARBINARY, true]); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true], avg[([26: avg, VARBINARY, true]); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true], count[([27: count, BIGINT, false]); args: ; result: BIGINT; args nullable: true; result nullable: false]\\n  |  group by: [9: L_RETURNFLAG, VARCHAR, false], [10: L_LINESTATUS, VARCHAR, false]\\n  |  cardinality: 1\\n  |  column statistics: \\n  |  * L_RETURNFLAG--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n  |  * L_LINESTATUS--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * count--\x3e[0.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  \\n  3:EXCHANGE\\n     distribution type: SHUFFLE\\n     partition exprs: [9: L_RETURNFLAG, VARCHAR, false], [10: L_LINESTATUS, VARCHAR, false]\\n     cardinality: 1\\n\\nPLAN FRAGMENT 2(F00)\\n\\n  Input Partition: RANDOM\\n  OutPut Partition: HASH_PARTITIONED: 9: L_RETURNFLAG, 10: L_LINESTATUS\\n  OutPut Exchange Id: 03\\n\\n  2:AGGREGATE (update serialize)\\n  |  STREAMING\\n  |  aggregate: sum[([5: L_QUANTITY, DOUBLE, false]); args: DOUBLE; result: DOUBLE; args nullable: false; result nullable: true], sum[([6: L_EXTENDEDPRICE, DOUBLE, false]); args: DOUBLE; result: DOUBLE; args nullable: false; result nullable: true], sum[([18: expr, DOUBLE, false]); args: DOUBLE; result: DOUBLE; args nullable: false; result nullable: true], sum[([19: expr, DOUBLE, false]); args: DOUBLE; result: DOUBLE; args nullable: false; result nullable: true], avg[([5: L_QUANTITY, DOUBLE, false]); args: DOUBLE; result: VARBINARY; args nullable: false; result nullable: true], avg[([6: L_EXTENDEDPRICE, DOUBLE, false]); args: DOUBLE; result: VARBINARY; args nullable: false; result nullable: true], avg[([7: L_DISCOUNT, DOUBLE, false]); args: DOUBLE; result: VARBINARY; args nullable: false; result nullable: true], count[(*); args: ; result: BIGINT; args nullable: false; result nullable: false]\\n  |  group by: [9: L_RETURNFLAG, VARCHAR, false], [10: L_LINESTATUS, VARCHAR, false]\\n  |  cardinality: 1\\n  |  column statistics: \\n  |  * L_RETURNFLAG--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n  |  * L_LINESTATUS--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * count--\x3e[0.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  \\n  1:Project\\n  |  output columns:\\n  |  5 <-> [5: L_QUANTITY, DOUBLE, false]\\n  |  6 <-> [6: L_EXTENDEDPRICE, DOUBLE, false]\\n  |  7 <-> [7: L_DISCOUNT, DOUBLE, false]\\n  |  9 <-> [9: L_RETURNFLAG, CHAR, false]\\n  |  10 <-> [10: L_LINESTATUS, CHAR, false]\\n  |  18 <-> [29: multiply, DOUBLE, false]\\n  |  19 <-> [29: multiply, DOUBLE, false] * 1.0 + [8: L_TAX, DOUBLE, false]\\n  |  common expressions:\\n  |  28 <-> 1.0 - [7: L_DISCOUNT, DOUBLE, false]\\n  |  29 <-> [6: L_EXTENDEDPRICE, DOUBLE, false] * [28: subtract, DOUBLE, false]\\n  |  cardinality: 1\\n  |  column statistics: \\n  |  * L_QUANTITY--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * L_EXTENDEDPRICE--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * L_DISCOUNT--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * L_RETURNFLAG--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n  |  * L_LINESTATUS--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n  |  * expr--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * expr--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  \\n  0:OlapScanNode\\n     table: lineitem, rollup: lineitem\\n     preAggregation: on\\n     Predicates: [11: L_SHIPDATE, DATE, false] <= \'1998-12-01\'\\n     partitionsRatio=1/1, tabletsRatio=20/20\\n     tabletList=45030,45032,45034,45036,45038,45040,45042,45044,45046,45048 ...\\n     actualRows=3, avgRowSize=54.0\\n     cardinality: 1\\n     column statistics: \\n     * L_QUANTITY--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * L_EXTENDEDPRICE--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * L_DISCOUNT--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * L_TAX--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * L_RETURNFLAG--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n     * L_LINESTATUS--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n     * L_SHIPDATE--\x3e[NaN, NaN, 0.0, 4.0, 1.0] ESTIMATE\\n     * expr--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * expr--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n",\n  "session_variables": "{\\"partial_update_mode\\":\\"auto\\",\\"cbo_cte_reuse\\":true,\\"character_set_connection\\":\\"utf8\\",\\"cbo_use_correlated_join_estimate\\":true,\\"enable_insert_strict\\":true,\\"enable_connector_adaptive_io_tasks\\":true,\\"tx_isolation\\":\\"REPEATABLE-READ\\",\\"enable_hive_metadata_cache_with_insert\\":false,\\"cbo_cte_reuse_rate_v2\\":1.15,\\"character_set_results\\":\\"utf8\\",\\"enable_count_star_optimization\\":true,\\"query_excluding_mv_names\\":\\"\\",\\"enable_rewrite_simple_agg_to_meta_scan\\":false,\\"enable_adaptive_sink_dop\\":true,\\"consistent_hash_virtual_number\\":32,\\"enable_profile\\":false,\\"load_mem_limit\\":0,\\"sql_safe_updates\\":0,\\"runtime_filter_early_return_selectivity\\":0.05,\\"enable_local_shuffle_agg\\":true,\\"disable_function_fold_constants\\":false,\\"select_ratio_threshold\\":0.15,\\"query_delivery_timeout\\":300,\\"collation_database\\":\\"utf8_general_ci\\",\\"spill_mem_table_size\\":104857600,\\"cbo_use_lock_db\\":false,\\"new_planner_agg_stage\\":0,\\"use_compute_nodes\\":-1,\\"collation_connection\\":\\"utf8_general_ci\\",\\"resource_group\\":\\"\\",\\"profile_limit_fold\\":true,\\"spill_operator_max_bytes\\":1048576000,\\"cbo_max_reorder_node_use_dp\\":10,\\"enable_hive_column_stats\\":true,\\"enable_groupby_use_output_alias\\":false,\\"forward_to_leader\\":false,\\"count_distinct_column_buckets\\":1024,\\"query_cache_agg_cardinality_limit\\":5000000,\\"cboPushDownAggregateMode_v1\\":-1,\\"window_partition_mode\\":1,\\"enable_tablet_internal_parallel_v2\\":true,\\"interpolate_passthrough\\":true,\\"enable_incremental_mv\\":false,\\"SQL_AUTO_IS_NULL\\":false,\\"event_scheduler\\":\\"OFF\\",\\"max_pipeline_dop\\":64,\\"broadcast_right_table_scale_factor\\":10,\\"materialized_view_rewrite_mode\\":\\"DEFAULT\\",\\"enable_simplify_case_when\\":true,\\"runtime_join_filter_push_down_limit\\":1024000,\\"big_query_log_cpu_second_threshold\\":480,\\"div_precision_increment\\":4,\\"runtime_adaptive_dop_max_block_rows_per_driver_seq\\":16384,\\"log_rejected_record_num\\":0,\\"cbo_push_down_distinct_below_window\\":true,\\"sql_mode_v2\\":32,\\"prefer_cte_rewrite\\":false,\\"hdfs_backend_selector_scan_range_shuffle\\":false,\\"pipeline_profile_level\\":1,\\"parallel_fragment_exec_instance_num\\":1,\\"max_scan_key_num\\":-1,\\"net_read_timeout\\":60,\\"streaming_preaggregation_mode\\":\\"auto\\",\\"hive_partition_stats_sample_size\\":3000,\\"enable_mv_planner\\":false,\\"enable_collect_table_level_scan_stats\\":true,\\"profile_timeout\\":2,\\"cbo_push_down_aggregate\\":\\"global\\",\\"spill_encode_level\\":7,\\"enable_query_dump\\":false,\\"global_runtime_filter_build_max_size\\":67108864,\\"enable_rewrite_sum_by_associative_rule\\":true,\\"query_cache_hot_partition_num\\":3,\\"enable_prune_complex_types\\":true,\\"query_cache_type\\":0,\\"max_parallel_scan_instance_num\\":-1,\\"query_cache_entry_max_rows\\":409600,\\"enable_mv_optimizer_trace_log\\":false,\\"connector_io_tasks_per_scan_operator\\":16,\\"enable_materialized_view_union_rewrite\\":true,\\"sql_quote_show_create\\":true,\\"scan_or_to_union_threshold\\":50000000,\\"enable_exchange_pass_through\\":true,\\"runtime_profile_report_interval\\":10,\\"query_cache_entry_max_bytes\\":4194304,\\"enable_exchange_perf\\":false,\\"workgroup_id\\":0,\\"enable_rewrite_groupingsets_to_union_all\\":false,\\"transmission_compression_type\\":\\"NO_COMPRESSION\\",\\"interactive_timeout\\":3600,\\"use_page_cache\\":true,\\"big_query_log_scan_bytes_threshold\\":10737418240,\\"collation_server\\":\\"utf8_general_ci\\",\\"tablet_internal_parallel_mode\\":\\"auto\\",\\"enable_pipeline\\":true,\\"spill_mode\\":\\"auto\\",\\"enable_query_debug_trace\\":false,\\"enable_show_all_variables\\":false,\\"full_sort_max_buffered_bytes\\":16777216,\\"wait_timeout\\":28800,\\"transmission_encode_level\\":7,\\"query_including_mv_names\\":\\"\\",\\"transaction_isolation\\":\\"REPEATABLE-READ\\",\\"enable_global_runtime_filter\\":true,\\"enable_load_profile\\":false,\\"enable_plan_validation\\":true,\\"load_transmission_compression_type\\":\\"NO_COMPRESSION\\",\\"cbo_enable_low_cardinality_optimize\\":true,\\"scan_use_query_mem_ratio\\":0.3,\\"new_planner_optimize_timeout\\":3000,\\"enable_outer_join_reorder\\":true,\\"force_schedule_local\\":false,\\"hudi_mor_force_jni_reader\\":false,\\"cbo_enable_greedy_join_reorder\\":true,\\"range_pruner_max_predicate\\":100,\\"enable_rbo_table_prune\\":false,\\"spillable_operator_mask\\":-1,\\"rpc_http_min_size\\":2147482624,\\"cbo_debug_alive_backend_number\\":0,\\"global_runtime_filter_probe_min_size\\":102400,\\"scan_or_to_union_limit\\":4,\\"enable_cbo_table_prune\\":false,\\"enable_parallel_merge\\":true,\\"nested_mv_rewrite_max_level\\":3,\\"net_write_timeout\\":60,\\"cbo_prune_shuffle_column_rate\\":0.1,\\"spill_revocable_max_bytes\\":0,\\"hash_join_push_down_right_table\\":true,\\"pipeline_sink_dop\\":0,\\"broadcast_row_limit\\":15000000,\\"enable_populate_block_cache\\":true,\\"exec_mem_limit\\":2147483648,\\"enable_sort_aggregate\\":false,\\"query_cache_force_populate\\":false,\\"runtime_filter_on_exchange_node\\":false,\\"disable_join_reorder\\":false,\\"enable_rule_based_materialized_view_rewrite\\":true,\\"connector_scan_use_query_mem_ratio\\":0.3,\\"net_buffer_length\\":16384,\\"cbo_prune_subfield\\":true,\\"full_sort_max_buffered_rows\\":1024000,\\"query_timeout\\":300,\\"connector_io_tasks_slow_io_latency_ms\\":50,\\"cbo_max_reorder_node\\":50,\\"enable_distinct_column_bucketization\\":false,\\"enable_big_query_log\\":true,\\"analyze_mv\\":\\"sample\\",\\"runtime_filter_scan_wait_time\\":20,\\"enable_sync_materialized_view_rewrite\\":true,\\"prefer_compute_node\\":false,\\"enable_strict_type\\":false,\\"group_concat_max_len\\":65535,\\"parse_tokens_limit\\":3500000,\\"chunk_size\\":4096,\\"global_runtime_filter_probe_min_selectivity\\":0.5,\\"query_mem_limit\\":0,\\"enable_filter_unused_columns_in_scan_stage\\":true,\\"enable_scan_block_cache\\":false,\\"enable_materialized_view_single_table_view_delta_rewrite\\":false,\\"auto_increment_increment\\":1,\\"sql_dialect\\":\\"StarRocks\\",\\"big_query_log_scan_rows_threshold\\":1000000000,\\"character_set_client\\":\\"utf8\\",\\"autocommit\\":true,\\"enable_column_expr_predicate\\":true,\\"enable_runtime_adaptive_dop\\":false,\\"cbo_cte_max_limit\\":10,\\"storage_engine\\":\\"olap\\",\\"enable_optimizer_trace_log\\":false,\\"spill_operator_min_bytes\\":52428800,\\"cbo_enable_dp_join_reorder\\":true,\\"tx_visible_wait_timeout\\":10,\\"enable_materialized_view_view_delta_rewrite\\":true,\\"cbo_max_reorder_node_use_exhaustive\\":4,\\"enable_sql_digest\\":false,\\"spill_mem_table_num\\":2,\\"enable_spill\\":false,\\"pipeline_dop\\":0,\\"single_node_exec_plan\\":false,\\"full_sort_late_materialization_v2\\":true,\\"join_implementation_mode_v2\\":\\"auto\\",\\"sql_select_limit\\":9223372036854775807,\\"enable_materialized_view_rewrite\\":true,\\"statistic_collect_parallel\\":1,\\"hdfs_backend_selector_hash_algorithm\\":\\"consistent\\",\\"disable_colocate_join\\":false,\\"max_pushdown_conditions_per_column\\":-1,\\"default_table_compression\\":\\"lz4_frame\\",\\"runtime_adaptive_dop_max_output_amplification_factor\\":0,\\"innodb_read_only\\":true,\\"spill_mem_limit_threshold\\":0.8,\\"cbo_reorder_threshold_use_exhaustive\\":6,\\"enable_predicate_reorder\\":false,\\"enable_query_cache\\":false,\\"max_allowed_packet\\":33554432,\\"time_zone\\":\\"Asia/Shanghai\\",\\"enable_multicolumn_global_runtime_filter\\":false,\\"character_set_server\\":\\"utf8\\",\\"cbo_use_nth_exec_plan\\":0,\\"io_tasks_per_scan_operator\\":4,\\"parallel_exchange_instance_num\\":-1,\\"enable_shared_scan\\":false,\\"allow_default_partition\\":false}",\n  "be_number": 1,\n  "be_core_stat": {\n    "numOfHardwareCoresPerBe": "{\\"10004\\":104}",\n    "cachedAvgNumOfHardwareCores": 104\n  },\n  "exception": [],\n  "version": "main_querydump",\n  "commit_version": "0c4d8c8d3e"\n}\n'})}),"\n",(0,a.jsx)(_.h3,{id:"\u6253\u5f00\u4fe1\u606f\u8131\u654f\u9ed8\u8ba4",children:"\u6253\u5f00\u4fe1\u606f\u8131\u654f\uff08\u9ed8\u8ba4\uff09"}),"\n",(0,a.jsx)(_.p,{children:"\u547d\u4ee4"}),"\n",(0,a.jsx)(_.pre,{children:(0,a.jsx)(_.code,{className:"language-shell",children:'wget --user=root --password=123 --post-file query_file "http://127.0.0.1:8030/api/query_dump?db=tpch" -O dump_file\n'})}),"\n",(0,a.jsx)(_.p,{children:"\u8fd4\u56de\u683c\u5f0f"}),"\n",(0,a.jsx)(_.p,{children:"\u4fe1\u606f\u8131\u654f\u540e\u8fd4\u56de\uff0c\u8fd4\u56de\u683c\u5f0f\u4e3a JSON\uff0c\u6837\u4f8b\uff1a"}),"\n",(0,a.jsx)(_.pre,{children:(0,a.jsx)(_.code,{className:"language-json",children:'{\n  "statement": "SELECT tbl_mock_001.mock_012, tbl_mock_001.mock_007, sum(tbl_mock_001.mock_010) AS mock_019, sum(tbl_mock_001.mock_005) AS mock_020, sum(tbl_mock_001.mock_005 * (1 - tbl_mock_001.mock_004)) AS mock_021, sum((tbl_mock_001.mock_005 * (1 - tbl_mock_001.mock_004)) * (1 + tbl_mock_001.mock_017)) AS mock_022, avg(tbl_mock_001.mock_010) AS mock_023, avg(tbl_mock_001.mock_005) AS mock_024, avg(tbl_mock_001.mock_004) AS mock_025, count(*) AS mock_026\\nFROM db_mock_000.tbl_mock_001\\nWHERE tbl_mock_001.mock_013 <= \'1998-12-01\'\\nGROUP BY tbl_mock_001.mock_012, tbl_mock_001.mock_007 ORDER BY tbl_mock_001.mock_012 ASC, tbl_mock_001.mock_007 ASC ",\n  "table_meta": {\n    "db_mock_000.tbl_mock_001": "CREATE TABLE db_mock_000.tbl_mock_001 (\\nmock_008 int(11) NOT NULL ,\\nmock_009 int(11) NOT NULL ,\\nmock_016 int(11) NOT NULL ,\\nmock_006 int(11) NOT NULL ,\\nmock_010 double NOT NULL ,\\nmock_005 double NOT NULL ,\\nmock_004 double NOT NULL ,\\nmock_017 double NOT NULL ,\\nmock_012 char(1) NOT NULL ,\\nmock_007 char(1) NOT NULL ,\\nmock_013 date NOT NULL ,\\nmock_003 date NOT NULL ,\\nmock_011 date NOT NULL ,\\nmock_014 char(25) NOT NULL ,\\nmock_015 char(10) NOT NULL ,\\nmock_002 varchar(44) NOT NULL ,\\nmock_018 char(1) NOT NULL \\n) ENGINE= OLAP \\nDUPLICATE KEY(mock_008)\\nDISTRIBUTED BY HASH(mock_008) BUCKETS 20 \\nPROPERTIES (\\n\\"replication_num\\" = \\"1\\"\\n);"\n  },\n  "table_row_count": {\n    "db_mock_000.tbl_mock_001": {\n      "tbl_mock_001": 3\n    }\n  },\n  "column_statistics": {\n    "db_mock_000.tbl_mock_001": {\n      "mock_017": "[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE",\n      "mock_013": "[1.6094304E9, 1.6094304E9, 0.0, 4.0, 1.0] ESTIMATE",\n      "mock_005": "[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE",\n      "mock_004": "[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE",\n      "mock_012": "[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE",\n      "mock_007": "[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE",\n      "mock_010": "[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE"\n    }\n  },\n  "explain_info": "PLAN FRAGMENT 0(F02)\\n  Output Exprs:9: mock_012 | 10: mock_007 | 20: sum | 21: sum | 22: sum | 23: sum | 24: avg | 25: avg | 26: avg | 27: count\\n  Input Partition: UNPARTITIONED\\n  RESULT SINK\\n\\n  6:MERGING-EXCHANGE\\n     distribution type: GATHER\\n     cardinality: 1\\n     column statistics: \\n     * mock_012--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n     * mock_007--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n     * sum--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * sum--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * sum--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * sum--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * count--\x3e[0.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n\\nPLAN FRAGMENT 1(F01)\\n\\n  Input Partition: HASH_PARTITIONED: 9: mock_012, 10: mock_007\\n  OutPut Partition: UNPARTITIONED\\n  OutPut Exchange id: 06\\n\\n  5:SORT\\n  |  order by: [9, VARCHAR, false] ASC, [10, VARCHAR, false] ASC\\n  |  offset: 0\\n  |  cardinality: 1\\n  |  column statistics: \\n  |  * mock_012--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n  |  * mock_007--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * count--\x3e[0.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  \\n  4:AGGREGATE (merge finalize)\\n  |  aggregate: sum[([20: sum, DOUBLE, true]); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true], sum[([21: sum, DOUBLE, true]); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true], sum[([22: sum, DOUBLE, true]); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true], sum[([23: sum, DOUBLE, true]); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true], avg[([24: avg, VARBINARY, true]); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true], avg[([25: avg, VARBINARY, true]); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true], avg[([26: avg, VARBINARY, true]); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true], count[([27: count, BIGINT, false]); args: ; result: BIGINT; args nullable: true; result nullable: false]\\n  |  group by: [9: mock_012, VARCHAR, false], [10: mock_007, VARCHAR, false]\\n  |  cardinality: 1\\n  |  column statistics: \\n  |  * mock_012--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n  |  * mock_007--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * count--\x3e[0.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  \\n  3:EXCHANGE\\n     distribution type: SHUFFLE\\n     partition exprs: [9: mock_012, VARCHAR, false], [10: mock_007, VARCHAR, false]\\n     cardinality: 1\\n\\nPLAN FRAGMENT 2(F00)\\n\\n  Input Partition: RANDOM\\n  OutPut Partition: HASH_PARTITIONED: 9: mock_012, 10: mock_007\\n  OutPut Exchange id: 03\\n\\n  2:AGGREGATE (update serialize)\\n  |  STREAMING\\n  |  aggregate: sum[([5: mock_010, DOUBLE, false]); args: DOUBLE; result: DOUBLE; args nullable: false; result nullable: true], sum[([6: mock_005, DOUBLE, false]); args: DOUBLE; result: DOUBLE; args nullable: false; result nullable: true], sum[([18: expr, DOUBLE, false]); args: DOUBLE; result: DOUBLE; args nullable: false; result nullable: true], sum[([19: expr, DOUBLE, false]); args: DOUBLE; result: DOUBLE; args nullable: false; result nullable: true], avg[([5: mock_010, DOUBLE, false]); args: DOUBLE; result: VARBINARY; args nullable: false; result nullable: true], avg[([6: mock_005, DOUBLE, false]); args: DOUBLE; result: VARBINARY; args nullable: false; result nullable: true], avg[([7: mock_004, DOUBLE, false]); args: DOUBLE; result: VARBINARY; args nullable: false; result nullable: true], count[(*); args: ; result: BIGINT; args nullable: false; result nullable: false]\\n  |  group by: [9: mock_012, VARCHAR, false], [10: mock_007, VARCHAR, false]\\n  |  cardinality: 1\\n  |  column statistics: \\n  |  * mock_012--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n  |  * mock_007--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * sum--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * avg--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * count--\x3e[0.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  \\n  1:Project\\n  |  output columns:\\n  |  5 <-> [5: mock_010, DOUBLE, false]\\n  |  6 <-> [6: mock_005, DOUBLE, false]\\n  |  7 <-> [7: mock_004, DOUBLE, false]\\n  |  9 <-> [9: mock_012, CHAR, false]\\n  |  10 <-> [10: mock_007, CHAR, false]\\n  |  18 <-> [29: multiply, DOUBLE, false]\\n  |  19 <-> [29: multiply, DOUBLE, false] * 1.0 + [8: mock_017, DOUBLE, false]\\n  |  common expressions:\\n  |  28 <-> 1.0 - [7: mock_004, DOUBLE, false]\\n  |  29 <-> [6: mock_005, DOUBLE, false] * [28: subtract, DOUBLE, false]\\n  |  cardinality: 1\\n  |  column statistics: \\n  |  * mock_010--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * mock_005--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * mock_004--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * mock_012--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n  |  * mock_007--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n  |  * expr--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  * expr--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n  |  \\n  0:OlapScanNode\\n     table: mock_001, rollup: mock_001\\n     preAggregation: on\\n     Predicates: [11: mock_013, DATE, false] <= \'1998-12-01\'\\n     partitionsRatio=1/1, tabletsRatio=20/20\\n     tabletList=45030,45032,45034,45036,45038,45040,45042,45044,45046,45048 ...\\n     actualRows=3, avgRowSize=54.0\\n     cardinality: 1\\n     column statistics: \\n     * mock_010--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * mock_005--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * mock_004--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * mock_017--\x3e[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * mock_012--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n     * mock_007--\x3e[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\\n     * mock_013--\x3e[NaN, NaN, 0.0, 4.0, 1.0] ESTIMATE\\n     * expr--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n     * expr--\x3e[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE\\n",\n  "session_variables": "{\\"partial_update_mode\\":\\"auto\\",\\"cbo_cte_reuse\\":true,\\"character_set_connection\\":\\"utf8\\",\\"cbo_use_correlated_join_estimate\\":true,\\"enable_insert_strict\\":true,\\"enable_connector_adaptive_io_tasks\\":true,\\"tx_isolation\\":\\"REPEATABLE-READ\\",\\"enable_hive_metadata_cache_with_insert\\":false,\\"cbo_cte_reuse_rate_v2\\":1.15,\\"character_set_results\\":\\"utf8\\",\\"enable_count_star_optimization\\":true,\\"query_excluding_mv_names\\":\\"\\",\\"enable_rewrite_simple_agg_to_meta_scan\\":false,\\"enable_adaptive_sink_dop\\":true,\\"consistent_hash_virtual_number\\":32,\\"enable_profile\\":false,\\"load_mem_limit\\":0,\\"sql_safe_updates\\":0,\\"runtime_filter_early_return_selectivity\\":0.05,\\"enable_local_shuffle_agg\\":true,\\"disable_function_fold_constants\\":false,\\"select_ratio_threshold\\":0.15,\\"query_delivery_timeout\\":300,\\"collation_database\\":\\"utf8_general_ci\\",\\"spill_mem_table_size\\":104857600,\\"cbo_use_lock_db\\":false,\\"new_planner_agg_stage\\":0,\\"use_compute_nodes\\":-1,\\"collation_connection\\":\\"utf8_general_ci\\",\\"resource_group\\":\\"\\",\\"profile_limit_fold\\":true,\\"spill_operator_max_bytes\\":1048576000,\\"cbo_max_reorder_node_use_dp\\":10,\\"enable_hive_column_stats\\":true,\\"enable_groupby_use_output_alias\\":false,\\"forward_to_leader\\":false,\\"count_distinct_column_buckets\\":1024,\\"query_cache_agg_cardinality_limit\\":5000000,\\"cboPushDownAggregateMode_v1\\":-1,\\"window_partition_mode\\":1,\\"enable_tablet_internal_parallel_v2\\":true,\\"interpolate_passthrough\\":true,\\"enable_incremental_mv\\":false,\\"SQL_AUTO_IS_NULL\\":false,\\"event_scheduler\\":\\"OFF\\",\\"max_pipeline_dop\\":64,\\"broadcast_right_table_scale_factor\\":10,\\"materialized_view_rewrite_mode\\":\\"DEFAULT\\",\\"enable_simplify_case_when\\":true,\\"runtime_join_filter_push_down_limit\\":1024000,\\"big_query_log_cpu_second_threshold\\":480,\\"div_precision_increment\\":4,\\"runtime_adaptive_dop_max_block_rows_per_driver_seq\\":16384,\\"log_rejected_record_num\\":0,\\"cbo_push_down_distinct_below_window\\":true,\\"sql_mode_v2\\":32,\\"prefer_cte_rewrite\\":false,\\"hdfs_backend_selector_scan_range_shuffle\\":false,\\"pipeline_profile_level\\":1,\\"parallel_fragment_exec_instance_num\\":1,\\"max_scan_key_num\\":-1,\\"net_read_timeout\\":60,\\"streaming_preaggregation_mode\\":\\"auto\\",\\"hive_partition_stats_sample_size\\":3000,\\"enable_mv_planner\\":false,\\"enable_collect_table_level_scan_stats\\":true,\\"profile_timeout\\":2,\\"cbo_push_down_aggregate\\":\\"global\\",\\"spill_encode_level\\":7,\\"enable_query_dump\\":false,\\"global_runtime_filter_build_max_size\\":67108864,\\"enable_rewrite_sum_by_associative_rule\\":true,\\"query_cache_hot_partition_num\\":3,\\"enable_prune_complex_types\\":true,\\"query_cache_type\\":0,\\"max_parallel_scan_instance_num\\":-1,\\"query_cache_entry_max_rows\\":409600,\\"enable_mv_optimizer_trace_log\\":false,\\"connector_io_tasks_per_scan_operator\\":16,\\"enable_materialized_view_union_rewrite\\":true,\\"sql_quote_show_create\\":true,\\"scan_or_to_union_threshold\\":50000000,\\"enable_exchange_pass_through\\":true,\\"runtime_profile_report_interval\\":10,\\"query_cache_entry_max_bytes\\":4194304,\\"enable_exchange_perf\\":false,\\"workgroup_id\\":0,\\"enable_rewrite_groupingsets_to_union_all\\":false,\\"transmission_compression_type\\":\\"NO_COMPRESSION\\",\\"interactive_timeout\\":3600,\\"use_page_cache\\":true,\\"big_query_log_scan_bytes_threshold\\":10737418240,\\"collation_server\\":\\"utf8_general_ci\\",\\"tablet_internal_parallel_mode\\":\\"auto\\",\\"enable_pipeline\\":true,\\"spill_mode\\":\\"auto\\",\\"enable_query_debug_trace\\":false,\\"enable_show_all_variables\\":false,\\"full_sort_max_buffered_bytes\\":16777216,\\"wait_timeout\\":28800,\\"transmission_encode_level\\":7,\\"query_including_mv_names\\":\\"\\",\\"transaction_isolation\\":\\"REPEATABLE-READ\\",\\"enable_global_runtime_filter\\":true,\\"enable_load_profile\\":false,\\"enable_plan_validation\\":true,\\"load_transmission_compression_type\\":\\"NO_COMPRESSION\\",\\"cbo_enable_low_cardinality_optimize\\":true,\\"scan_use_query_mem_ratio\\":0.3,\\"new_planner_optimize_timeout\\":3000,\\"enable_outer_join_reorder\\":true,\\"force_schedule_local\\":false,\\"hudi_mor_force_jni_reader\\":false,\\"cbo_enable_greedy_join_reorder\\":true,\\"range_pruner_max_predicate\\":100,\\"enable_rbo_table_prune\\":false,\\"spillable_operator_mask\\":-1,\\"rpc_http_min_size\\":2147482624,\\"cbo_debug_alive_backend_number\\":0,\\"global_runtime_filter_probe_min_size\\":102400,\\"scan_or_to_union_limit\\":4,\\"enable_cbo_table_prune\\":false,\\"enable_parallel_merge\\":true,\\"nested_mv_rewrite_max_level\\":3,\\"net_write_timeout\\":60,\\"cbo_prune_shuffle_column_rate\\":0.1,\\"spill_revocable_max_bytes\\":0,\\"hash_join_push_down_right_table\\":true,\\"pipeline_sink_dop\\":0,\\"broadcast_row_limit\\":15000000,\\"enable_populate_block_cache\\":true,\\"exec_mem_limit\\":2147483648,\\"enable_sort_aggregate\\":false,\\"query_cache_force_populate\\":false,\\"runtime_filter_on_exchange_node\\":false,\\"disable_join_reorder\\":false,\\"enable_rule_based_materialized_view_rewrite\\":true,\\"connector_scan_use_query_mem_ratio\\":0.3,\\"net_buffer_length\\":16384,\\"cbo_prune_subfield\\":true,\\"full_sort_max_buffered_rows\\":1024000,\\"query_timeout\\":300,\\"connector_io_tasks_slow_io_latency_ms\\":50,\\"cbo_max_reorder_node\\":50,\\"enable_distinct_column_bucketization\\":false,\\"enable_big_query_log\\":true,\\"analyze_mv\\":\\"sample\\",\\"runtime_filter_scan_wait_time\\":20,\\"enable_sync_materialized_view_rewrite\\":true,\\"prefer_compute_node\\":false,\\"enable_strict_type\\":false,\\"group_concat_max_len\\":65535,\\"parse_tokens_limit\\":3500000,\\"chunk_size\\":4096,\\"global_runtime_filter_probe_min_selectivity\\":0.5,\\"query_mem_limit\\":0,\\"enable_filter_unused_columns_in_scan_stage\\":true,\\"enable_scan_block_cache\\":false,\\"enable_materialized_view_single_table_view_delta_rewrite\\":false,\\"auto_increment_increment\\":1,\\"sql_dialect\\":\\"StarRocks\\",\\"big_query_log_scan_rows_threshold\\":1000000000,\\"character_set_client\\":\\"utf8\\",\\"autocommit\\":true,\\"enable_column_expr_predicate\\":true,\\"enable_runtime_adaptive_dop\\":false,\\"cbo_cte_max_limit\\":10,\\"storage_engine\\":\\"olap\\",\\"enable_optimizer_trace_log\\":false,\\"spill_operator_min_bytes\\":52428800,\\"cbo_enable_dp_join_reorder\\":true,\\"tx_visible_wait_timeout\\":10,\\"enable_materialized_view_view_delta_rewrite\\":true,\\"cbo_max_reorder_node_use_exhaustive\\":4,\\"enable_sql_digest\\":false,\\"spill_mem_table_num\\":2,\\"enable_spill\\":false,\\"pipeline_dop\\":0,\\"single_node_exec_plan\\":false,\\"full_sort_late_materialization_v2\\":true,\\"join_implementation_mode_v2\\":\\"auto\\",\\"sql_select_limit\\":9223372036854775807,\\"enable_materialized_view_rewrite\\":true,\\"statistic_collect_parallel\\":1,\\"hdfs_backend_selector_hash_algorithm\\":\\"consistent\\",\\"disable_colocate_join\\":false,\\"max_pushdown_conditions_per_column\\":-1,\\"default_table_compression\\":\\"lz4_frame\\",\\"runtime_adaptive_dop_max_output_amplification_factor\\":0,\\"innodb_read_only\\":true,\\"spill_mem_limit_threshold\\":0.8,\\"cbo_reorder_threshold_use_exhaustive\\":6,\\"enable_predicate_reorder\\":false,\\"enable_query_cache\\":false,\\"max_allowed_packet\\":33554432,\\"time_zone\\":\\"Asia/Shanghai\\",\\"enable_multicolumn_global_runtime_filter\\":false,\\"character_set_server\\":\\"utf8\\",\\"cbo_use_nth_exec_plan\\":0,\\"io_tasks_per_scan_operator\\":4,\\"parallel_exchange_instance_num\\":-1,\\"enable_shared_scan\\":false,\\"allow_default_partition\\":false}",\n  "be_number": 1,\n  "be_core_stat": {\n    "numOfHardwareCoresPerBe": "{\\"10004\\":104}",\n    "cachedAvgNumOfHardwareCores": 104\n  },\n  "exception": [],\n  "version": "main_querydump",\n  "commit_version": "0c4d8c8d3e"\n}\n'})}),"\n",(0,a.jsx)(_.h2,{id:"keywords",children:"Keywords"}),"\n",(0,a.jsx)(_.p,{children:"query_dump, query dump"})]})}const c=function(e={}){const{wrapper:_}=Object.assign({},(0,t.ah)(),e.components);return _?(0,a.jsx)(_,Object.assign({},e,{children:(0,a.jsx)(u,e)})):u(e)}},11151:(e,_,n)=>{n.d(_,{Zo:()=>s,ah:()=>l});var a=n(67294);const t=a.createContext({});function l(e){const _=a.useContext(t);return a.useMemo((()=>"function"==typeof e?e(_):{..._,...e}),[_,e])}const r={};function s({components:e,children:_,disableParentContext:n}){let s;return s=n?"function"==typeof e?e({}):e||r:l(e),a.createElement(t.Provider,{value:s},_)}}}]);